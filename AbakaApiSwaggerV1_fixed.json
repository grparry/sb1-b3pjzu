{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Abaka APIs"
  },
  "host": "backoffice-test.abaka.me",
  "schemes": [
    "https"
  ],
  "paths": {
    "/api/provider": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Get providers",
        "operationId": "AIP_SearchProviders",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Name of the provider to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "countryId",
            "in": "query",
            "description": "Country of the provider to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of element to return",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "linkService",
            "in": "query",
            "description": "List of link services to use (left empty to use all the services available for this enterprise)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of providers",
            "schema": {
              "$ref": "#/definitions/PagingModel[Provider]"
            }
          }
        }
      }
    },
    "/api/provideraccount/{id}/account/all": {
      "get": {
        "tags": [
          "Provider Account"
        ],
        "summary": "Get accounts for provideraccount",
        "description": "Get financial accounts related to a provider account for a specific user",
        "operationId": "AIP_GetAccountsDetailsFromProvider",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Provider account Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialAccountRM"
              }
            }
          }
        }
      }
    },
    "/api/account/{accountId}/projection": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "Get an account graphic datas",
        "description": "Get the projection for a financial account",
        "operationId": "AIP_GetGraphicDataFromAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "numberOfYear",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Graphic account datas",
            "schema": {
              "$ref": "#/definitions/EstimateAccountProjection"
            }
          }
        }
      }
    },
    "/api/asset": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Search assets",
        "operationId": "AIP_SearchAssets",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "description": "Assets filter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FundsSearchFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of assets",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetRM"
              }
            }
          }
        }
      }
    },
    "/api/asset/exist": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Check reseller assets exist",
        "description": "Check if reseller has assets in our database to propose the switch asset use case",
        "operationId": "AIP_ResellerAssetsExist",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Reseller assets exist",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/asset/{id}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get asset",
        "description": "Get asset by Id",
        "operationId": "AIP_GetAsset",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset",
            "schema": {
              "$ref": "#/definitions/AssetRM"
            }
          }
        }
      }
    },
    "/api/asset/factsheet": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get asset factsheet",
        "description": "Get the requested asset fact sheet (PDF document)",
        "operationId": "AIP_GetAssetFactSheetDocument",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "isin",
            "in": "query",
            "description": "ISIN of the asset",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/asset/keyinvestor": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get asset key investor",
        "description": "Get the requested asset key investor information (PDF document)",
        "operationId": "AIP_GetAssetKeyInvestorDocument",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "isin",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/pension/active": {
      "get": {
        "tags": [
          "Pension"
        ],
        "summary": "Get active pension",
        "description": "Get user active pension",
        "operationId": "AIP_GetActivePension",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Pension"
        ],
        "summary": "Check if active pension exists",
        "description": "Check if the user has an active pension",
        "operationId": "AIP_HasActivePension",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Active pension exist",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/account/type": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check accounts' types exist",
        "description": "Determine if the current user possesses accounts of the given types",
        "operationId": "AIP_HasAccounts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountCategories",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts type exist",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/account/transaction/other": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check other transactions",
        "description": "Check if the user has less than 15% of transactions with type = OTHER with at least one full month of transactions. If user does not have enough transactions, return true\r\n            only consider DEBIT base type",
        "operationId": "AIP_HasOtherTransactions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Too many other transactions",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/account/transaction/category": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get transaction category details",
        "description": "Get the details of a given transaction category",
        "operationId": "AIP_GetCategoriesTansactionDetail",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "AIPCategoryId",
            "in": "query",
            "description": "Transaction category",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction category",
            "schema": {
              "$ref": "#/definitions/CategoriesTansaction"
            }
          }
        }
      }
    },
    "/api/account/{accountId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account",
        "description": "Get account details",
        "operationId": "AIP_GetAccountDetails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Account details",
            "schema": {
              "$ref": "#/definitions/FinancialAccountRM"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete account",
        "description": "Delete account from database. If no more accounts linked to the related provider account, then delete provider account",
        "operationId": "AIP_DeleteAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/account/transaction": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Get accounts transactions",
        "operationId": "AIP_GetTransactions",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "description": "Transaction filter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionsFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of transactions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountTransaction"
              }
            }
          }
        }
      }
    },
    "/api/account/transaction/all": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all accounts and transactions",
        "description": "Get all accounts and transactions",
        "operationId": "AIP_GetAllAccountsTransactions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of accounts and transactions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialAccountRM"
              }
            }
          }
        }
      }
    },
    "/api/account/currency": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get accounts in original currency",
        "description": "Get accounts details with no transaction",
        "operationId": "AIP_GetAccounts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountTypes",
            "in": "query",
            "description": "Account type, pipe separated string eg : PRIVATEACCOUNT|SAVINGS",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkServiceProviderId",
            "in": "query",
            "description": "Pension provider id",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkServiceId",
            "in": "query",
            "description": "Pension provider id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts in original currency",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialAccountRM"
              }
            }
          }
        }
      }
    },
    "/api/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get accounts in preferred currency",
        "description": "Get accounts details with no transaction",
        "operationId": "AIP_GetAccountsInPreferredCurrency",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountTypes",
            "in": "query",
            "description": "Account type",
            "required": false,
            "type": "string"
          },
          {
            "name": "linkServiceProviderId",
            "in": "query",
            "description": "Pension provider id",
            "required": false,
            "type": "string"
          },
          {
            "name": "linkServiceId",
            "in": "query",
            "description": "Pension provider id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts in user preferred currency",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialAccountRM"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Save account",
        "operationId": "AIP_SaveAccount",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "body",
            "description": "Account model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialAccountRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account",
            "schema": {
              "$ref": "#/definitions/FinancialAccountRM"
            }
          }
        }
      }
    },
    "/api/account/goal": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Refresh accounts and related goals",
        "description": "Update accounts and related goals, recalculating retirement forecast income",
        "operationId": "AIP_RefreshAccountsAndGoals",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/provider/{linkServiceId}/{linkServiceProviderId}": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Get provider",
        "description": "Get provider details",
        "operationId": "AIP_GetProviderDetails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "linkServiceProviderId",
            "in": "path",
            "description": "Id of the provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkServiceId",
            "in": "path",
            "description": "LinkService Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider",
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          }
        }
      }
    },
    "/api/account/transaction/rule": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Apply transaction rule",
        "operationId": "AIP_ApplyTransactionRule",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Transaction rule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/provideraccount": {
      "post": {
        "tags": [
          "Provider Account"
        ],
        "summary": "Link provider account",
        "operationId": "AIP_SendMFA",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Link provider account input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkProviderAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/account/{accountId}/beneficiaries": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get beneficiaries",
        "description": "Get list of beneficiatries",
        "operationId": "AIP_GetBeneficiaries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of beneficiary of the account",
            "schema": {
              "$ref": "#/definitions/Beneficiary"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Beneficiaries",
          "Account"
        ],
        "summary": "Update beneficiaries",
        "description": "Update list of beneficiaries",
        "operationId": "AIP_UpdateBeneficiaries",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "beneficiaries",
            "in": "body",
            "description": "List of beneficiaries",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Beneficiary"
              }
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update the list of beneficiaries",
            "schema": {
              "$ref": "#/definitions/Beneficiary"
            }
          }
        }
      }
    },
    "/api/account/{id}/performance": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Return the performance of the asset lines of an account",
        "operationId": "AIP_AccountPerformance",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts type exist",
            "schema": {
              "$ref": "#/definitions/FundPerformanceRM"
            }
          }
        }
      }
    },
    "/api/account/{id}/performance/periods": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Return the available periods of performance for an account",
        "operationId": "AIP_AccountPerformancePeriods",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Available fund performance period",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Perf1M",
                  "Perf3M",
                  "Perf6M",
                  "Perf12M",
                  "Perf1Y",
                  "Perf3Y",
                  "Perf5Y"
                ],
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/account/{accountId}/fundsoperations": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Process account funds oprerations",
        "description": "Process account operations",
        "operationId": "AIP_ProcessAccountFundsOperations",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "operations",
            "in": "body",
            "description": "Operations to execute on account funds",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountFundsOperationsRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/appointment/category": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointment categories",
        "description": "Get all existing categories for a given appointment type.",
        "operationId": "AppointmentApi_GetAppointmentCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "appointmentType",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppointmentCategory"
              }
            }
          }
        }
      }
    },
    "/api/appointment/availability": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointment availability",
        "description": "Get the availability (in terms of a list of possible appointment dates) for a certain feature (i.e. project)",
        "operationId": "AppointmentApi_GetAvailability",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "featureId",
            "in": "query",
            "description": "Id of the feature corresponding to the appointment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of availabilities",
            "schema": {
              "$ref": "#/definitions/AppointmentBookingAvailability"
            }
          }
        }
      }
    },
    "/api/appointment": {
      "put": {
        "tags": [
          "Appointment"
        ],
        "summary": "Confirm appointment",
        "description": "Confirm an appointment from a confirmation object (containing the order and appointment IDs), and send confirmation email(s)",
        "operationId": "AppointmentApi_ConfirmAppointment",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfirmAppointmentVM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Book appointment",
        "description": "Perform a booking from an appointment object (i.e. containing date and feature). Use transactions to guarantee data consistency.",
        "operationId": "AppointmentApi_BookAppointment",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookAppointmentVM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Id of the appointment",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Appointment"
        ],
        "summary": "Reschedule appointment",
        "description": "Reschedule an appointment from an appointment reschedule item (i.e. containing cancellation ID and appointment new dates).\r\n            Fail if the cancellation notice is not satisfied or the new dates are inconsistent. Use transactions to guarantee data consistency",
        "operationId": "AppointmentApi_RescheduleAppointment",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "description": "Appointment to be rescheduled",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RescheduleAppointmentVM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/appointment/{appointmentId}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointment",
        "description": "Get an appointment from its ID. It must be visible to the connected user",
        "operationId": "AppointmentApi_GetAppointment",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Id of the appointment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment",
            "schema": {
              "$ref": "#/definitions/AppointmentRM"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Cancel appointment",
        "description": "Cancel the appointment corresponding to a given booking ID, if allowed by the cancellation notice",
        "operationId": "AppointmentApi_CancelAppointment",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Id of the appointment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Id of the appointment",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/appointment/all": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointments",
        "description": "Get all future appointments that are visible to the connected user",
        "operationId": "AppointmentApi_GetAppointments",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/budget/categories-monthly-average": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Return the average monthly spending per category for the request's sender.\r\n<remarks>Only the last 3 full months are used</remarks>",
        "operationId": "BudgetApi_GetCategoriesMonthlyAverage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "User average spending",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryMonthlyAverage"
              }
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/budget/monthly-savings": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": " Get the monthly savings of a user on a date range, calculations are made on full months so the date range is sanitized\r\n<remarks>If you need only one month you can use the same value for {rangeFrom} and {rangeTo}</remarks>",
        "operationId": "BudgetApi_GetMonthlySavings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "rangeFrom",
            "in": "query",
            "description": "The start of the date range, it's going to be flattened as the first day of {rangeFrom} month",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "rangeTo",
            "in": "query",
            "description": "The end of the date range, it's going to be flattened as the last day of {rangeTo} month\r\n            It needs to be inferior or equal to {rangeFrom}",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "User monthly savings",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SavingsSpendingsModel"
              }
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/campaign/activate": {
      "post": {
        "tags": [
          "CampaignNudge"
        ],
        "operationId": "CampaignApi_Activate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Activate campaign nudges"
          }
        }
      }
    },
    "/api/campaign/deactivate": {
      "post": {
        "tags": [
          "CampaignNudge"
        ],
        "operationId": "CampaignApi_Deactivate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deactivate campaign nudges"
          }
        }
      }
    },
    "/api/campaign/test": {
      "post": {
        "tags": [
          "Test Campaign"
        ],
        "operationId": "CampaignApi_CreateTestCampaignNotifications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Created notifications ID for campaign",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/country/uk/address": {
      "get": {
        "tags": [
          "Country",
          "B2B"
        ],
        "summary": "Get address from postcode",
        "description": "Get address from postcode using GetAddressIO api",
        "operationId": "CountryApi_FindAddressFromPostCode",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "postCode",
            "in": "query",
            "description": "Postcode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of addresses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddressModel"
              }
            }
          }
        }
      }
    },
    "/api/country/account/category/all": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get country accounts categories",
        "description": "Get country accounts categories",
        "operationId": "CountryApi_GetAccountCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Account",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountTypeRM"
              }
            }
          }
        }
      }
    },
    "/api/country/uk/equityrelease": {
      "post": {
        "tags": [
          "Country",
          "B2B"
        ],
        "summary": "Get equity release value",
        "description": "Get equity release value based on property value and owner age",
        "operationId": "CountryApi_GetEquityReleaseValue",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Equity release inputs",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EquityReleaseValueInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Equity release value",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/country/uk/property": {
      "get": {
        "tags": [
          "Country",
          "B2B"
        ],
        "summary": "Get estimated property value",
        "description": "",
        "operationId": "CountryApi_GetEstimatedPropertyValue",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "postCode",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "numberOfBedRooms",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "numberOfBathRooms",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offStreetParkingSpaces",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyType",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              3,
              -1
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Estimated property value",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/country/uk/equityrelease/term": {
      "post": {
        "tags": [
          "Country",
          "B2B"
        ],
        "summary": "Get monthly equity release value",
        "description": "Get monthly equity release value based on number of year term",
        "operationId": "CountryApi_GetMonthlyEquityReleaseValue",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Equity release inputs",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EquityReleaseValueInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Estimated property value",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/country/uk/equityrelease/flex": {
      "post": {
        "tags": [
          "Country",
          "B2B"
        ],
        "summary": "Get flex equity release",
        "description": "Get flex equity release",
        "operationId": "CountryApi_GetFlexEquityReleaseValue",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Equity release flex value input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EquityReleaseFlexValueInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of values",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Money"
              }
            }
          }
        }
      }
    },
    "/api/country/uk/equityrelease/contract": {
      "get": {
        "tags": [
          "Country",
          "B2B"
        ],
        "summary": "Get available equity release contrat duration",
        "description": "Get available equity release contrat duration (yearly)",
        "operationId": "CountryApi_GetAvailableEquityReleaseYearlyContractDurationsForUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ownerAge",
            "in": "query",
            "description": "Owner age",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of contract duration",
            "schema": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "/api/country/phone": {
      "get": {
        "tags": [
          "Country",
          "B2B"
        ],
        "summary": "Check valid phone number",
        "description": "Check if phone number is valid given the country code",
        "operationId": "CountryApi_IsValidPhoneNumber",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "Phone number",
            "required": true,
            "type": "string"
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Country code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Is phone number valid",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/country/email": {
      "get": {
        "tags": [
          "Country",
          "B2B"
        ],
        "summary": "Check if email is valid",
        "description": "Check if email is valid",
        "operationId": "CountryApi_IsValidEmail",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Is email valid",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/country/area": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get geographic areas",
        "description": "Get the geographic areas available for the user in the country",
        "operationId": "CountryApi_GetGeographicAreas",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "areaType",
            "in": "query",
            "description": "Area type",
            "required": false,
            "type": "string",
            "enum": [
              "CITY",
              "COUNTY"
            ]
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "Parent area id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of geographic areas",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeographicAreaRM"
              }
            }
          }
        }
      }
    },
    "/api/country/city": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get geographic area",
        "description": "Get the geographic area detail",
        "operationId": "CountryApi_GetGeographicArea",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "areaId",
            "in": "query",
            "description": "Area type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Geographic area",
            "schema": {
              "$ref": "#/definitions/GeographicAreaRM"
            }
          }
        }
      }
    },
    "/api/country/expense/category": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get market average category expense",
        "description": "Get the sum of the expenses incomes of the current user, for given period types and category",
        "operationId": "CountryApi_GetCategoryExpensesIncomesPerPeriod",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "periodType",
            "in": "query",
            "description": "Period type",
            "required": true,
            "type": "string"
          },
          {
            "name": "aipCategoryId",
            "in": "query",
            "description": "Category Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Sum of market average cagegory expense",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/country/expense": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get market average expenses per period",
        "description": "Get the sum of the expenses incomes of the current user, for given period types",
        "operationId": "CountryApi_GetExpensesIncomesPerPeriod",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "periodType",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Sum of market average expenses",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/country/lifestyle/all": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get country lifestyles",
        "description": "Get the lifestyles available for the user in the country",
        "operationId": "CountryApi_GetLifeStyles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "areaId",
            "in": "query",
            "description": "Area Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of life styles",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LifeStyleRM"
              }
            }
          }
        }
      }
    },
    "/api/country/lifestyle": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get lifestyle",
        "description": "Get the lifestyle corresponding to the given Id",
        "operationId": "CountryApi_GetLifeStyle",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "lifeStyleId",
            "in": "query",
            "description": "lifeStyleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Life style",
            "schema": {
              "$ref": "#/definitions/LifeStyleRM"
            }
          }
        }
      }
    },
    "/api/country/all": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get supported countries",
        "operationId": "CountryApi_GetCountries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of countries",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Countries"
              }
            }
          }
        }
      }
    },
    "/api/country/{countryId}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get country details",
        "operationId": "CountryApi_GetCountry",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Country",
            "schema": {
              "$ref": "#/definitions/Countries"
            }
          }
        }
      }
    },
    "/api/country/taxtranches": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get country tax tranches",
        "description": "Get the list of tax tranches for the user country",
        "operationId": "CountryApi_GetTaxSelectors",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of tax tranches for the user country",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxTrancheSelector"
              }
            }
          }
        }
      }
    },
    "/api/country/system": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get world countries",
        "description": "Get the List of all countries in the world",
        "operationId": "CountryApi_GetWorldCountries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of all countries in the world",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShortCountryRM"
              }
            }
          }
        }
      }
    },
    "/api/country/working": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get country business days",
        "description": "Get the first business days of the next twelve months for the UK country",
        "operationId": "CountryApi_GetFirstBusinessDayForNextTwelveMonths",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of all countries in the world",
            "schema": {
              "type": "array",
              "items": {
                "format": "date-time",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/document/all": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "Get documents",
        "description": "Get all documents of the connected profile",
        "operationId": "DocumentsApi_GetDocuments",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of documents",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentRM"
              }
            }
          }
        }
      }
    },
    "/api/document": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "Download document",
        "operationId": "DocumentsApi_DownloadProfileDocument",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "description": "Name of the file to download",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/document/tracing/upload": {
      "put": {
        "tags": [
          "Document"
        ],
        "summary": "Upload tracing documents",
        "description": "Upload all LOA documents related to tracing",
        "operationId": "DocumentsApi_UploadTracingLOADocument",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/enterprise/list": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get employer for autocomplete",
        "description": "Search an employer by name for autocompletion",
        "operationId": "EmployerApi_GetEmployerAutocomplete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "input for the autocomplete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of employers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployerRM"
              }
            }
          }
        }
      }
    },
    "/api/employer/all": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get all enterprises",
        "description": "Get all employer type enterprises defined in Abaka",
        "operationId": "EmployerApi_GetEmployers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of all employers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnterpriseRM"
              }
            }
          }
        }
      }
    },
    "/api/employer/pension": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get employer pension information",
        "description": "Get the pension information of the current employer(s) of the current user",
        "operationId": "EmployerApi_GetCurrentEmployerInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Employer pension info",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CurrentEmployerInfoModel"
              }
            }
          }
        }
      }
    },
    "/api/employer/provider/scheme": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get provider schemes for employer",
        "description": "Get provider schemes for employer",
        "operationId": "EmployerApi_GetProvidersFromEmployer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of employer pension schemes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployerViewModel"
              }
            }
          }
        }
      }
    },
    "/api/employer/provider/scheme/{id}": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get employer provider scheme",
        "operationId": "EmployerApi_GetEmployerPensionSchemeBySchemeId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the scheme",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Employer pension scheme",
            "schema": {
              "$ref": "#/definitions/EmployerPensionScheme"
            }
          }
        }
      }
    },
    "/api/employer/current": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get current employers",
        "description": "Get information of the current employers of the current user",
        "operationId": "EmployerApi_GetUserEmployerInfos",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of current user enterprises",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnterpriseRM"
              }
            }
          }
        }
      }
    },
    "/api/employer": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get employer",
        "description": "Get employer information from its given unique name",
        "operationId": "EmployerApi_GetEmployerDetails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "employerUniqueName",
            "in": "query",
            "description": "Name of the employer",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Enterprise details",
            "schema": {
              "$ref": "#/definitions/EnterpriseRM"
            }
          }
        }
      }
    },
    "/api/employer/contribution": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get employer contribution",
        "description": "Get the employer contribution for given employer and pension provider, according to a given employee contribution",
        "operationId": "EmployerApi_GetPensionContributionDetailsForEmployeeContributionPercentage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "employeeContributionPercentage",
            "in": "query",
            "description": "Contribution (in percent) of the employee",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "pensionProviderId",
            "in": "query",
            "description": "ID of the pension provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "employerUniqueName",
            "in": "query",
            "description": "Name of the employer",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkServiceId",
            "in": "query",
            "description": "Link Service Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Employer contribution details",
            "schema": {
              "$ref": "#/definitions/ContributionDetailsModel"
            }
          }
        }
      }
    },
    "/api/employer/contribution/all": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get employer contributions",
        "description": "Get the different contributions for given employer and pension provider",
        "operationId": "EmployerApi_GetPensionContributionDetails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pensionProviderId",
            "in": "query",
            "description": "ID of the pension provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "employerUniqueName",
            "in": "query",
            "description": "Name of the employer",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkServiceId",
            "in": "query",
            "description": "LinkService Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Employer contribution details",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContributionDetailsModel"
              }
            }
          }
        }
      }
    },
    "/api/employer/contribution/default": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get default employer contribution",
        "description": "Get the default employer and, if applicable, employee contributions for given employer and pension provider",
        "operationId": "EmployerApi_GetDefaultPensionContributionDetails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pensionProviderId",
            "in": "query",
            "description": "ID of the pension provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "employerUniqueName",
            "in": "query",
            "description": "Name of the employer",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkServiceId",
            "in": "query",
            "description": "Link Service Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Default employer contribution details",
            "schema": {
              "$ref": "#/definitions/ContributionDetailsModel"
            }
          }
        }
      }
    },
    "/api/employer/contribution/rule": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Get employer contribution rule",
        "description": "Get employer contribution data (e.g. account type, default percentage, matching rule, etc.) for given employer and pension provider",
        "operationId": "EmployerApi_GetEmployerContributionRule",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "linkServicePensionProviderId",
            "in": "query",
            "description": "ID of the pension provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "employerUniqueName",
            "in": "query",
            "description": "Name of the employer",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkServiceId",
            "in": "query",
            "description": "Link Service Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Employer contribution rule",
            "schema": {
              "$ref": "#/definitions/CustomEmployerPensionSchemeData"
            }
          }
        }
      }
    },
    "/api/tracing": {
      "post": {
        "tags": [
          "Tracing"
        ],
        "summary": "Create employment history",
        "description": "Create an employment history for the current user, using given history information",
        "operationId": "EmployerApi_CreateEmploymentHistory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Employment history model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmploymentHistoryCreationRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "tracing id",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tracing"
        ],
        "summary": "Delete tracing item",
        "description": "Remove a given tracing item with its associated data",
        "operationId": "EmployerApi_DeleteEmploymentProvider",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Employment history model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEmploymentHistoryModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete tracing item",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/tracing/all": {
      "get": {
        "tags": [
          "Tracing"
        ],
        "summary": "Get employment providers",
        "description": "Get the information of all employment history providers that the current user has used during their working life",
        "operationId": "EmployerApi_GetAllTracingProviders",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of providers from employment history",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TracingItemRM"
              }
            }
          }
        }
      }
    },
    "/api/tracing/{tracingId}": {
      "get": {
        "tags": [
          "Tracing"
        ],
        "summary": "Get Tracing information",
        "description": "Get the information of all tracing items for a defined tracing id",
        "operationId": "EmployerApi_GetTracingInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tracingId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracing information from tracing id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TracingItemRM"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tracing"
        ],
        "summary": "Update Tracing information",
        "description": "Update the information of all tracing items for a defined tracing id",
        "operationId": "EmployerApi_UpdateTracingInfo",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tracingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEmploymentHistoryModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Tracing information from tracing id"
          }
        }
      }
    },
    "/api/tracing/{tracingId}/document": {
      "get": {
        "tags": [
          "Tracing"
        ],
        "summary": "Download tracing LOA for specific tracing request",
        "operationId": "EmployerApi_GetTracingDocumentsAsync",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tracingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "urlAfterSign",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracing LOAs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TracingDocumentsRM"
              }
            }
          }
        }
      }
    },
    "/api/enterprise/resource/preferred": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get enterprise resources in preferred language",
        "description": "Get the queried resources of the enterprise to which the connected user belongs, and that are in the user's language",
        "operationId": "EnterpriseApi_GetResources",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "resourceKeys",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of resources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnterpriseResourceRM"
              }
            }
          }
        }
      }
    },
    "/api/enterprise/policy": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get enterprise policy",
        "description": "Get the B2C policy of an enterprise from its host name.",
        "operationId": "EnterpriseApi_GetPolicyStyleFromHostname",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "query",
            "description": "Hostname of the enterprise",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Enterprise policy",
            "schema": {
              "$ref": "#/definitions/EnterprisePolicyRM"
            }
          }
        }
      }
    },
    "/api/enterprise/intent/all": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get Active Bot Intents for an enterprise",
        "description": "Get the active bot intents for the connected enterprise",
        "operationId": "EnterpriseApi_GetAvailableFeatureBotIntentsForEnterprise",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "FeatureBotIntentModel ",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeatureBotIntentModel"
              }
            }
          }
        }
      }
    },
    "/api/enterprise/profile": {
      "put": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update user enterprise profile",
        "description": "Update an already existing user enterprise profile in database",
        "operationId": "EnterpriseApi_UpdateProfileEnterprise",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "updatedProfileEnterprise",
            "in": "body",
            "description": "Enterprise profile to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileEnterpriseRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Enterprise profile",
            "schema": {
              "$ref": "#/definitions/ProfileEnterpriseRM"
            }
          }
        }
      }
    },
    "/api/enterprise/transaction/email": {
      "post": {
        "tags": [
          "Transaction",
          "B2B"
        ],
        "summary": "Send a transaction email on behalf of enterprise",
        "description": "Send a transaction email to the given destination address, using the given enterprise templates and key",
        "operationId": "EnterpriseApi_SendEmailForEnterpriseTransaction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transactionEmail",
            "in": "body",
            "description": "Transaction email template",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionEmail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/enterprise/resource": {
      "post": {
        "tags": [
          "Enterprise",
          "B2B"
        ],
        "summary": "Get enterprise resources",
        "description": "Get the queried resources of the connected profile or enterprise, localised in the caller's language.",
        "operationId": "EnterpriseApi_GetResourcesForEnterprise",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "resourceKeys",
            "in": "body",
            "description": "Enterprise resources list",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of resources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnterpriseResourceRM"
              }
            }
          }
        }
      }
    },
    "/api/enterprise/email": {
      "post": {
        "tags": [
          "Enterprise",
          "B2B"
        ],
        "summary": "Send templated email (to be deprecated)",
        "operationId": "EnterpriseApi_SendTemplatedEmail",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "emailInputs",
            "in": "body",
            "description": "Email inputs",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionEmail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/enterprise/terms": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get enterprise terms",
        "description": "Get the terms and conditions template file of the enterprise of the current user",
        "operationId": "EnterpriseApi_GetEnterpriseTermsAndConditions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/enterprise": {
      "get": {
        "tags": [
          "Enterprise",
          "B2B"
        ],
        "summary": "Get connected enterprise",
        "description": "Get the connected enterprise object",
        "operationId": "EnterpriseApi_GetCurrentEnterprise",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Enterprise",
            "schema": {
              "$ref": "#/definitions/EnterpriseRM"
            }
          }
        }
      }
    },
    "/api/enterprise/uri": {
      "get": {
        "tags": [
          "Enterprise",
          "B2B"
        ],
        "summary": "Get connected enterprise front URI",
        "description": "Get the front URI corresponding of the connected enterprise",
        "operationId": "EnterpriseApi_GetEnterpriseFrontUri",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Enterprise",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/enterprise/hostname": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Validate enterprise hostname for a specific user",
        "description": "Check if the given enterprise hostname is the same as the one of the connected user's enterprise or not.",
        "operationId": "EnterpriseApi_ValidateEnterpriseByHostname",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "hostname",
            "in": "query",
            "description": "Enterprise hostname",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Is Hostname valid",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/enterprise/configuration": {
      "get": {
        "tags": [
          "Enterprise",
          "B2B"
        ],
        "summary": "Get enterprise configuration",
        "description": "Get the enterprise selector configuration of the connected enterprise.",
        "operationId": "EnterpriseApi_GetEnterpriseSelectorConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Enterprise Configuration",
            "schema": {
              "$ref": "#/definitions/EnterpriseSelectorConfigurationRM"
            }
          }
        }
      }
    },
    "/api/enterprise/reseller": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get reseller for user",
        "description": "Get the enterprise object corresponding to a reseller belonging to the user",
        "operationId": "EnterpriseApi_GetResellerForUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Enterprise Configuration",
            "schema": {
              "$ref": "#/definitions/EnterpriseRM"
            }
          }
        }
      }
    },
    "/api/enterprise/token": {
      "post": {
        "tags": [
          "Enterprise",
          "B2B"
        ],
        "summary": "Generate token for enterprise from AppId, appSecret",
        "operationId": "EnterpriseApi_GetEnterpriseToken",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnterpriseCredentialModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "token for the onboarded enterprise",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/enterprise/occupation/search": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get enterprise occupations for autocomplete",
        "description": "Search an occupation by jobtitle for autocompletion, for the enterprise of the connected user, in the user preferred language.",
        "operationId": "EnterpriseApi_GetEnterpriseOccupationsAutocomplete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "input for the autocomplete",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of occupations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OccupationRM"
              }
            }
          }
        }
      }
    },
    "/api/enterprise/occupation/{occupationId}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get enterprise occupation",
        "operationId": "EnterpriseApi_GetEnterpriseOccupation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "occupationId",
            "in": "path",
            "description": "enterprise occupation id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Enterprise occupations",
            "schema": {
              "$ref": "#/definitions/OccupationRM"
            }
          }
        }
      }
    },
    "/api/enterprise/encrypt": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Encrypts the input string.",
        "description": "Take a string as request input data, and encrypt it using a secure key.",
        "operationId": "EnterpriseApi_Encrypt",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Encrypts the input string",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/enterprise/invitation": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get invitation link for the connected enterprise",
        "description": "Generate a B2C claim for the front URI of the connected enterprise.",
        "operationId": "EnterpriseApi_GetInvitationLink",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "claims",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation link",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/enterprise/languages": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get available languages for the connected enterprise",
        "description": "Get the list of languages that are supported by the connected enterprise, and that its users can thus choose to use.",
        "operationId": "EnterpriseApi_GetEnterpriseLanguages",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of languages",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Language"
              }
            }
          }
        }
      }
    },
    "/api/enterprise/callmeback": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Upload call me back information for enterprise",
        "description": "Retrieve the \"call me back\" transactions of a given enterprise, and upload their information to a Data Lake storage.",
        "operationId": "EnterpriseApi_UploadCallMeBackData",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputData",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/api/enterprise/customer/register": {
      "post": {
        "tags": [
          "Enterprise",
          "B2B"
        ],
        "summary": "Register enterprise customer",
        "description": "Register enterprise customer",
        "operationId": "EnterpriseApi_RegisterEnterpriseCustomer",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnterpriseCustomerViewModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "identifier of the registered customer",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/enterprise/customer/all": {
      "get": {
        "tags": [
          "Enterprise",
          "B2B"
        ],
        "summary": "Get enterprise customers with paging",
        "description": "Get the customers object corresponding to the connected enterprise",
        "operationId": "EnterpriseApi_GetEnterpriseCustomers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Enterprise Customers",
            "schema": {
              "$ref": "#/definitions/PagingModel[EnterpriseCustomer]"
            }
          }
        }
      }
    },
    "/api/enterprise/customer/detail/{customerId}": {
      "get": {
        "tags": [
          "Enterprise",
          "B2B"
        ],
        "summary": "Get enterprise specific customer",
        "description": "Get the customer object corresponding to an Id",
        "operationId": "EnterpriseApi_GetEnterpriseCustomer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Enterprise Customer",
            "schema": {
              "$ref": "#/definitions/EnterpriseCustomer"
            }
          }
        }
      }
    },
    "/api/enterprise/customer": {
      "delete": {
        "tags": [
          "Enterprise",
          "B2B"
        ],
        "summary": "Remove enterprise customer",
        "description": "Remove the customer object corresponding to an Id",
        "operationId": "EnterpriseApi_RemoveEnterpriseCustomer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Enterprise Customer",
            "schema": {
              "$ref": "#/definitions/EnterpriseCustomer"
            }
          }
        }
      }
    },
    "/api/diagnostics/all": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get financial diagnostic",
        "description": "Get the financial diagnostic of the current user",
        "operationId": "FinancialDiagnosticsApi_GetFinancialDiagnostics",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Risk profile responses",
            "schema": {
              "$ref": "#/definitions/DiagnosticsModel"
            }
          }
        }
      }
    },
    "/api/risk": {
      "get": {
        "tags": [
          "Risk"
        ],
        "summary": "Get risk profile form",
        "description": "Get the risk profile form and, if any, user responses for the current user",
        "operationId": "FormProfileApi_GetFormProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Risk"
        ],
        "summary": "Save risk profile form",
        "description": "Save the risk profile responses, that are part of the request, of the current user in database",
        "operationId": "FormProfileApi_SaveFormProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "formProfileResponses",
            "in": "body",
            "description": "risk profile form responses",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskProfileFormElement"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/risk/response/all": {
      "get": {
        "tags": [
          "Risk"
        ],
        "summary": "Get risk profile responses",
        "description": "Get the risk profile responses of the current user",
        "operationId": "FormProfileApi_GetRiskProfilingResponses",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Risk profile responses",
            "schema": {
              "$ref": "#/definitions/RiskProfilingResponseRM"
            }
          }
        }
      }
    },
    "/api/risk/portfolio/number": {
      "get": {
        "tags": [
          "Risk"
        ],
        "summary": "Get user risk profile portfolio number",
        "description": "Get the portfolio number corresponding to the risk profile of the current user",
        "operationId": "FormProfileApi_GetUserRiskProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Portfolio number",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/risk/grade": {
      "get": {
        "tags": [
          "Risk"
        ],
        "summary": "Get user risk profile grade",
        "description": "Get the risk grade corresponding to the risk profile of the current user. If user has no risk profile, returns null",
        "operationId": "FormProfileApi_GetUserRiskGrade",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Risk Grade",
            "schema": {
              "$ref": "#/definitions/RiskGrade"
            }
          }
        }
      }
    },
    "/api/risk/grade/portfolio": {
      "get": {
        "tags": [
          "Risk"
        ],
        "summary": "Get risk profile portfolio",
        "description": "Get the portfolio corresponding to the risk",
        "operationId": "FormProfileApi_GetPortfolioRisk",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "riskGrade",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/risk/grade/all": {
      "get": {
        "tags": [
          "Risk"
        ],
        "summary": "Get all risk grades",
        "description": "Get risk grades for a specific enterprise",
        "operationId": "FormProfileApi_GetAllRiskGrades",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of risk grades",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskGrade"
              }
            }
          }
        }
      }
    },
    "/api/risk/portfolio": {
      "get": {
        "tags": [
          "Risk"
        ],
        "summary": "Get user risk profile portfolio and asset allocations",
        "description": "Get the calculated portfolio, asset allocations, and maximum MP portfolio number corresponding to the risk profile of the current user",
        "operationId": "FormProfileApi_GetCalculatedPortfolioForUserRiskProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/formula/retirementincome": {
      "get": {
        "tags": [
          "Formula"
        ],
        "summary": "Get estimated net annual retirement income",
        "description": "Get the estimated net annual retirement income for the current user.",
        "operationId": "FormulasApi_GetEstimateNetAnnualRetirementIncome",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Net retirement annual income",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/formula/allowance": {
      "get": {
        "tags": [
          "Formula"
        ],
        "summary": "Get annual allowance",
        "description": "Get the annual allowance of the current user",
        "operationId": "FormulasApi_GetAnnualAllowance",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Annual allowance",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/formula/contribution/total": {
      "get": {
        "tags": [
          "Formula"
        ],
        "summary": "Get total contributions paid-in",
        "description": "Get the total contributions of the current fiscal year of the current user. Includes employer contribution, tax-free top-up, and DB benefits",
        "operationId": "FormulasApi_GetTotalPaidIn",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Total contributions paid-in",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/formula/allowance/remaining": {
      "get": {
        "tags": [
          "Formula"
        ],
        "summary": "Get remaining annual allowance",
        "description": "Get the remaining allowance until the end of the fiscal year for the current user, according to the contributions they already performed",
        "operationId": "FormulasApi_GetRemainingAnnualAllowanceUntilFYEnd",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Remaining annual allowance",
            "schema": {
              "$ref": "#/definitions/EstimatedRemainingAnnualAllowanceModel"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Formula"
        ],
        "summary": "Estimate remaining annual allowance",
        "description": "Get the estimated remaining annual allowance for the current fiscal year, given a list of contributions",
        "operationId": "FormulasApi_GetEstimatedRemainingAnnualAllowanceFullFY",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "totalPaidIns",
            "in": "body",
            "description": "List of contributions paid-in",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EstimatedTotalPaidInModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remaining annual allowance",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/graph/pension/{accountId}": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "Get pension graphic datas",
        "description": "Get the estimated retirement income granted by a pension and graph datas",
        "operationId": "FormulasApi_GetGraphicDataFromPensions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Graphic pension datas",
            "schema": {
              "$ref": "#/definitions/EstimateRetirementIncomeForPensionModel"
            }
          }
        }
      }
    },
    "/api/graph/pension": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "Estimate pension graphic datas from contributions",
        "description": "Get the new estimated retirement income granted by a pension, given a list of contributions and graphic datas",
        "operationId": "FormulasApi_GetEstimatedGraphicDataFromPensions",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "totalPaidIn",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EstimatedTotalPaidInModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Net retirement annual income",
            "schema": {
              "$ref": "#/definitions/EstimateRetirementIncomeForPensionModel"
            }
          }
        }
      }
    },
    "/api/graph/pensionFunds": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "Estimate pension graphic data for an account with new asset lines",
        "description": "Get the new estimated retirement income granted by a pension, given an account id and its asset lines",
        "operationId": "FormulasApi_GetEstimatedGraphicDataFromPensionFunds",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountForProjection",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Net retirement annual income",
            "schema": {
              "$ref": "#/definitions/EstimateRetirementIncomeForPensionModel"
            }
          }
        }
      }
    },
    "/api/formula/allocation": {
      "get": {
        "tags": [
          "Formula"
        ],
        "summary": "Get asset allocations from risk grade",
        "description": "Get the aggregated asset allocations corresponding to a given risk grade",
        "operationId": "FormulasApi_GetAssetAllocationInfosFromRiskGrade",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "riskGrade",
            "in": "query",
            "description": "Risk grade",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Net retirement annual income",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tuple[Double,String]"
              }
            }
          }
        }
      }
    },
    "/api/formula/salary/gross2net": {
      "post": {
        "tags": [
          "Formula"
        ],
        "summary": "Get net from gross salary",
        "description": "Compute the annual net salary based on the gross one, using tax rules of the connected user's country",
        "operationId": "FormulasApi_GetNetFromAnnualGrossSalary",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "grossSalary",
            "in": "body",
            "description": "Annual gross salary",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Net annual salary",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/formula/salary/net2gross": {
      "post": {
        "tags": [
          "Formula"
        ],
        "summary": "Get gross from net salary",
        "description": "Compute the annual gross salary based on the net one, using tax rules of the connected user's country",
        "operationId": "FormulasApi_GetGrossFromAnnualNetSalary",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "netSalary",
            "in": "body",
            "description": "Annual gross salary",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Net gross salary",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/formula/statepension": {
      "post": {
        "tags": [
          "Formula"
        ],
        "summary": "Get weekly state pension",
        "description": "Get the estimated weekly state pension amount according to employment figures. Calculate the maximum state pension amount the user can get assuming he is going to work until the retirement age provided without taking into account the inflation",
        "operationId": "FormulasApi_EstimateWeeklyStatePensionAmount",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "State pension model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WeeklyStatePensionModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "State pension",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/formula/taxrelief": {
      "get": {
        "tags": [
          "Formula"
        ],
        "summary": "Get tax relief",
        "description": "Get the tax relief amount corresponding to the annual income of the current user",
        "operationId": "FormulasApi_GetTaxReliefForAnnualGrossIncome",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Tax relief in percent",
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        }
      }
    },
    "/api/formula/contribution/taxrelief": {
      "post": {
        "tags": [
          "Formula"
        ],
        "summary": "Get employee contribution with tax relief",
        "description": "Apply tax relief to a given employee contribution to get its final value",
        "operationId": "FormulasApi_GetEmployeeContributionWithTaxRelief",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "employeeContribution",
            "in": "body",
            "description": "Employee contribution",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee contribution with tax relief",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/formula/contribution/topup": {
      "post": {
        "tags": [
          "Formula"
        ],
        "summary": "Get employer monthly top-up",
        "description": "Get the monthly top-up, including tax relief and pension contribution coming from the employer",
        "operationId": "FormulasApi_GetMonthlyTopUpIncludingPensionContributions",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Monthly top-up pension contributions model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonthlyTopUpPensionContributionsModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Monthly employer top-up",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/formula/contribution/topup/rate": {
      "post": {
        "tags": [
          "Formula"
        ],
        "summary": "Get employer monthly top-up rate",
        "description": "Get the monthly top-up divided by the employee monthly contribution, including employer contribution and tax relief",
        "operationId": "FormulasApi_GetUnitCurrencyMonthlyTopUpForContributionPercentageModel",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "contributionDetailsModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContributionDetailsModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Monthly employer top-up rate",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/formula/salary/spendingratio": {
      "post": {
        "tags": [
          "Formula"
        ],
        "summary": "Get spending ratio",
        "description": "Get the spending ratio of a given salary needed to achieve objectives, according to current user's country's data",
        "operationId": "FormulasApi_GetProportionCurrentSalaryNeeded",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "salary",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Spending ratio",
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        }
      }
    },
    "/api/formula/contribution/remaining": {
      "post": {
        "tags": [
          "Formula"
        ],
        "summary": "Get remaining contributions",
        "description": "Get the remaining contribution until the end of the current fiscal year for the current user",
        "operationId": "FormulasApi_GetRemainingContributionsForTaxYear",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "monthlyContribution",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remaining contributions",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/formula/capital": {
      "post": {
        "tags": [
          "Formula"
        ],
        "summary": "Get accumulated capital",
        "description": "Get the accumulated capital",
        "operationId": "FormulasApi_GetAccumulatedCapital",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Capital information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAccumulatedCapitalModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accumulated capital",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/graph/retirement/income": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "Get monthly retirement incomes",
        "description": "Get a list of monthly retirement income values, for the different accounts corresponding to the current user's retirement goal",
        "operationId": "FormulasApi_GetGraphicDatasForRetirementIncome",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Graph data for retirement incomes",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MonthlyIncomeFromAge"
                }
              }
            }
          }
        }
      }
    },
    "/api/graph/retirement/income/accumulated": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "Get accumulated monthly retirement incomes",
        "description": "Get the accumulated monthly retirement incomes for every month after a given drawdown age",
        "operationId": "FormulasApi_GetAccumulatedNetMonthlyRetirementIncome",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "incomeDrawdownAge",
            "in": "query",
            "description": "Drawdown age acting as calculation starting point",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Graph data for monthly accumulated retirement incomes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tuple[Int32,Money]"
              }
            }
          }
        }
      }
    },
    "/api/graph/cashvsinvestmentsimulator": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "Get cash vs investment data for simulation given specified time frame and risk grade.",
        "operationId": "FormulasApi_GetGraphicDataForCashVsInvestmentSimulator",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "timeFrameInYears",
            "in": "query",
            "description": "Time frame in years (5, 10, 15)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "portfolioNumber",
            "in": "query",
            "description": "Portfolio number",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Cash vs investment simulated data",
            "schema": {
              "$ref": "#/definitions/CalculatedCashVsInvestmentModel"
            }
          }
        }
      }
    },
    "/api/graph/cashsimulator": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "Get cash data for simulation given specified time frame and risk grade.",
        "operationId": "FormulasApi_GetGraphicDataForCashSimulator",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "timeFrameInYears",
            "in": "query",
            "description": "Time frame in years (5, 10, 15)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "balance",
            "in": "query",
            "description": "Amount at the beginning of the simulation",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "simulationKey",
            "in": "query",
            "description": "MonteCarlo simulation key to use (leave empty if no specific key need to be used)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cash simulated data",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Money"
              }
            }
          }
        }
      }
    },
    "/api/goal/{goalId}": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goal",
        "description": "Retrieve goal information from its ID, and return it as an object.",
        "operationId": "GoalApi_GetGoalById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "Goal Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Goal",
            "schema": {
              "$ref": "#/definitions/GoalRM"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Goal"
        ],
        "summary": "Delete goal",
        "description": "Remove a goal from the database. Remove links to CustodianApplications, Cancel any SavingMonthlyContributionTransactions",
        "operationId": "GoalApi_RemoveGoal",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "Id of the goal",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/goal/budget/all": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get budget goals",
        "description": "Get all budget goals of the current user",
        "operationId": "GoalApi_GetBudgetGoals",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of budget goals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BudgetGoalRM"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Goal"
        ],
        "summary": "Delete all budget goals",
        "description": "Remove all budget goals of the current user from the database",
        "operationId": "GoalApi_RemoveUserBudgetGoal",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/goal/budget/{budgetGoalId}": {
      "delete": {
        "tags": [
          "Goal"
        ],
        "summary": "Delete budget goal",
        "description": "Remove a budget goal from the database",
        "operationId": "GoalApi_RemoveBudgetGoal",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "budgetGoalId",
            "in": "path",
            "description": "Budget goal id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/goal/budget": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Save budget goal",
        "description": "Save in database a (new or existing) budget goal",
        "operationId": "GoalApi_SaveBudgetGoal",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Budget goal model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveBudgetGoalModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of budget goals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BudgetGoalRM"
              }
            }
          }
        }
      }
    },
    "/api/goal/budget/score": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Save budget goal score",
        "description": "Store in database the given budget goal score for the current user",
        "operationId": "GoalApi_SaveBudgetGoalScore",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "budgetGoalScore",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/goal/retirement/default": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Create a default retirement goal",
        "description": "Create a default retirement goal for the current user, according to the given income",
        "operationId": "GoalApi_CreateDefaultRetirementGoal",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "income",
            "in": "body",
            "description": "Income",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retirement goal",
            "schema": {
              "$ref": "#/definitions/GoalRM"
            }
          }
        }
      }
    },
    "/api/goal/retirement/option/all": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get retirement goal options",
        "description": "Get the different possible options (as bot intents) for a retirement goal. The first retirement goal of the current user is taken",
        "operationId": "GoalApi_GetOptionsRetiredInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of retirement goal options",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThumbnailBotModel"
              }
            }
          }
        }
      }
    },
    "/api/expense/savings": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Get savings spendings",
        "description": "Get the savings spendings of the current user, according to given periods, spending modes, and transaction category",
        "operationId": "GoalApi_GetSavingsSpendings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "periodType",
            "in": "query",
            "description": "Period type",
            "required": true,
            "type": "string"
          },
          {
            "name": "incomeSpendingMode",
            "in": "query",
            "description": "Spending mode",
            "required": true,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of retirement goal options",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SavingsSpendingsModel"
              }
            }
          }
        }
      }
    },
    "/api/expense/category": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Get expense category information",
        "description": "Get category information for given category and spending mode",
        "operationId": "GoalApi_GetCategoryInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "description": "Category ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "spendingMode",
            "in": "query",
            "description": "Spending mode",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Spending category information",
            "schema": {
              "$ref": "#/definitions/SpendingCategoryModel"
            }
          }
        }
      }
    },
    "/api/goal/budget/category": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get budget goal spending category",
        "description": "Get the spending category corresponding to a budget goal",
        "operationId": "GoalApi_GetBudgetCategoryInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "budgetGoalId",
            "in": "query",
            "description": "Budget goal Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "spendingMode",
            "in": "query",
            "description": "Spending mode",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2
            ]
          },
          {
            "name": "periodType",
            "in": "query",
            "description": "Period type",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              4,
              8,
              16,
              32,
              64
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Spending category information",
            "schema": {
              "$ref": "#/definitions/SpendingCategoryModel"
            }
          }
        }
      }
    },
    "/api/expense/all": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Get expenses",
        "description": "Get the expenses related to the transactions of the current user",
        "operationId": "GoalApi_GetExpensesIncomes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of expenses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpensesIncome"
              }
            }
          }
        }
      }
    },
    "/api/goal/retirement/fees": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get reduced fees",
        "description": "Get the reduced fees information related to the retirement goal of the current user",
        "operationId": "GoalApi_GetReducedFeesDetails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Reduced fees",
            "schema": {
              "$ref": "#/definitions/ReducedFeesInfo"
            }
          }
        }
      }
    },
    "/api/goal/priorities": {
      "put": {
        "tags": [
          "Goal"
        ],
        "summary": "Update goals priorities",
        "description": "Reset the priorities of the given goals of the current user",
        "operationId": "GoalApi_UpdatePrioritiesGoals",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalIds",
            "in": "body",
            "description": "Goals Ids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/goal/return": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goal average return",
        "description": "Get the average annual return rate for the default portfolio corresponding to a given goal",
        "operationId": "GoalApi_GetAverageReturnForPortfolio",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goal",
            "in": "body",
            "description": "Goal",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GoalRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Goal return",
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        }
      }
    },
    "/api/goal/drawdown": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goal drawdown age",
        "description": "Get the drawdown age corresponding to a given goal",
        "operationId": "GoalApi_GetIncomeDrawDownAge",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goal",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GoalRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Goal drawdown age",
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        }
      }
    },
    "/api/goal/target": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goal default target",
        "description": "Get the estimated default target (i.e. money amount) for a given goal category",
        "operationId": "GoalApi_GetGoalEstimateDefaultTarget",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalCategory",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              4,
              8,
              16,
              32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096,
              8192,
              16384,
              32768,
              65536,
              131072,
              -1
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Goal default target",
            "schema": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      }
    },
    "/api/goal/achievement": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goal achievement info",
        "description": "Get the estimated achievement information of a goal, using goal figures",
        "operationId": "GoalApi_GetEstimateGoalAchievementInfo",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GoalAchievementInfoModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Goal achievement info",
            "schema": {
              "$ref": "#/definitions/GoalAchievementInfoRM"
            }
          }
        }
      }
    },
    "/api/goal/simplewealth/estimate": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Get simple wealth goal estimate",
        "description": "Get the estimated information of a goal, using goal figures",
        "operationId": "GoalApi_GetEstimateGoal",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GoalRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Goal estimate",
            "schema": {
              "$ref": "#/definitions/GraphicGoalRM"
            }
          }
        }
      }
    },
    "/api/goal/retirement/bestage": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Get best retirement age",
        "description": "Get the best retirement age (i.e. age to get at least 100% of goal value) for the current user",
        "operationId": "GoalApi_GetBestRetirementAgeToAchieveGoal",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Goal with best age",
            "schema": {
              "$ref": "#/definitions/GoalRM"
            }
          }
        }
      }
    },
    "/api/goal": {
      "put": {
        "tags": [
          "Goal"
        ],
        "summary": "Save goal",
        "description": "Save in database a (new or existing) goal. Retirement, simple wealth (i.e. emergency fund), and consumption goals are supported.",
        "operationId": "GoalApi_SaveGoal",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Goal",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveGoalModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Goal",
            "schema": {
              "$ref": "#/definitions/GoalRM"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Create a goal",
        "description": "Create and store in database a goal from its goal information. Only simple wealth (i.e. emergency fund) goals are supported",
        "operationId": "GoalApi_CreateGoal",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GoalRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created goal",
            "schema": {
              "$ref": "#/definitions/GoalRM"
            }
          }
        }
      }
    },
    "/api/goal/budget/aggregated": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get aggregated budget goals",
        "description": "Get the aggregated budget goals (i.e. total money amount and number of goals) of the current user",
        "operationId": "GoalApi_GetAggregatedBudgetGoal",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/goal/top": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get top goals",
        "description": "Get the top goals of the current user, to be displayed in the home page.\r\n            For now we are just returning the retirement goal + Return the spending goal where it is likely the goal is going to be in overspending by at least 15% by the end of the month",
        "operationId": "GoalApi_GetTopGoalsForHomePage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "top goals information",
            "schema": {
              "$ref": "#/definitions/TopGoalsModel"
            }
          }
        }
      }
    },
    "/api/goal/budget/rate": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get budget goal spending rate",
        "description": "Get the spend rate and the amount spent in the current month for the budget goals of the current user and the given AIP category",
        "operationId": "GoalApi_GetSpendingGoalRate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "AIPCategoryId",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Budget goal spending rate",
            "schema": {
              "$ref": "#/definitions/Tuple[BudgetGoalRM,Double,Double]"
            }
          }
        }
      }
    },
    "/api/goal/account/all": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goal related accounts",
        "description": "Get the accounts of the current user that are related to a given goal",
        "operationId": "GoalApi_GetGoalRelatedAccounts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Goal related accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialAccountRM"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Goal"
        ],
        "summary": "Add or update multiple account goal mapping",
        "operationId": "GoalApi_AddOrUpdateAccountGoalMappings",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountGoalMappings",
            "in": "body",
            "description": "Account goal mappings",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountGoalMappingModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/goal/type": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goals by type",
        "description": "Get all goals of the given type of the current user",
        "operationId": "GoalApi_GetGoalByType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalType",
            "in": "query",
            "description": "Goal type",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              4,
              8,
              16,
              32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096,
              8192,
              16384,
              32768,
              65536,
              131072,
              -1
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of goals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoalRM"
              }
            }
          }
        }
      }
    },
    "/api/goal/type/first": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get first goal by type",
        "description": "Get the first goal of the given type of the current user.",
        "operationId": "GoalApi_GetFirstGoalByGoalType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalType",
            "in": "query",
            "description": "Goal type",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "First goal of required type",
            "schema": {
              "$ref": "#/definitions/GraphicGoalRM"
            }
          }
        }
      }
    },
    "/api/goal/all": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goals",
        "description": "Get all goals of the current user",
        "operationId": "GoalApi_GetGoals",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of goals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoalRM"
              }
            }
          }
        }
      }
    },
    "/api/goal/graphic": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get graphic goals (TBC)",
        "description": "Get all graphic goals of the current user",
        "operationId": "GoalApi_GetGraphicGoals",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of graphic goals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphicGoalRM"
              }
            }
          }
        }
      }
    },
    "/api/goal/graphic/{goalId}": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get graphic goal",
        "description": "Retrieve goal information from its ID, and return it as a GraphicGoalModel",
        "operationId": "GoalApi_GetGraphicGoal",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "Goal Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Graphic goal of required ID",
            "schema": {
              "$ref": "#/definitions/GraphicGoalRM"
            }
          }
        }
      }
    },
    "/api/goal/type/all": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goal types",
        "description": "Get all possible goal types",
        "operationId": "GoalApi_GetGoalTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "onlyEnabled",
            "in": "query",
            "description": "Only enabled goals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeSpendingGoal",
            "in": "query",
            "description": "Include budget goal",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of goals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoalTypesRM"
              }
            }
          }
        }
      }
    },
    "/api/portfolio/{id}/allocation": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get portfolio asset allocation",
        "description": "Get the asset allocations of a given portfolio",
        "operationId": "GoalApi_GetPortfolioInfos",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portfolio Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of asset allocation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetAllocationRM"
              }
            }
          }
        }
      }
    },
    "/api/portfolio/{id}/allocation/assetclass": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get portfolio asset class allocation",
        "description": "Get the asset allocations of a given portfolio",
        "operationId": "GoalApi_GetPortfolioInfosAssetClassAllocation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portfolio Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of asset classes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetAllocationItem"
              }
            }
          }
        }
      }
    },
    "/api/portfolio/{id}/risk/grade": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get risk profile grade associated to the portfolio id",
        "description": "Get the risk grade corresponding to the risk profile of the portfolio.",
        "operationId": "GoalApi_GetPortfolioRiskGrade",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Risk Grade",
            "schema": {
              "$ref": "#/definitions/RiskGrade"
            }
          }
        }
      }
    },
    "/api/goal/suggested": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Get suggested goals",
        "description": "Get suggested goals (as bot intents) for the current user, according to a given suggestion model",
        "operationId": "GoalApi_GetSuggestedGoals",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuggestedGoalModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of goals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThumbnailBotModel"
              }
            }
          }
        }
      }
    },
    "/api/goal/{goalId}/account/all": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goal accounts (TBC)",
        "description": "Get all accounts balances and transactions, linked to a goal",
        "operationId": "GoalApi_GetGoalAccounts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "Goal Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Goal accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoalAccountRM"
              }
            }
          }
        }
      }
    },
    "/api/goal/transaction": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Update goal transaction",
        "description": "Update link between transaction and goal",
        "operationId": "GoalApi_UpdateGoalTransaction",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalTransactionId",
            "in": "query",
            "description": "Transaction Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalid",
            "in": "query",
            "description": "Goal Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/goal/account": {
      "put": {
        "tags": [
          "Goal"
        ],
        "summary": "Add or update account goal mapping",
        "description": "Link an account with a goal",
        "operationId": "GoalApi_AddOrUpdateAccountGoalMapping",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountGoalMapping",
            "in": "body",
            "description": "Account goal mapping",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountGoalMappingModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Goal"
        ],
        "summary": "Delete account goal mapping",
        "description": "Unlink an account from a goal",
        "operationId": "GoalApi_RemoveAccountGoalMapping",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountGoalMapping",
            "in": "body",
            "description": "Account goal mapping",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountGoalMappingModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/goal/{goalId}/account/mappeable": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get mappeable accounts",
        "description": "Get Accounts that can be mapped with a goal",
        "operationId": "GoalApi_GetMappeableSavingsAccounts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialAccountWithGoalsRM"
              }
            }
          }
        }
      }
    },
    "/api/goal/account/{accountId}/distribution": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get account distribution on goals",
        "description": "Get account distribution on goals",
        "operationId": "GoalApi_GetAccountDistribution",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of goals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoalBalanceRM"
              }
            }
          }
        }
      }
    },
    "/api/goal/account/{accountId}/transaction": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get account transactions on goals",
        "description": "Get Account Transactions on goals",
        "operationId": "GoalApi_GetTransactions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of goals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoalTransactionRM"
              }
            }
          }
        }
      }
    },
    "/api/goal/savingplans": {
      "post": {
        "tags": [
          "Goal"
        ],
        "summary": "Get saving plans",
        "description": "Get saving plans",
        "operationId": "GoalApi_GetSavingPlans",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SavingPlanModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of saving plans",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SavingPlan"
              }
            }
          }
        }
      }
    },
    "/api/goal/resources": {
      "get": {
        "tags": [
          "Goal",
          "Enterprise"
        ],
        "summary": "Get resources for the goal category : url articles on advices",
        "operationId": "GoalApi_GetGoalResources",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalCategory",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              4,
              8,
              16,
              32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096,
              8192,
              16384,
              32768,
              65536,
              131072,
              -1
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of resources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnterpriseResource"
              }
            }
          }
        }
      }
    },
    "/api/goal/{goalId}/portfolio": {
      "get": {
        "tags": [
          "Goal",
          "Enterprise"
        ],
        "summary": "Get portfolio for goal (include default portfolio if goal has no portfolio)\r\nNB: Implemented only for simple wealth goals and retirement goals",
        "operationId": "GoalApi_GetPortfolio",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "Goal Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio",
            "schema": {
              "$ref": "#/definitions/PortfolioInfosRM"
            }
          }
        }
      }
    },
    "/api/kc/posts": {
      "get": {
        "tags": [
          "KnowledgeApi"
        ],
        "summary": "Get posts",
        "description": "Get Knowledge Centre Blog Posts",
        "operationId": "KnowledgeApi_GetKcBlogPosts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search query to transmit to WordPress (can be null to disable search).",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Index of the results page that will be retrieved. Number of elements by page is set to 20.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filteredCategories",
            "in": "query",
            "description": "Post categories (comma-separated values).",
            "required": false,
            "type": "string"
          },
          {
            "name": "postIds",
            "in": "query",
            "description": "Post IDs (comma-separated values).",
            "required": false,
            "type": "string"
          },
          {
            "name": "userPersonaeFilter",
            "in": "query",
            "description": "Whether articles that are tagged with the user persona(e) should be retrieved, and the ones tagged with other personae ignored.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "personaArticlesOnly",
            "in": "query",
            "description": "Whether only persona-tagged articles should be retrieved, or untagged articles should be fetched as well.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of posts for each content publisher",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KcPostsPublisherRM"
              }
            }
          }
        }
      }
    },
    "/api/kc/posts/synchronize": {
      "post": {
        "tags": [
          "KnowledgeApi"
        ],
        "summary": "SynchronizeKcPostsDocuments",
        "operationId": "KnowledgeApi_SynchronizeKcPostsDocuments",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputData",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Synchronize wordpress posts with documents db"
          }
        }
      }
    },
    "/api/kc/post/persona": {
      "get": {
        "tags": [
          "KnowledgeApi"
        ],
        "summary": "Get posts for user personae - TO BE REMOVED",
        "description": "Get knowledge centre blog posts that are relevant to the personae of the connected user.",
        "operationId": "KnowledgeApi_GetKcPersonaBlogPosts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number. Page size is fixed to 20 elements.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of posts for each content publisher",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KcPostsPublisherRM"
              }
            }
          }
        }
      }
    },
    "/api/nba/product": {
      "post": {
        "tags": [
          "NBA"
        ],
        "summary": "Gets the list of the recommended product categories for the model and entities defined in the body.",
        "operationId": "NbaApi_GetNbaProducts",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "nbaModel",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NbaModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recommended products",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PolicyProductCategoryRM"
              }
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/nudge": {
      "post": {
        "tags": [
          "Nudge"
        ],
        "summary": "Create a new nudge",
        "description": "Create a new nudge and save it in database. Name and valid notification definition(s) (if any) must be provided.",
        "operationId": "NudgeApi_CreateNudge",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "nudgeRM",
            "in": "body",
            "description": "REST model used for nudge creation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NudgeRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created nudge",
            "schema": {
              "$ref": "#/definitions/NudgeRM"
            }
          }
        }
      }
    },
    "/api/nudge/{id}": {
      "put": {
        "tags": [
          "Nudge"
        ],
        "summary": "Update a nudge",
        "description": "Update an existing nudge (which must belong to the connected enterprise) in database. Name and valid notification definition(s) (if any) must be provided. Extract results (i.e. segmentation job run result) can also be added to the nudge.",
        "operationId": "NudgeApi_UpdateNudge",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "nudgeRM",
            "in": "body",
            "description": "REST model used for nudge update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NudgeRM"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated nudge",
            "schema": {
              "$ref": "#/definitions/NudgeRM"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Nudge"
        ],
        "summary": "Delete a nudge",
        "description": "Disable a nudge and set it as archived in the database (recovery is thus possible). Only nudges of the connected enterprise can be deleted.",
        "operationId": "NudgeApi_DeleteNudge",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the nudge",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/api/nudge/segmentation": {
      "post": {
        "tags": [
          "Nudge"
        ],
        "summary": "Run associated segmentation for a list of nudges",
        "description": "Run the segmentation (i.e. start a Data Factory pipeline) for a list of nudges. They all must have a job ID attached.",
        "operationId": "NudgeApi_RunNudgeSegmentation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "nudges",
            "in": "body",
            "description": "REST model used for nudges segmentation run",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NudgeListRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/api/nudge/scheduling": {
      "post": {
        "tags": [
          "Nudge"
        ],
        "summary": "Create and schedule notifications for a list of nudges",
        "description": "Create notifications for a list of nudges, based on their respective latest segmentation results (whether coming from a job run or manually uploaded).",
        "operationId": "NudgeApi_CreateNudgeNotifications",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "nudges",
            "in": "body",
            "description": "REST model used for nudges notifications creation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NudgeListRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/api/nudge/test": {
      "post": {
        "tags": [
          "Nudge"
        ],
        "summary": "Create test notifications",
        "description": "Create a test notification for all notification definitions of a given nudge, and schedule them to be sent immediately to the connected user.",
        "operationId": "NudgeApi_CreateTestNotifications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "nudgeId",
            "in": "query",
            "description": "ID of the nudge to be tested.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Created notifications ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/nudge/notification/all": {
      "put": {
        "tags": [
          "Nudge"
        ],
        "summary": "Update notifications",
        "description": "Update a list of notifications in database, using notification objects",
        "operationId": "NudgeApi_UpdateNotifications",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "notifications",
            "in": "body",
            "description": "List of notifications",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notification"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Nudge"
        ],
        "summary": "Get notifications details",
        "description": "Get all notifications of a given channel. Only the valid ones (i.e. visible to the current user, not dismissed or archived, and planned to an already passed date) are shown",
        "operationId": "NudgeApi_GetNotifications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "description": "Notification channel type",
            "required": true,
            "type": "string",
            "enum": [
              "NONE",
              "SMS",
              "APP_INSTANT",
              "APP_BATCH",
              "EMAIL",
              "WEB_PUSH",
              "PUSH",
              "WEB_PUSH_AND_APP",
              "SMS_AND_APP",
              "SMS_AND_INSTANT",
              "EMAIL_AND_APP",
              "EMAIL_AND_INSTANT",
              "EMAIL_AND_SMS_AND_INSTANT",
              "ALL",
              "IN_APP"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of notifications",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationRM"
              }
            }
          }
        }
      }
    },
    "/api/nudge/notification/{id}": {
      "put": {
        "tags": [
          "Nudge"
        ],
        "summary": "Update notification",
        "description": "Update a notification in database, using a notification object",
        "operationId": "NudgeApi_UpdateNotification",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "notification",
            "in": "body",
            "description": "Notification to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Nudge"
        ],
        "summary": "Get notification",
        "description": "Get a notification from its ID or short URL. It must be valid (i.e. visible to the current user, not dismissed or archived, and planned to an already passed date)",
        "operationId": "NudgeApi_GetNotification",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID or short URL of the notification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification",
            "schema": {
              "$ref": "#/definitions/NotificationRM"
            }
          }
        }
      }
    },
    "/api/nudge/token": {
      "get": {
        "tags": [
          "Nudge"
        ],
        "summary": "Get nudge centre standalone token",
        "description": "Get access token to access the nudge centre standalone component",
        "operationId": "NudgeApi_GetNudgeCentreStandaloneToken",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Access Token",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/payment/product/all": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get products",
        "description": "Get the products corresponding to the enterprise of the current user, with plans of the selected recurrence type",
        "operationId": "PaymentServiceApi_GetProducts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "NONE",
              "ONE_OFF_CHARGE",
              "RECURRING_MONTHLY",
              "RECURRING_YEARLY"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductRM"
              }
            }
          }
        }
      }
    },
    "/api/payment/feature/availability": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Get product features availabilities",
        "description": "Get all owned and potential product feature availability objects, corresponding to given feature types, available to the current user",
        "operationId": "PaymentServiceApi_GetProductFeaturesAvailabilities",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "featureTypes",
            "in": "body",
            "description": "Types of features",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of product features availabilities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductFeatureAvailabilityRM"
              }
            }
          }
        }
      }
    },
    "/api/payment/feature/availability/all": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get all product features availabilities",
        "description": "Get all owned and potential product feature availability objects available to the current user",
        "operationId": "PaymentServiceApi_GetAllProductFeaturesAvailabilities",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of product features availabilities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductFeatureAvailabilityRM"
              }
            }
          }
        }
      }
    },
    "/api/policy/all": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Gets all policies for the connected user. If status is specified, all policies with this status will be retrieved.",
        "description": "Gets raw data for all user\u0092s policies including financial account, total coverages, beneficiaries count",
        "operationId": "PolicyApi_GetPolicies",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "NotDefined",
              "Active",
              "Pending",
              "InActive"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "User policies",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PolicyOverviewRM"
              }
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/policy/{policyId}": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Gets the policy details by the policy id for the connected user.",
        "operationId": "PolicyApi_GetPolicy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Policy details by id",
            "schema": {
              "$ref": "#/definitions/PolicyRM"
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/product/all": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Gets all the available products for the connected user or enterprise, translated in the caller's language.",
        "description": "",
        "operationId": "PolicyApi_GetProducts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of element to return. If 0 returns all elements",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Products",
            "schema": {
              "$ref": "#/definitions/PagingModel[PolicyProductRM]"
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/category/{categoryType}/product/all": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Gets all the available products for the specified category (family) for the connected user or enterprise, translated in the caller's language.",
        "operationId": "PolicyApi_GetProductsByCategoryType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "categoryTypeCode",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "categoryType",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Products by the category",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PolicyProductRM"
              }
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/product/{productId}": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Gets the product details by the product id for the connected user or enterprise, translated in the caller's language.",
        "operationId": "PolicyApi_GetProduct",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product details by id",
            "schema": {
              "$ref": "#/definitions/PolicyProductRM"
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/product/category/{categoryIdOrCode}": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Gets the product category by the category id for the connected user or enterprise, translated in the caller's language.",
        "operationId": "PolicyApi_GetProductCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "categoryIdOrCode",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product category details by id",
            "schema": {
              "$ref": "#/definitions/PolicyProductCategoryRM"
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/product/category/code/{categoryCode}": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Gets the product category by the category code for the connected user or enterprise, translated in the caller's language.",
        "operationId": "PolicyApi_GetProductCategoryByCode",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "categoryCode",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product category details by code",
            "schema": {
              "$ref": "#/definitions/PolicyProductCategoryRM"
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/report/{reportId}/token": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get Power BI embed token",
        "description": "Get Power bi embed token based on enterprise name and user roles",
        "operationId": "ReportApi_GetReportToken",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "EmbedConfig",
            "schema": {
              "$ref": "#/definitions/EmbedConfig"
            }
          }
        }
      }
    },
    "/api/retirement/ris": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get net target retirement income",
        "description": "Get the annual net retirement income, computed from the current user's gross income and personal expenses",
        "operationId": "RetirementOptionsApi_GetRetirementInformation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "French retirement information status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmploymentPeriodRM"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get net target retirement income",
        "description": "Get the annual net retirement income, computed from the current user's gross income and personal expenses",
        "operationId": "RetirementOptionsApi_SetRetirementInformation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "periods",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmploymentPeriodRM"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/retirement/drawdown/info": {
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get drawdown data infos",
        "description": "Get the retirement information for drawdown, according to given options",
        "operationId": "RetirementOptionsApi_DrawdownDataInfos",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "optionsInput",
            "in": "body",
            "description": "Retirement options input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetirementOptionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Drawdown infos",
            "schema": {
              "$ref": "#/definitions/DrawdownInfos"
            }
          }
        }
      }
    },
    "/api/retirement/duration": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get estimated retirement duration",
        "description": "Get the estimated retirement duration before the current user's death, using life expectancy statistics",
        "operationId": "RetirementOptionsApi_GetRetirementIncomeYear",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "retirementAge",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Retirement duration",
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        }
      }
    },
    "/api/retirement/target": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get net target retirement income",
        "description": "Get the annual net retirement income, computed from the current user's gross income and personal expenses",
        "operationId": "RetirementOptionsApi_GetTargetRetirementIncomeFromExpenses",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Target retirement income from expenses",
            "schema": {
              "$ref": "#/definitions/TargetRetirementIncomeFromExpensesModel"
            }
          }
        }
      }
    },
    "/api/retirement/annuity/info": {
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get annuity info",
        "description": "Get the retirement information for annuity, according to given options",
        "operationId": "RetirementOptionsApi_AnnuityDataInfos",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "optionsInput",
            "in": "body",
            "description": "Retirement options input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetirementOptionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity infos",
            "schema": {
              "$ref": "#/definitions/AnnuityInfos"
            }
          }
        }
      }
    },
    "/api/retirement/drawdown/context": {
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get drawdown context validity",
        "description": "Get the context status for drawdown, according to given options",
        "operationId": "RetirementOptionsApi_IsDrawdownContextValid",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "optionsInput",
            "in": "body",
            "description": "Retirement options input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetirementOptionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Drawdown context valid",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/retirement/drawdown": {
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Purchase drawdown",
        "description": "Create a transaction for the current user to validate a drawdown purchase, using its given information",
        "operationId": "RetirementOptionsApi_PurchaseDrawdown",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "drawdownConfirm",
            "in": "body",
            "description": "Drawdown infos",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrawdownConfirmation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction reference number",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/retirement/drawdown/document": {
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get drawdown figures",
        "description": "Get a PDF file that summarises given drawdown information (e.g. amount, yearly income, drawdown age, etc.)",
        "operationId": "RetirementOptionsApi_DrawdownKeyFeatures",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "drawdownInfos",
            "in": "body",
            "description": "Drawdown infos",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrawdownInfos"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/retirement/drawdown/form": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "summary": "Download application form for specific tracing request",
        "operationId": "RetirementOptionsApi_GetApplicationFormForTransaction",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirectURL",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Link to docusign",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/retirement/annuity/occupations": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "operationId": "RetirementOptionsApi_AnnuityQuotesOccupations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "searchFilter",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity Occupations",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/retirement/annuity/otherconditions": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "operationId": "RetirementOptionsApi_AnnuityQuotesOtherConditions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "searchFilter",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity Other conditions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/retirement/annuity/medications": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "operationId": "RetirementOptionsApi_AnnuityQuotesMedications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "searchFilter",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity medication names",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/retirement/annuity/cancers": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "operationId": "RetirementOptionsApi_AnnuityQuotesCancerTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "searchFilter",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity cancer names",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/retirement/annuity/cancersurgeries": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "operationId": "RetirementOptionsApi_AnnuityQuotesCancerSurgeries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "searchFilter",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity Cancer Surgeries",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/retirement/annuity/heartotherdiagnoses": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "operationId": "RetirementOptionsApi_AnnuityQuotesOtherHeartDiags",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "searchFilter",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity Other heart diagnoses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/retirement/annuity/neurologicalotherdiagnoses": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "operationId": "RetirementOptionsApi_AnnuityQuotesOtherNeurologicalDiags",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "searchFilter",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity other neurological diagnoses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/retirement/annuity": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get annuity form",
        "description": "Get an empty annuity form, to be filled to compute the quotes, from its given resource key",
        "operationId": "RetirementOptionsApi_AnnuityQuotesForm",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "formKey",
            "in": "query",
            "description": "Annuity resource key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity form",
            "schema": {
              "$ref": "#/definitions/AnnuityQuotesFormRequest"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Confirm annuity quote",
        "description": "Create a transaction for the current user to validate an annuity quote, using its given information",
        "operationId": "RetirementOptionsApi_AnnuityQuoteConfirmation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "validation",
            "in": "body",
            "description": "Annuity quote validation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnnuityQuoteConfirmation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirm an annuity quote",
            "schema": {
              "$ref": "#/definitions/AnnuityQuoteConfirmationResult"
            }
          }
        }
      }
    },
    "/api/retirement/annuity/block/{annuityCaseId}": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get information block from annuity case.",
        "description": "if no case id parameter is set, new annuity case is created.\r\nif no block id is set, default is set to 1_1 (client information)",
        "operationId": "RetirementOptionsApi_GetAnnuityBlock",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "annuityCaseId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockId",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity case block",
            "schema": {
              "$ref": "#/definitions/AnnuityBlock"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Retirement"
        ],
        "operationId": "RetirementOptionsApi_SetAnnuityBlock",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "annuityCaseId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataBlock",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnnuityBlock"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity case block statuses",
            "schema": {
              "$ref": "#/definitions/AnnuityBlockCommon"
            }
          }
        }
      }
    },
    "/api/retirement/annuity/{annuityCaseId}": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "summary": "Compute annuity quotes",
        "description": "Use valid annuity case data to compute annuity quotes",
        "operationId": "RetirementOptionsApi_FetchProcessedAnnuityQuotes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "annuityCaseId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Compute annuity quotes",
            "schema": {
              "$ref": "#/definitions/AnnuityQuotesModel"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Retirement"
        ],
        "summary": "Compute annuity quotes and get references to use when retreiving quotes data",
        "description": "Use valid annuity case data to compute annuity quotes",
        "operationId": "RetirementOptionsApi_ProcessAnnuityQuotes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "annuityCaseId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Compute annuity quotes",
            "schema": {
              "$ref": "#/definitions/AnnuityCaseReferencesData"
            }
          }
        }
      }
    },
    "/api/retirement/annuity/document": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "summary": "Download temporary documents for specific annuity quotes",
        "operationId": "RetirementOptionsApi_DownloadQuoteDocument",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fileRef",
            "in": "query",
            "description": "reference of the file to download",
            "required": true,
            "type": "string"
          },
          {
            "name": "docType",
            "in": "query",
            "description": "document type",
            "required": true,
            "type": "string",
            "enum": [
              "KeyFacts",
              "CQF"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/retirement/annuity/{annuityCaseId}/detail": {
      "get": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get full annuity quote information",
        "operationId": "RetirementOptionsApi_GetAnnuityQuoteInformation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "annuityCaseId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity quote information",
            "schema": {
              "$ref": "#/definitions/AnnuityQuoteConfirmed"
            }
          }
        }
      }
    },
    "/api/retirement/annuity/signature": {
      "put": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get annuity documents signature url to resume previous flow",
        "operationId": "RetirementOptionsApi_GetAnnuityQuoteSignature",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnnuityQuoteSignature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Annuity quote signature",
            "schema": {
              "$ref": "#/definitions/AnnuityQuoteConfirmationResult"
            }
          }
        }
      }
    },
    "/api/retirement/keepinvestment/info": {
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Keep pension investment",
        "description": "Prepare the choice to keep retirement investment money (i.e. leave pension pot untouched) for the current user, using given retirement information",
        "operationId": "RetirementOptionsApi_KeepPensionInvested",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "optionsInput",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetirementOptionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Keep investement infos",
            "schema": {
              "$ref": "#/definitions/KeepInvestedInfos"
            }
          }
        }
      }
    },
    "/api/retirement/keepinvestment": {
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Confirm keep pension investment",
        "description": "Validate the choice to keep retirement investment money (i.e. leave pension pot untouched) for the current user, using given retirement information",
        "operationId": "RetirementOptionsApi_ConfirmKeepPensionInvested",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "validation",
            "in": "body",
            "description": "Keep pension investment validation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeepPensionInvestmentConfirmation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction reference number",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/retirement/withdraw/valid": {
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Get pension pot withdraw context",
        "description": "Get pension pot withdrawal context for the current user, using given retirement and withdrawal information",
        "operationId": "RetirementOptionsApi_WithdrawContext",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "optionsInput",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetirementOptionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Withdraw context infos",
            "schema": {
              "$ref": "#/definitions/WithdrawContext"
            }
          }
        }
      }
    },
    "/api/retirement/withdraw/info": {
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "",
        "description": "Simulation of pension pot withdrawal for the current user, using given retirement and withdrawal information",
        "operationId": "RetirementOptionsApi_WithdrawCashData",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "withdrawOptions",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WithdrawCashDataInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Withdraw context infos",
            "schema": {
              "$ref": "#/definitions/WithdrawCashInfos"
            }
          }
        }
      }
    },
    "/api/retirement/withdraw": {
      "post": {
        "tags": [
          "Retirement"
        ],
        "summary": "Confirm pension withdraw",
        "description": "Validate the choice to withdraw all money from the pension pot for the current user, using given retirement and withdrawal information",
        "operationId": "RetirementOptionsApi_ConfirmCashWithdraw",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "validation",
            "in": "body",
            "description": "Pension withdraw confirmation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PensionWithdrawConfirmation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction reference number",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/transaction/all": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get all transactions",
        "description": "Get all transactions visible to the current user, following a given filter on e.g. type, date, status, etc.",
        "operationId": "TransactionApi_GetTransactions",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "description": "Transaction filter applied on the search query",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionsFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of transactions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProfileTransactionRM"
              }
            }
          }
        }
      }
    },
    "/api/transaction": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get transaction",
        "description": "Get a transaction object from its ID",
        "operationId": "TransactionApi_GetTransaction",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "description": "Id of the transaction",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile transaction",
            "schema": {
              "$ref": "#/definitions/ProfileTransactionRM"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Transaction"
        ],
        "summary": "Update transaction",
        "description": "Update an existing transaction in database, for the current user, from a given transaction object",
        "operationId": "TransactionApi_UpdateTransaction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transaction",
            "in": "body",
            "description": "Profile transaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileTransactionRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Transaction",
          "B2B"
        ],
        "summary": "Add transaction",
        "description": "Save a transaction in database from a given transaction object",
        "operationId": "TransactionApi_AddTransaction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transaction",
            "in": "body",
            "description": "Profile transaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileTransactionRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Id of the transaction",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Transaction"
        ],
        "summary": "Delete transaction",
        "description": "Delete an existing transaction in database, for the current user, given its ID",
        "operationId": "TransactionApi_DeleteTransaction",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "description": "Id of the transaction",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/transaction/email": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Send transaction email",
        "description": "Send a transaction email using a given template key, to the address and using the enterprise templates corresponding to the current user",
        "operationId": "TransactionApi_SendEmailForTransaction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transactionEmail",
            "in": "body",
            "description": "Transaction email template",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionEmail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/transaction/pension/increasecontribution": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Create a pension increase contribution transaction",
        "description": "Increase the current user's contribution to its pension, and send a confirmation email. A previous increase must not have been performed less than a month ago",
        "operationId": "TransactionApi_AddPensionIncreaseContributionTransaction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transactionPayload",
            "in": "body",
            "description": "Transaction payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncreasePensionContributionTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Id of the transaction",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/transaction/pension/switchfunds": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Create a pension switch funds transaction",
        "description": "Switch the current user's funds to the selected one, and send a confirmation email. A previous switch must not have been performed less than a month ago",
        "operationId": "TransactionApi_AddSwitchFundsTransaction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transactionPayload",
            "in": "body",
            "description": "Transaction payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePensionInvestmentsTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Id of the transaction",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/transaction/savings/monthly": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Create a monthly contribution for a saving account transaction",
        "operationId": "TransactionApi_AddSavingContributionTransaction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transactionPayload",
            "in": "body",
            "description": "Transaction payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SavingMonthlyContributionTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Id of the transaction",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/transaction/savings/single": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Create a single contribution for a saving account transaction",
        "operationId": "TransactionApi_AddSavingSingleTransaction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transactionPayload",
            "in": "body",
            "description": "Transaction payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SavingSingleContributionTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Id of the transaction",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/transaction/callback": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Create a call back transaction",
        "operationId": "TransactionApi_AddCallBackTransaction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "transactionPayloadRM",
            "in": "body",
            "description": "Transaction payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallMeBackTransactionRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Id of the transaction",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/transfer/investment": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get investment options",
        "description": "Get the investment options for pension transfer (i.e. corresponding portfolio information) of the current user",
        "operationId": "TransferApi_GetInvestmentOptions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of portfolios",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PortfoliosInfos"
              }
            }
          }
        }
      }
    },
    "/api/transfer": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Transfer pension",
        "description": "Transfer a pension using a transfer object for the current user, generate and save a transfer form, and send a confirmation of transaction email",
        "operationId": "TransferApi_TransferPensionAsync",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "pensionTransferTransaction",
            "in": "body",
            "description": "Payload of the transfer transaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PensionTransferTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/transfer/providers": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get supported providers",
        "description": "Get the different providers that are available for transfer to the current user.",
        "operationId": "TransferApi_GetSupportedProvidersAsync",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of supported providers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/transfer/sign": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Sign transfer form",
        "description": "Create a transfer document from a transaction ID, and sign it",
        "operationId": "TransferApi_SignTransferDocument",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Id of the transaction, and redirection url",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferPensionConfirmation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Signing url",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/transfer/info": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get transfer information",
        "description": "Get the transfer information for given provider and/or account",
        "operationId": "TransferApi_GetLinkTransferInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "providerAccountId",
            "in": "query",
            "description": "ID of provider account",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "ID of account",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Transfer information",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LinkTransferInfoModel"
              }
            }
          }
        }
      }
    },
    "/api/user/lifeexpectancy": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get life expectancy",
        "description": "Get the life expectancy of the current user, i.e. their estimated death age",
        "operationId": "UserApi_GetLifeExpectancyAge",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Life expectancy of the user",
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current user",
        "description": "Get the profile and enterprise selector configuration corresponding to the current user",
        "operationId": "UserApi_GetUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Profile and enterprise configuration corresponding to the current user",
            "schema": {
              "$ref": "#/definitions/ProfileRM"
            }
          }
        }
      }
    },
    "/api/user/login": {
      "get": {
        "tags": [
          "User",
          "B2B"
        ],
        "summary": "Get user ID by login",
        "description": "Get the profile ID corresponding to a user login, if it belongs to the current enterprise.",
        "operationId": "UserApi_GetEnterpriseCustomerByLogin",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "login",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User Id",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/user/info": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user basics",
        "description": "Get basic information about the current user",
        "operationId": "UserApi_GetUserMinimumInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Basic info of the user profile",
            "schema": {
              "$ref": "#/definitions/MinimumProfile"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Save user",
        "description": "Fetch provided user information from the request body, and save it in database in the current user's profile",
        "operationId": "UserApi_SaveUserInformations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/sensitive": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user sensitive information",
        "description": "Get sensitive info the current user",
        "operationId": "UserApi_GetUserSensitiveInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Sensitive info of the user profile",
            "schema": {
              "$ref": "#/definitions/UserSensitiveInfo"
            }
          }
        }
      }
    },
    "/api/device": {
      "post": {
        "tags": [
          "Device"
        ],
        "summary": "Add a device",
        "description": "Add a device in database for the current user (i.e. profile), given its ID",
        "operationId": "UserApi_AddProfileDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "description": "Id of the device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Device"
        ],
        "summary": "Remove a device",
        "description": "Remove a device from database for the current user (i.e. profile), given its ID",
        "operationId": "UserApi_DeleteProfileDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "description": "Id of the device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/details": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Save user",
        "description": "Fetch provided user information from the request body, and save it in database in the current user's profile",
        "operationId": "UserApi_SaveUserProfileInformation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "updatedProfile",
            "in": "body",
            "description": "profile details model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/tax": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get tax band",
        "description": "Get the tax band (i.e. percentage) the current user is in, according to their country taxation",
        "operationId": "UserApi_GetTaxBand",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "User tax band",
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        }
      }
    },
    "/api/support/comments": {
      "get": {
        "tags": [
          "Support"
        ],
        "summary": "Get support request comments",
        "description": "Get the comments (as a list of users and comments) for a given support request ID",
        "operationId": "UserApi_GetSupportRequestComments",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "query",
            "description": "ID of the support request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of support comments",
            "schema": {
              "$ref": "#/definitions/ResponseRequestComments"
            }
          }
        }
      }
    },
    "/api/support": {
      "get": {
        "tags": [
          "Support"
        ],
        "summary": "Get support requests",
        "description": "Get the support requests of the current user from ZenDesk. Do not display tickets removed by the user, as well as those solved for more than a month",
        "operationId": "UserApi_GetSupportRequests",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of support requests",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ticket"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Support"
        ],
        "summary": "Create support request",
        "description": "Create a support request for the current user, using given data",
        "operationId": "UserApi_CreateSupportRequests",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Support request to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SupportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created support request",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Support"
        ],
        "summary": "Delete support request",
        "description": "Put a support request in \"removed by user\" state for the current user, given its ID",
        "operationId": "UserApi_RemoveSupportRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "query",
            "description": "ID of the request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/support/options": {
      "get": {
        "tags": [
          "Support"
        ],
        "summary": "Get support requests options",
        "description": "Get the different options of the Abaka field for support requests",
        "operationId": "UserApi_GetSupportRequestsCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of support request options",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FieldOption"
              }
            }
          }
        }
      }
    },
    "/api/user/maritalstatuses": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get enterprise marital statuses list",
        "operationId": "UserApi_GetMaritalStatuses",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "List of marital statuses",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Unknown",
                  "Married",
                  "CivilPartnership",
                  "Divorced",
                  "Separated",
                  "Widowed",
                  "Single"
                ],
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/user/import/exist": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Check if we have matching data for these informations on the customer data source",
        "operationId": "UserApi_CheckIfRecordExist",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profileDataToCheck",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Number of match found and matched informations",
            "schema": {
              "$ref": "#/definitions/ImportDataCheckUserExist"
            }
          }
        }
      }
    },
    "/api/user/import/confirm": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Import user data from the customer data source",
        "operationId": "UserApi_ConfirmImportUserData",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profileDataToCheck",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/import/update": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Import user data from the customer data source",
        "operationId": "UserApi_UpdateExistingUserData",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "alternativeIdentifierObject",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/preference": {
      "get": {
        "tags": [
          "User Preference"
        ],
        "summary": "Gets the list of the preferred entity type passed in parameter",
        "operationId": "UserPreferenceApi_GetPreferences",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "entityType",
            "in": "query",
            "description": "Entity type of the preference requested",
            "required": true,
            "type": "string",
            "enum": [
              "POLICY_CATEGORY",
              "POLICY_PRODUCT",
              "KNOWLEDGE_ARTICLE"
            ]
          },
          {
            "name": "preferenceTypes",
            "in": "query",
            "description": "List of preference types used to return the recommended categories (if empty no filtering will be applied).The items should be separated by | if multiple ones are needed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Recommended items",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPreferenceRM"
              }
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      },
      "post": {
        "tags": [
          "User Preference"
        ],
        "summary": "Create a new preference for a user on a specific entity",
        "description": "If a preference for this user on this entity already exists this one will replace it",
        "operationId": "UserPreferenceApi_AddUserPreference",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "preference",
            "in": "body",
            "description": "User preference to save",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPreferenceRM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    }
  },
  "definitions": {
    "PagingModel[Provider]": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Provider"
          }
        },
        "totalResults": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "PagingModel[Provider]"
    },
    "Provider": {
      "type": "object",
      "properties": {
        "LinkServiceProviderId": {
          "type": "string"
        },
        "LinkServiceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "UniqueName": {
          "type": "string"
        },
        "Help": {
          "type": "string"
        },
        "Contact": {
          "type": "string"
        },
        "Favicon": {
          "type": "string"
        },
        "Logo": {
          "type": "string"
        },
        "ForgetPasswordUrl": {
          "type": "string"
        },
        "HasAutomationInfo": {
          "type": "boolean"
        },
        "IsWellKnown": {
          "type": "boolean"
        },
        "LoginForm": {
          "$ref": "#/definitions/LoginForm"
        },
        "EmployerUniqueName": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedBy": {
          "type": "string"
        },
        "Configuration": {
          "$ref": "#/definitions/ProviderConfiguration"
        },
        "LinkAccountMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkMetadata"
          }
        },
        "DisabledSaveCredentials": {
          "type": "boolean"
        }
      },
      "title": "Provider"
    },
    "LoginForm": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "help": {
          "type": "string"
        },
        "forgetPasswordURL": {
          "type": "string"
        },
        "helpTitle": {
          "type": "string"
        },
        "mfaInfo": {
          "type": "string"
        },
        "mfaInfoTitle": {
          "type": "string"
        },
        "formType": {
          "type": "string"
        },
        "mfaTimeout": {
          "format": "int64",
          "type": "integer"
        },
        "row": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoginFormRow"
          }
        }
      },
      "title": "LoginForm"
    },
    "ProviderConfiguration": {
      "type": "object",
      "properties": {
        "UseOrigoOption": {
          "type": "boolean"
        },
        "InstitutionId": {
          "type": "string"
        },
        "WetInkSignature": {
          "type": "boolean"
        },
        "Contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        }
      },
      "title": "ProviderConfiguration"
    },
    "LinkMetadata": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      },
      "title": "LinkMetadata"
    },
    "LoginFormRow": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "form": {
          "type": "string"
        },
        "fieldRowChoice": {
          "type": "string"
        },
        "field": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoginField"
          }
        },
        "help": {
          "type": "string"
        },
        "isMfaFieldRow": {
          "type": "string"
        },
        "rowCriteria": {
          "type": "string"
        }
      },
      "title": "LoginFormRow"
    },
    "Contact": {
      "type": "object",
      "properties": {
        "Category": {
          "enum": [
            "Default",
            "Operator",
            "Support",
            "Administrator",
            "Other"
          ],
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "AddressLines": {
          "type": "string"
        },
        "PostCode": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Mobile": {
          "type": "string"
        },
        "Validated": {
          "type": "boolean"
        },
        "Notes": {
          "type": "string"
        }
      },
      "title": "Contact"
    },
    "LoginField": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "IsOptional": {
          "type": "boolean"
        },
        "unique": {
          "type": "boolean"
        },
        "maxLength": {
          "format": "int32",
          "type": "integer"
        },
        "required": {
          "type": "string"
        },
        "option": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Option"
          }
        },
        "validation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Validation"
          }
        },
        "prefix": {
          "type": "string"
        },
        "suffix": {
          "type": "string"
        },
        "image": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "imageSource": {
          "type": "string"
        },
        "valueEditable": {
          "type": "string"
        }
      },
      "title": "LoginField"
    },
    "Option": {
      "type": "object",
      "properties": {
        "optionValue": {
          "type": "string"
        },
        "displayText": {
          "type": "string"
        }
      },
      "title": "Option"
    },
    "Validation": {
      "type": "object",
      "properties": {
        "regExp": {
          "type": "string"
        },
        "errorMsg": {
          "type": "string"
        }
      },
      "title": "Validation"
    },
    "FinancialAccountRM": {
      "type": "object",
      "properties": {
        "AccountType": {
          "$ref": "#/definitions/ShortAccountTypeRM"
        },
        "AccountNumber": {
          "type": "string"
        },
        "AssetLines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetLineRM"
          }
        },
        "AvailableBalance": {
          "$ref": "#/definitions/Money"
        },
        "Balance": {
          "$ref": "#/definitions/Money"
        },
        "BenefitType": {
          "type": "string"
        },
        "Cash": {
          "$ref": "#/definitions/Money"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "CustomData": {
          "type": "string"
        },
        "EmployeeMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "EmployerId": {
          "type": "string"
        },
        "EmployerMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "EmployerName": {
          "type": "string"
        },
        "EmploymentEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "EmploymentStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "FinalPensionableSalary": {
          "$ref": "#/definitions/Money"
        },
        "ForecastedAnnualRetirementIncome": {
          "$ref": "#/definitions/Money"
        },
        "GlobalAssetAllocation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetAllocationItem"
          }
        },
        "HasAssociatedAccount": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        },
        "InvestmentReturn": {
          "format": "double",
          "type": "number"
        },
        "IsActive": {
          "type": "boolean"
        },
        "IsDeleted": {
          "type": "boolean"
        },
        "LastContribution": {
          "format": "date-time",
          "type": "string"
        },
        "LinkServiceAccountId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Overdraft": {
          "$ref": "#/definitions/Money"
        },
        "PlatformFee": {
          "format": "double",
          "type": "number"
        },
        "ProviderAccount": {
          "$ref": "#/definitions/ProviderAccount"
        },
        "ProviderAccountID": {
          "type": "string"
        },
        "RiskGrade": {
          "format": "int32",
          "type": "integer"
        },
        "RiskGradeLabel": {
          "type": "string"
        },
        "SchemeId": {
          "type": "string"
        },
        "SchemeJoinedDate": {
          "format": "date-time",
          "type": "string"
        },
        "SchemeLeftDate": {
          "format": "date-time",
          "type": "string"
        },
        "SchemeName": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR"
          ],
          "type": "string"
        },
        "TaxFreeCashLumpSum": {
          "$ref": "#/definitions/Money"
        },
        "TotalContributionsToDate": {
          "$ref": "#/definitions/Money"
        },
        "Transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountTransaction"
          }
        },
        "PensionProvider": {
          "$ref": "#/definitions/Provider"
        },
        "EmploymentHistoryId": {
          "type": "string"
        },
        "PortfolioNumber": {
          "format": "int32",
          "type": "integer"
        },
        "IsResellerAccount": {
          "type": "boolean"
        },
        "TaxRebate": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "FinancialAccountRM"
    },
    "ShortAccountTypeRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "AccountCategory_Name": {
          "type": "string"
        },
        "Category": {
          "$ref": "#/definitions/AccountCategory"
        }
      },
      "title": "ShortAccountTypeRM"
    },
    "AssetLineRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AssetID": {
          "type": "string"
        },
        "AssetUrl": {
          "type": "string"
        },
        "AssetName": {
          "type": "string"
        },
        "UnitHeld": {
          "format": "double",
          "type": "number"
        },
        "UnitPrice": {
          "$ref": "#/definitions/Money"
        },
        "OverallValue": {
          "$ref": "#/definitions/Money"
        },
        "LastRefreshed": {
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "AssetLineRM"
    },
    "Money": {
      "type": "object",
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number"
        },
        "Currency": {
          "enum": [
            "NONE",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTC",
            "BTN",
            "BWP",
            "BYR",
            "BYN",
            "BZD",
            "CAD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "ETH",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GGP",
            "GHC",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "IMP",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JEP",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTC",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MRU",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RMB",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SRD",
            "SSP",
            "STD",
            "STN",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRL",
            "TRY",
            "TTD",
            "TVD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XBT",
            "XCD",
            "XOF",
            "XPF",
            "YER",
            "ZAR",
            "ZWD",
            "CLF",
            "XAG",
            "XAU",
            "XDR",
            "ZMK",
            "ZMW",
            "ZWL",
            "VES"
          ],
          "type": "string"
        }
      },
      "title": "Money"
    },
    "AssetAllocationItem": {
      "type": "object",
      "properties": {
        "Item1": {
          "format": "double",
          "type": "number"
        },
        "Item2": {
          "enum": [
            "Alternatives",
            "Equity",
            "Bonds",
            "Property",
            "Commodity",
            "Cash",
            "Gold",
            "StockPosition",
            "DirectInvestment",
            "Unknown"
          ],
          "type": "string"
        }
      },
      "title": "AssetAllocationItem"
    },
    "ProviderAccount": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "LinkServiceId": {
          "type": "string"
        },
        "LinkServiceProviderId": {
          "type": "string"
        },
        "Favicon": {
          "type": "string"
        },
        "RefreshType": {
          "enum": [
            "MANUAL",
            "AUTOMATION",
            "IMPORT"
          ],
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "LastRefreshed": {
          "format": "date-time",
          "type": "string"
        },
        "NextRefreshScheduled": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "enum": [
            "NONE",
            "USERCREDENTIALSREQUIRED",
            "AVAILABLE",
            "UNAVAILABLE",
            "INPROGRESS",
            "USERACTIONREQUIRED",
            "INITIALLINKCOMPLETED",
            "HISTORICALUPDATESTARTED",
            "HISTORICALUPDATEERROR",
            "DEPRECATED"
          ],
          "type": "string"
        },
        "RefreshFailCounter": {
          "format": "int32",
          "type": "integer"
        },
        "LinkServiceAccessToken": {
          "type": "string"
        },
        "LinkServiceRefreshToken": {
          "type": "string"
        }
      },
      "title": "ProviderAccount"
    },
    "AccountTransaction": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Amount": {
          "$ref": "#/definitions/Money"
        },
        "BaseType": {
          "type": "string"
        },
        "Category": {
          "enum": [
            "BILLSUTILITIES",
            "CASH",
            "ENTERTAINMENT",
            "HEALTH",
            "HOUSEHOLD",
            "RENT",
            "GROCERIES",
            "SHOPPING",
            "TAXES",
            "TRAVEL",
            "INCOME",
            "OTHER",
            "CREDITCARDLOAN",
            "TRANSFER",
            "INSURANCE",
            "PERSONALCARE",
            "CONTRIBUTION",
            "INVESTMENT",
            "BENEFICIARY",
            "EDUCATION"
          ],
          "type": "string"
        },
        "Description": {
          "$ref": "#/definitions/Description"
        },
        "Date": {
          "format": "date-time",
          "type": "string"
        },
        "Price": {
          "$ref": "#/definitions/Money"
        },
        "Quantity": {
          "format": "double",
          "type": "number"
        },
        "AccountID": {
          "type": "string"
        },
        "Tags": {
          "type": "string"
        },
        "CapitalBaseType": {
          "type": "string"
        }
      },
      "title": "AccountTransaction"
    },
    "AccountCategory": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "LabelPensionListTotal": {
          "type": "string"
        },
        "LabelPensionList": {
          "type": "string"
        },
        "OrderPensionsList": {
          "format": "int32",
          "type": "integer"
        },
        "Alternative": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      },
      "title": "AccountCategory"
    },
    "Description": {
      "type": "object",
      "properties": {
        "Original": {
          "type": "string"
        },
        "Consumer": {
          "type": "string"
        },
        "Simple": {
          "type": "string"
        }
      },
      "title": "Description"
    },
    "EstimateAccountProjection": {
      "type": "object",
      "properties": {
        "Datas": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Money"
          }
        },
        "DatasMaximum": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Money"
          }
        },
        "DatasMinimum": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Money"
          }
        }
      },
      "title": "EstimateAccountProjection"
    },
    "FundsSearchFilter": {
      "type": "object",
      "properties": {
        "FundsPerfOrdering": {
          "enum": [
            "NONE",
            "PERF12M",
            "PERF3Y",
            "PERF5Y"
          ],
          "type": "string"
        },
        "ISIN": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "RiskGrade": {
          "format": "int32",
          "type": "integer"
        },
        "Theme": {
          "enum": [
            "NONE",
            "MOSTPOPULAR",
            "MOSTECONOMICIMPACT",
            "SUSTAINABLE",
            "LOWCARBON",
            "SHARIACOMPLIANT"
          ],
          "type": "string"
        },
        "Strategy": {
          "enum": [
            "NONE",
            "INDEXBASED",
            "ACTIVE",
            "SMARTBETA"
          ],
          "type": "string"
        },
        "ShareClass": {
          "enum": [
            "NONE",
            "ACCUMULATION",
            "INCOME"
          ],
          "type": "string"
        },
        "Geography": {
          "enum": [
            "NONE",
            "UKONLY",
            "EUROPE",
            "NORTHAMERICA",
            "DEVELOPEDASIA",
            "EMERGINGCOUNTRIES",
            "WORLD"
          ],
          "type": "string"
        },
        "MinimumOCF": {
          "format": "double",
          "type": "number"
        },
        "MaximumOCF": {
          "format": "double",
          "type": "number"
        },
        "AssetClass": {
          "enum": [
            "NONE",
            "SHARES",
            "BONDS",
            "CASHLIQUIDITY",
            "DIVERSIFIEDMIX"
          ],
          "type": "string"
        },
        "Enterprise": {
          "type": "string"
        },
        "TopFunds": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "FundsSearchFilter"
    },
    "AssetRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Isin": {
          "type": "string"
        },
        "UnitPrice": {
          "$ref": "#/definitions/Money"
        },
        "AssetUrl": {
          "type": "string"
        },
        "Type": {
          "enum": [
            "UNDEFINED",
            "FUND",
            "TITLE",
            "ETF",
            "Security"
          ],
          "type": "string"
        },
        "Perf12M": {
          "format": "double",
          "type": "number"
        },
        "Perf3Y": {
          "format": "double",
          "type": "number"
        },
        "Perf5Y": {
          "format": "double",
          "type": "number"
        },
        "AssetAllocation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tuple[Double,AssetClass]"
          }
        }
      },
      "title": "AssetRM"
    },
    "Tuple[Double,AssetClass]": {
      "type": "object",
      "properties": {
        "Item1": {
          "format": "double",
          "type": "number",
          "readOnly": true
        },
        "Item2": {
          "enum": [
            "Alternatives",
            "Equity",
            "Bonds",
            "Property",
            "Commodity",
            "Cash",
            "Gold",
            "StockPosition",
            "DirectInvestment",
            "Unknown"
          ],
          "type": "string",
          "readOnly": true
        }
      },
      "title": "Tuple[Double,AssetClass]"
    },
    "CategoriesTansaction": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AIPCategoryId": {
          "type": "string"
        },
        "CategoryName": {
          "type": "string"
        }
      },
      "title": "CategoriesTansaction"
    },
    "TransactionsFilter": {
      "type": "object",
      "properties": {
        "AccountIds": {
          "type": "string"
        },
        "FromDate": {
          "format": "date-time",
          "type": "string"
        },
        "ToDate": {
          "format": "date-time",
          "type": "string"
        },
        "TransactionType": {
          "enum": [
            "None",
            "PensionTransfer",
            "ChangeRetirementGoalLumpSum",
            "IncreasePensionContribution",
            "ChangePensionInvestments",
            "PurchaseOrder",
            "OpenSavingsAccount",
            "BookingOrder",
            "EquityReleaseLead",
            "DrawdownPurchase",
            "AnnuityQuote",
            "PensionCashWithdrawal",
            "PensionTracing",
            "PensionKeepInvested",
            "Beneficiaries",
            "SavingMonthlyContribution",
            "SavingSingleContribution",
            "CallMeBack",
            "WealthLead",
            "FundsOrders"
          ],
          "type": "string"
        },
        "IsProcessed": {
          "type": "boolean"
        },
        "StatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        }
      },
      "title": "TransactionsFilter"
    },
    "TransactionRule": {
      "required": [
        "DescriptionSimple",
        "Category",
        "OriginalCategory",
        "CreatedDate"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "User": {
          "$ref": "#/definitions/Profile"
        },
        "DescriptionSimple": {
          "type": "string"
        },
        "Category": {
          "enum": [
            "BILLSUTILITIES",
            "CASH",
            "ENTERTAINMENT",
            "HEALTH",
            "HOUSEHOLD",
            "RENT",
            "GROCERIES",
            "SHOPPING",
            "TAXES",
            "TRAVEL",
            "INCOME",
            "OTHER",
            "CREDITCARDLOAN",
            "TRANSFER",
            "INSURANCE",
            "PERSONALCARE",
            "CONTRIBUTION",
            "INVESTMENT",
            "BENEFICIARY",
            "EDUCATION"
          ],
          "type": "string"
        },
        "OriginalCategory": {
          "enum": [
            "BILLSUTILITIES",
            "CASH",
            "ENTERTAINMENT",
            "HEALTH",
            "HOUSEHOLD",
            "RENT",
            "GROCERIES",
            "SHOPPING",
            "TAXES",
            "TRAVEL",
            "INCOME",
            "OTHER",
            "CREDITCARDLOAN",
            "TRANSFER",
            "INSURANCE",
            "PERSONALCARE",
            "CONTRIBUTION",
            "INVESTMENT",
            "BENEFICIARY",
            "EDUCATION"
          ],
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "TransactionRule"
    },
    "Profile": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "ObjectId": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "MaidenName": {
          "type": "string"
        },
        "Login": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "PhoneNumberType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "AlternatePhoneNumber": {
          "type": "string"
        },
        "AlternatePhoneNumberType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "DisabledDate": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "AlreadyConnect": {
          "type": "boolean"
        },
        "AvaIntroduced": {
          "type": "boolean"
        },
        "Nin": {
          "type": "string"
        },
        "OtherNin": {
          "type": "string"
        },
        "BirthDate": {
          "format": "date-time",
          "type": "string"
        },
        "Gender": {
          "format": "int32",
          "type": "integer"
        },
        "TaxBracket": {
          "$ref": "#/definitions/Money"
        },
        "Address1": {
          "type": "string"
        },
        "Address2": {
          "type": "string"
        },
        "PostCode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "MaritalStatus": {
          "enum": [
            "Unknown",
            "Married",
            "CivilPartnership",
            "Divorced",
            "Separated",
            "Widowed",
            "Single"
          ],
          "type": "string"
        },
        "SecurityQuestion": {
          "type": "string"
        },
        "SecurityAnswer": {
          "type": "string"
        },
        "isAgreeTCThirdParty": {
          "type": "boolean"
        },
        "isAgreePrivatePolicy": {
          "type": "boolean"
        },
        "BudgetGoalScore": {
          "format": "double",
          "type": "number"
        },
        "MiddleName": {
          "type": "string"
        },
        "AlternativeIdentifier": {
          "type": "string"
        },
        "ResidenceCity": {
          "type": "string"
        },
        "ResidenceCounty": {
          "type": "string"
        },
        "County": {
          "type": "string"
        },
        "Nationality": {
          "type": "string"
        },
        "CountryOfBirth": {
          "type": "string"
        },
        "PreferredLanguage_Id": {
          "type": "string"
        },
        "PreferredLanguage": {
          "$ref": "#/definitions/Language"
        },
        "PersonalEmail": {
          "type": "string"
        },
        "USCitizen": {
          "type": "boolean"
        },
        "SendInformationToABAKA": {
          "type": "boolean"
        },
        "OverseasMemberNINWaiting": {
          "type": "boolean"
        },
        "ProfileEnterprises": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileEnterprise"
          }
        },
        "ProfileAppointmentBookingServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileAppointmentBookingService"
          }
        },
        "ProfileDevices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileDevice"
          }
        },
        "Appointments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Appointment"
          }
        },
        "ProfileIncome": {
          "$ref": "#/definitions/ProfileIncome"
        },
        "IsRetired": {
          "type": "boolean"
        },
        "File": {
          "type": "string"
        },
        "LastLoginDate": {
          "format": "date-time",
          "type": "string"
        },
        "LastTimezoneOffset": {
          "format": "double",
          "type": "number"
        },
        "HasSMSSubscribed": {
          "type": "boolean"
        },
        "HasKnowledgeCenterAccess": {
          "type": "boolean"
        },
        "HasAIPAccess": {
          "type": "boolean"
        },
        "HasEmailNudgesSubscribed": {
          "type": "boolean"
        },
        "Role": {
          "enum": [
            "User",
            "Admin",
            "Support",
            "IFA",
            "AbakaAdmin",
            "AbakaSupportAgent",
            "Analyst",
            "AbakaAnalyst",
            "AbakaLinker",
            "AbakaRefresher",
            "AbakaAutoscaler",
            "AbakaBot",
            "Developer",
            "DataScientist",
            "AbakaFunction",
            "Enterprise",
            "IFAManager",
            "Test",
            "AbakaNode",
            "BO"
          ],
          "type": "string"
        },
        "ProfileExtended": {
          "$ref": "#/definitions/ProfileExtended"
        },
        "PersonaeList": {
          "type": "string"
        },
        "NumberChildren": {
          "format": "int32",
          "type": "integer"
        },
        "ExternalPersona": {
          "type": "string"
        }
      },
      "title": "Profile"
    },
    "Language": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CultureCode": {
          "type": "string"
        }
      },
      "title": "Language"
    },
    "ProfileEnterprise": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Enterprise_UniqueName": {
          "type": "string"
        },
        "Enterprise": {
          "$ref": "#/definitions/Enterprise"
        },
        "EmploymentStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EmploymentEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "Current": {
          "type": "boolean"
        },
        "GrossSalary": {
          "$ref": "#/definitions/Money"
        },
        "FullTime": {
          "type": "boolean"
        },
        "BasicPayFrequency": {
          "format": "int32",
          "type": "integer"
        },
        "Commissions": {
          "$ref": "#/definitions/Money"
        },
        "OvertimePay": {
          "$ref": "#/definitions/Money"
        },
        "OccupationId": {
          "type": "string"
        },
        "Occupation": {
          "$ref": "#/definitions/EnterpriseOccupation"
        },
        "ProfileId": {
          "type": "string"
        },
        "EmployeeId": {
          "type": "string"
        }
      },
      "title": "ProfileEnterprise"
    },
    "ProfileAppointmentBookingService": {
      "required": [
        "ProfileId",
        "AppointmentBookingServiceId"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProfileId": {
          "type": "string"
        },
        "Profile": {
          "$ref": "#/definitions/Profile"
        },
        "AppointmentBookingServiceId": {
          "type": "string"
        },
        "AppointmentBookingService": {
          "$ref": "#/definitions/AppointmentBookingService"
        },
        "AppointmentBookingServiceResourceId": {
          "type": "string"
        },
        "Timezone": {
          "type": "string"
        },
        "Metadata": {
          "type": "string"
        }
      },
      "title": "ProfileAppointmentBookingService"
    },
    "ProfileDevice": {
      "required": [
        "DeviceModel",
        "DeviceVersion"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "DeviceId": {
          "type": "string"
        },
        "DeviceType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12
          ],
          "type": "integer"
        },
        "DeviceModel": {
          "type": "string"
        },
        "DeviceVersion": {
          "type": "string"
        },
        "ProfileId": {
          "type": "string"
        }
      },
      "title": "ProfileDevice"
    },
    "Appointment": {
      "required": [
        "ProfileId",
        "AppointmentBookingServiceId",
        "AppointmentType",
        "AppointmentStartTime",
        "AppointmentEndTime",
        "AppointmentStatus",
        "AppointmentMetadata"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ResourceId": {
          "type": "string"
        },
        "OrderId": {
          "type": "string"
        },
        "Order": {
          "$ref": "#/definitions/Order"
        },
        "AppointmentType": {
          "format": "int32",
          "enum": [
            0
          ],
          "type": "integer"
        },
        "AppointmentStartTime": {
          "format": "date-time",
          "type": "string"
        },
        "AppointmentEndTime": {
          "format": "date-time",
          "type": "string"
        },
        "AppointmentStatus": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "AppointmentMetadata": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "BookingInProgress": {
          "type": "boolean"
        },
        "AppointmentCategoryId": {
          "type": "string"
        },
        "AppointmentCategory": {
          "$ref": "#/definitions/AppointmentCategory"
        },
        "AppointmentTitle": {
          "type": "string"
        },
        "AppointmentDescription": {
          "type": "string"
        }
      },
      "title": "Appointment"
    },
    "ProfileIncome": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AnnualBaseSalary": {
          "$ref": "#/definitions/Money"
        },
        "Bonus": {
          "$ref": "#/definitions/Money"
        },
        "DividendIncome": {
          "$ref": "#/definitions/Money"
        },
        "ShareIncome": {
          "$ref": "#/definitions/Money"
        },
        "TrustIncome": {
          "$ref": "#/definitions/Money"
        },
        "RentalIncome": {
          "$ref": "#/definitions/Money"
        },
        "OtherIncome": {
          "$ref": "#/definitions/Money"
        },
        "MonthlySpending": {
          "$ref": "#/definitions/Money"
        },
        "TotalAnnualGrossIncome": {
          "$ref": "#/definitions/Money",
          "readOnly": true
        }
      },
      "title": "ProfileIncome"
    },
    "ProfileExtended": {
      "type": "object",
      "properties": {
        "ProfileId": {
          "type": "string"
        },
        "ExtendedType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer",
          "readOnly": true
        }
      },
      "title": "ProfileExtended"
    },
    "Enterprise": {
      "type": "object",
      "properties": {
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "ModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "UniqueName": {
          "type": "string"
        },
        "HostName": {
          "type": "string"
        },
        "CustomUri": {
          "type": "string"
        },
        "Country_Id": {
          "type": "string"
        },
        "Country": {
          "$ref": "#/definitions/Countries"
        },
        "LogoUrl": {
          "type": "string"
        },
        "AlternativesNames": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "NONE",
            "ONBOARDED",
            "NOTONBOARDED"
          ],
          "type": "string"
        },
        "PensionSchemes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmployerPensionScheme"
          }
        },
        "Occupations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnterpriseOccupation"
          }
        },
        "Type": {
          "type": "string"
        },
        "Reseller": {
          "$ref": "#/definitions/Enterprise"
        },
        "ResellerName": {
          "type": "string"
        },
        "Credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnterpriseCredential"
          }
        },
        "Languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnterpriseLanguage"
          }
        }
      },
      "title": "Enterprise"
    },
    "EnterpriseOccupation": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "EnterpriseName": {
          "type": "string"
        },
        "OccupationCode": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            -1
          ],
          "type": "integer"
        },
        "Order": {
          "format": "int32",
          "type": "integer"
        },
        "SectorResourceKey": {
          "type": "string"
        },
        "Sector": {
          "type": "string"
        },
        "JobTitleResourceKey": {
          "type": "string"
        },
        "JobTitle": {
          "type": "string"
        },
        "CustomCode": {
          "type": "string"
        }
      },
      "title": "EnterpriseOccupation"
    },
    "AppointmentBookingService": {
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "title": "AppointmentBookingService"
    },
    "Order": {
      "required": [
        "ProductId",
        "PlanId",
        "PaymentServiceId",
        "ProfileId",
        "CreatedDate"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProductId": {
          "type": "string"
        },
        "Product": {
          "$ref": "#/definitions/Product"
        },
        "PlanId": {
          "type": "string"
        },
        "Plan": {
          "$ref": "#/definitions/Plan"
        },
        "PaymentServiceId": {
          "type": "string"
        },
        "PaymentService": {
          "$ref": "#/definitions/PaymentService"
        },
        "ProfileId": {
          "type": "string"
        },
        "Metadata": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ExpirationDate": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "enum": [
            "NONE",
            "ACTIVE",
            "PAST_DUE"
          ],
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        }
      },
      "title": "Order"
    },
    "AppointmentCategory": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "AppointmentCategory"
    },
    "Countries": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Code": {
          "type": "string"
        },
        "ISOCode": {
          "type": "string"
        },
        "DefaultLanguage": {
          "$ref": "#/definitions/Language"
        },
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "DefaultDCRetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "MinimumDCRetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "DefaultDBRetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "YearlyFees": {
          "format": "double",
          "type": "number"
        },
        "Currency": {
          "enum": [
            "NONE",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTC",
            "BTN",
            "BWP",
            "BYR",
            "BYN",
            "BZD",
            "CAD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "ETH",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GGP",
            "GHC",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "IMP",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JEP",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTC",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MRU",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RMB",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SRD",
            "SSP",
            "STD",
            "STN",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRL",
            "TRY",
            "TTD",
            "TVD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XBT",
            "XCD",
            "XOF",
            "XPF",
            "YER",
            "ZAR",
            "ZWD",
            "CLF",
            "XAG",
            "XAU",
            "XDR",
            "ZMK",
            "ZMW",
            "ZWL",
            "VES"
          ],
          "type": "string"
        },
        "Inflation": {
          "format": "double",
          "type": "number"
        },
        "TaxRelief": {
          "format": "double",
          "type": "number"
        },
        "AnnualAllowance": {
          "$ref": "#/definitions/Money"
        },
        "LowerAnnualAllowance": {
          "$ref": "#/definitions/Money"
        },
        "CeilingSalaryAllowance": {
          "$ref": "#/definitions/Money"
        },
        "FiscalYearStart": {
          "format": "date-time",
          "type": "string"
        },
        "FiscalYearEnd": {
          "format": "date-time",
          "type": "string"
        },
        "MaximumLifeTimeAllowance": {
          "$ref": "#/definitions/Money"
        },
        "LumpSumExcessLifeTime": {
          "$ref": "#/definitions/Money"
        },
        "TaxFreeLumpSumRate": {
          "format": "double",
          "type": "number"
        },
        "DefaultLumpSumRate": {
          "format": "double",
          "type": "number"
        },
        "IncomeExcessLifeTime": {
          "$ref": "#/definitions/Money"
        },
        "NoneTaxableLifeTime": {
          "$ref": "#/definitions/Money"
        },
        "AverageInterestRate": {
          "format": "double",
          "type": "number"
        },
        "AddedInsuranceContributionYear": {
          "format": "int32",
          "type": "integer"
        },
        "MinimumInsuranceContributionYear": {
          "format": "int32",
          "type": "integer"
        },
        "SavingRate": {
          "format": "double",
          "type": "number"
        },
        "AverageWageGrowth": {
          "format": "double",
          "type": "number"
        },
        "PersonalAllowanceRestrictionPoint": {
          "$ref": "#/definitions/Money"
        },
        "StandardPersonalAllowance": {
          "$ref": "#/definitions/Money"
        },
        "AccrualRate": {
          "format": "double",
          "type": "number"
        },
        "PhoneCountryCode": {
          "type": "string"
        },
        "PhoneCountryNumber": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "SocialSecurityBendingPointAge": {
          "format": "int32",
          "type": "integer"
        },
        "SocialSecurityYearsOfSalary": {
          "format": "int32",
          "type": "integer"
        },
        "SocialSecurityMaxIncome": {
          "$ref": "#/definitions/Money"
        },
        "DefaultEnterpriseName": {
          "type": "string"
        },
        "MajorityAge": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "Countries"
    },
    "EmployerPensionScheme": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "LinkServiceProviderId": {
          "type": "string"
        },
        "LinkServiceId": {
          "type": "string"
        },
        "PensionProviderName": {
          "type": "string"
        },
        "CustomEmployerPensionSchemeData": {
          "type": "string"
        },
        "EmployerUniqueName": {
          "type": "string"
        }
      },
      "title": "EmployerPensionScheme"
    },
    "EnterpriseCredential": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ApplicationId": {
          "type": "string"
        },
        "ApplicationRole": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      },
      "title": "EnterpriseCredential"
    },
    "EnterpriseLanguage": {
      "required": [
        "EnterpriseName",
        "LanguageId"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "LanguageId": {
          "type": "string"
        },
        "Language": {
          "$ref": "#/definitions/Language"
        }
      },
      "title": "EnterpriseLanguage"
    },
    "Product": {
      "required": [
        "Name",
        "Description",
        "EnterpriseName"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          }
        },
        "ProductFeatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductFeature"
          }
        },
        "EnterpriseName": {
          "type": "string"
        },
        "UpgradeOrder": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "Product"
    },
    "Plan": {
      "required": [
        "Name",
        "RecurrenceType",
        "Price"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "RecurrenceType": {
          "enum": [
            "NONE",
            "ONE_OFF_CHARGE",
            "RECURRING_MONTHLY",
            "RECURRING_YEARLY"
          ],
          "type": "string"
        },
        "Price": {
          "$ref": "#/definitions/Money"
        },
        "ProductId": {
          "type": "string"
        },
        "PlanPaymentServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlanPaymentService"
          }
        },
        "MinimumMonthsEngagement": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "Plan"
    },
    "PaymentService": {
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "title": "PaymentService"
    },
    "ProductFeature": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "FeatureId": {
          "type": "string"
        },
        "Feature": {
          "$ref": "#/definitions/Feature"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer"
        },
        "JsonMetadata": {
          "type": "string"
        },
        "ProductId": {
          "type": "string"
        }
      },
      "title": "ProductFeature"
    },
    "PlanPaymentService": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "PlanId": {
          "type": "string"
        },
        "Plan": {
          "$ref": "#/definitions/Plan"
        },
        "PaymentServiceId": {
          "type": "string"
        },
        "PaymentService": {
          "$ref": "#/definitions/PaymentService"
        },
        "Metadata": {
          "type": "string"
        }
      },
      "title": "PlanPaymentService"
    },
    "Feature": {
      "required": [
        "Name",
        "Description"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        },
        "FeatureBotIntents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeatureBotIntent"
          }
        }
      },
      "title": "Feature"
    },
    "FeatureBotIntent": {
      "required": [
        "FeatureId"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "FeatureId": {
          "type": "string"
        },
        "BotIntentName": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "FeatureBotIntent"
    },
    "LinkProviderAccount": {
      "type": "object",
      "properties": {
        "correlationId": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        }
      },
      "title": "LinkProviderAccount"
    },
    "Beneficiary": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "IsPrimary": {
          "type": "boolean"
        },
        "LastName": {
          "type": "string"
        },
        "SocialSecurityNumber": {
          "type": "string"
        },
        "Address1": {
          "type": "string"
        },
        "Address2": {
          "type": "string"
        },
        "ZipCode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "Ratio": {
          "format": "double",
          "type": "number"
        },
        "DateOfBirth": {
          "format": "date-time",
          "type": "string"
        },
        "Relationship": {
          "enum": [
            "None",
            "Parent",
            "Child",
            "Spouse",
            "Sibling"
          ],
          "type": "string"
        },
        "Gender": {
          "format": "int32",
          "type": "integer"
        },
        "IsBeneficiaryAdult": {
          "type": "boolean",
          "readOnly": true
        }
      },
      "title": "Beneficiary"
    },
    "FundPerformanceRM": {
      "type": "object",
      "properties": {
        "FundPerformance": {
          "format": "double",
          "type": "number"
        },
        "IsAllFundFound": {
          "type": "boolean"
        }
      },
      "title": "FundPerformanceRM"
    },
    "AccountFundsOperationsRM": {
      "type": "object",
      "properties": {
        "Operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FundOrderRM"
          }
        }
      },
      "title": "AccountFundsOperationsRM"
    },
    "FundOrderRM": {
      "type": "object",
      "properties": {
        "Target": {
          "$ref": "#/definitions/FundDetailsRM"
        },
        "Source": {
          "$ref": "#/definitions/FundDetailsRM"
        }
      },
      "title": "FundOrderRM"
    },
    "FundDetailsRM": {
      "type": "object",
      "properties": {
        "Isin": {
          "type": "string"
        },
        "Amount": {
          "$ref": "#/definitions/Money"
        },
        "UnitNumber": {
          "format": "double",
          "type": "number"
        },
        "UnitPrice": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "FundDetailsRM"
    },
    "AppointmentBookingAvailability": {
      "type": "object",
      "properties": {
        "ProjectId": {
          "type": "string"
        },
        "Appointments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppointmentBookingItem"
          }
        },
        "AppointmentCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppointmentCategory"
          }
        }
      },
      "title": "AppointmentBookingAvailability"
    },
    "AppointmentBookingItem": {
      "type": "object",
      "properties": {
        "FromDate": {
          "type": "string"
        },
        "EndDate": {
          "type": "string"
        },
        "ResourceId": {
          "type": "string"
        },
        "TimeZone": {
          "type": "string"
        },
        "FeatureId": {
          "type": "string"
        }
      },
      "title": "AppointmentBookingItem"
    },
    "BookAppointmentVM": {
      "type": "object",
      "properties": {
        "FromDate": {
          "type": "string"
        },
        "EndDate": {
          "type": "string"
        },
        "ResourceId": {
          "type": "string"
        },
        "TimeZone": {
          "type": "string"
        },
        "FeatureId": {
          "type": "string"
        },
        "AppointmentCategoryId": {
          "type": "string"
        },
        "AppointmentTitle": {
          "type": "string"
        },
        "AppointmentDescription": {
          "type": "string"
        }
      },
      "title": "BookAppointmentVM"
    },
    "ConfirmAppointmentVM": {
      "type": "object",
      "properties": {
        "AppointmentId": {
          "type": "string"
        },
        "OrderId": {
          "type": "string"
        }
      },
      "title": "ConfirmAppointmentVM"
    },
    "RescheduleAppointmentVM": {
      "type": "object",
      "properties": {
        "CancelAppointmentId": {
          "type": "string"
        },
        "FromDate": {
          "type": "string"
        },
        "EndDate": {
          "type": "string"
        },
        "ResourceId": {
          "type": "string"
        },
        "TimeZone": {
          "type": "string"
        }
      },
      "title": "RescheduleAppointmentVM"
    },
    "AppointmentRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ResourceId": {
          "type": "string"
        },
        "AppointmentType": {
          "format": "int32",
          "enum": [
            0
          ],
          "type": "integer"
        },
        "AppointmentStartTime": {
          "format": "date-time",
          "type": "string"
        },
        "AppointmentEndTime": {
          "format": "date-time",
          "type": "string"
        },
        "AppointmentStatus": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "AppointmentMetadata": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "BookingInProgress": {
          "type": "boolean"
        },
        "AppointmentCategoryId": {
          "type": "string"
        },
        "AppointmentTitle": {
          "type": "string"
        },
        "AppointmentDescription": {
          "type": "string"
        }
      },
      "title": "AppointmentRM"
    },
    "CategoryMonthlyAverage": {
      "type": "object",
      "properties": {
        "AIPCategoryId": {
          "type": "string",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "MonthlyAverage": {
          "$ref": "#/definitions/Money",
          "readOnly": true
        }
      },
      "title": "CategoryMonthlyAverage"
    },
    "SavingsSpendingsModel": {
      "type": "object",
      "properties": {
        "PeriodValue": {
          "$ref": "#/definitions/Money"
        },
        "PeriodTitle": {
          "type": "string"
        },
        "PeriodRelativeTitle": {
          "type": "string"
        },
        "IncomeSpendingMode": {
          "type": "string"
        }
      },
      "title": "SavingsSpendingsModel"
    },
    "AddressModel": {
      "type": "object",
      "properties": {
        "AddressLine1": {
          "type": "string"
        },
        "AddressLine2": {
          "type": "string"
        },
        "AddressLine3": {
          "type": "string"
        },
        "AddressLine4": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Postcode": {
          "type": "string"
        },
        "County": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        }
      },
      "title": "AddressModel"
    },
    "AccountTypeRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "AccountCategory_Name": {
          "type": "string"
        },
        "Category": {
          "$ref": "#/definitions/AccountCategory"
        },
        "CountriesAvailability": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShortCountryRM"
          }
        }
      },
      "title": "AccountTypeRM"
    },
    "ShortCountryRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ISOCode": {
          "type": "string"
        },
        "Currency": {
          "enum": [
            "NONE",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTC",
            "BTN",
            "BWP",
            "BYR",
            "BYN",
            "BZD",
            "CAD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "ETH",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GGP",
            "GHC",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "IMP",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JEP",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTC",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MRU",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RMB",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SRD",
            "SSP",
            "STD",
            "STN",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRL",
            "TRY",
            "TTD",
            "TVD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XBT",
            "XCD",
            "XOF",
            "XPF",
            "YER",
            "ZAR",
            "ZWD",
            "CLF",
            "XAG",
            "XAU",
            "XDR",
            "ZMK",
            "ZMW",
            "ZWL",
            "VES"
          ],
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "title": "ShortCountryRM"
    },
    "EquityReleaseValueInput": {
      "type": "object",
      "properties": {
        "propertyValue": {
          "$ref": "#/definitions/Money"
        },
        "ownerAge": {
          "format": "int32",
          "type": "integer"
        },
        "numberYearTerm": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "EquityReleaseValueInput"
    },
    "EquityReleaseFlexValueInput": {
      "type": "object",
      "properties": {
        "totalEquityRelease": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "EquityReleaseFlexValueInput"
    },
    "GeographicAreaRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Type": {
          "enum": [
            "CITY",
            "COUNTY"
          ],
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Parent": {
          "$ref": "#/definitions/GeographicAreaRM"
        }
      },
      "title": "GeographicAreaRM"
    },
    "LifeStyleRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "MonthlyTargetIncome": {
          "$ref": "#/definitions/Money"
        },
        "MinNetIncomeBracket": {
          "$ref": "#/definitions/Money"
        },
        "MaxNetIncomeBracket": {
          "$ref": "#/definitions/Money"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "PercentageByCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LifeStyleCategoryPercentageRM"
          }
        }
      },
      "title": "LifeStyleRM"
    },
    "LifeStyleCategoryPercentageRM": {
      "type": "object",
      "properties": {
        "Category": {
          "enum": [
            "BILLSUTILITIES",
            "CASH",
            "ENTERTAINMENT",
            "HEALTH",
            "HOUSEHOLD",
            "RENT",
            "GROCERIES",
            "SHOPPING",
            "TAXES",
            "TRAVEL",
            "INCOME",
            "OTHER",
            "CREDITCARDLOAN",
            "TRANSFER",
            "INSURANCE",
            "PERSONALCARE",
            "CONTRIBUTION",
            "INVESTMENT",
            "BENEFICIARY",
            "EDUCATION"
          ],
          "type": "string"
        },
        "Percentage": {
          "format": "double",
          "type": "number"
        },
        "Amount": {
          "$ref": "#/definitions/Money"
        },
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "LifeStyleCategoryPercentageRM"
    },
    "TaxTrancheSelector": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Country": {
          "$ref": "#/definitions/Countries"
        }
      },
      "title": "TaxTrancheSelector"
    },
    "CustodianApplication": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "ApplicationNumber": {
          "type": "string"
        },
        "PortfolioId": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR"
          ],
          "type": "string"
        },
        "AccountType_Id": {
          "type": "string"
        },
        "AccountType": {
          "$ref": "#/definitions/AccountType"
        },
        "AccountHolderType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4
          ],
          "type": "integer"
        },
        "RiskScore": {
          "format": "int32",
          "type": "integer"
        },
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "IsUkResidentForCurrentTaxYear": {
          "type": "boolean"
        },
        "IsUkEarningsSubjectToUkTax": {
          "type": "boolean"
        },
        "IsCrownServant": {
          "type": "boolean"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "SubmittedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Request": {
          "type": "string"
        },
        "Response": {
          "type": "string"
        },
        "ExpressionOfWish": {
          "type": "string"
        },
        "Custodian": {
          "$ref": "#/definitions/Custodian"
        },
        "Custodian_Id": {
          "type": "string"
        },
        "NominatedBankAccount": {
          "$ref": "#/definitions/BankAccount"
        },
        "CurrentEmployer": {
          "$ref": "#/definitions/ProfileEnterprise"
        },
        "Profile": {
          "$ref": "#/definitions/Profile"
        },
        "Profile_Id": {
          "type": "string"
        },
        "RelatedProfileAllocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedProfileAllocation"
          }
        },
        "Goal": {
          "$ref": "#/definitions/Goals"
        },
        "Goal_Id": {
          "type": "string"
        },
        "DirectDebitStartDate": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        }
      },
      "title": "CustodianApplication"
    },
    "AccountType": {
      "required": [
        "Name",
        "Label"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "AccountCategory_Name": {
          "type": "string"
        },
        "Category": {
          "$ref": "#/definitions/AccountCategory"
        },
        "CountriesAvailability": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Countries"
          }
        }
      },
      "title": "AccountType"
    },
    "Custodian": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Address1": {
          "type": "string"
        },
        "Address2": {
          "type": "string"
        },
        "PostCode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "Active": {
          "type": "boolean"
        },
        "Configuration": {
          "type": "string"
        }
      },
      "title": "Custodian"
    },
    "BankAccount": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "BankName": {
          "type": "string"
        },
        "AccountName": {
          "type": "string"
        },
        "AccountNumber": {
          "type": "string"
        },
        "SortCode": {
          "type": "string"
        },
        "Profile": {
          "$ref": "#/definitions/Profile"
        },
        "Profile_Id": {
          "type": "string"
        },
        "Country": {
          "$ref": "#/definitions/Countries"
        },
        "Country_Id": {
          "type": "string"
        },
        "IsAccountHolder": {
          "type": "boolean"
        },
        "IsAuthorizeDebits": {
          "type": "boolean"
        },
        "FinancialAccount_Id": {
          "type": "string"
        }
      },
      "title": "BankAccount"
    },
    "RelatedProfileAllocation": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "AllocationPercentage": {
          "format": "double",
          "type": "number"
        },
        "RelatedProfile": {
          "$ref": "#/definitions/RelatedProfile"
        }
      },
      "title": "RelatedProfileAllocation"
    },
    "Goals": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Portfolio_Id": {
          "type": "string"
        },
        "Portfolio": {
          "$ref": "#/definitions/PortfoliosInfos"
        },
        "User_Id": {
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ExpectedValue": {
          "$ref": "#/definitions/Money"
        },
        "Country_Id": {
          "type": "string"
        },
        "LumpSum": {
          "$ref": "#/definitions/Money"
        },
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "Income": {
          "$ref": "#/definitions/Money"
        },
        "Expenses": {
          "$ref": "#/definitions/Money"
        },
        "RetirementIncomeYear": {
          "format": "double",
          "type": "number"
        },
        "EmployeeMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "EmployerMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "MonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "HowManyYearWorked": {
          "format": "double",
          "type": "number"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192,
            16384,
            32768,
            65536,
            131072,
            -1
          ],
          "type": "integer"
        },
        "GoalType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            -1
          ],
          "type": "integer"
        },
        "Priority": {
          "format": "int32",
          "type": "integer"
        },
        "Status": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR"
          ],
          "type": "string"
        },
        "HowManyYearStart": {
          "format": "int32",
          "type": "integer"
        },
        "Cost": {
          "$ref": "#/definitions/Money"
        },
        "DurationYear": {
          "format": "double",
          "type": "number"
        },
        "UserOptions": {
          "type": "string"
        },
        "CustomLifeStylesCategoryAmounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomLifeStyleCategoryAmount"
          }
        },
        "LifeStyle_Id": {
          "type": "string"
        },
        "LifeStyle": {
          "$ref": "#/definitions/LifeStyle"
        },
        "GlobalAssetAllocation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetAllocationItem"
          }
        },
        "FirstMonthlyStatePension": {
          "$ref": "#/definitions/Money"
        },
        "TotalAccumulatedCapital": {
          "$ref": "#/definitions/Money"
        },
        "Tag": {
          "type": "string"
        },
        "StatusChangeReason": {
          "type": "string"
        },
        "UseDefaultPortfolio": {
          "type": "boolean"
        }
      },
      "title": "Goals"
    },
    "RelatedProfile": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "RelatedProfileType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer",
          "readOnly": true
        },
        "RelatedProfileLinkType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer",
          "readOnly": true
        },
        "Title": {
          "type": "string",
          "readOnly": true
        },
        "LastName": {
          "type": "string",
          "readOnly": true
        },
        "FirstName": {
          "type": "string",
          "readOnly": true
        },
        "MiddleName": {
          "type": "string",
          "readOnly": true
        },
        "Gender": {
          "enum": [
            "None",
            "Male",
            "Female"
          ],
          "type": "string",
          "readOnly": true
        },
        "BirthDate": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "CountryOfBirth": {
          "$ref": "#/definitions/Countries",
          "readOnly": true
        },
        "USCitizen": {
          "type": "boolean",
          "readOnly": true
        },
        "Nin": {
          "type": "string",
          "readOnly": true
        },
        "AlternateTaxIdentificationNumber": {
          "type": "string",
          "readOnly": true
        },
        "IndividualRelationship": {
          "type": "string",
          "readOnly": true
        },
        "CorporateName": {
          "type": "string",
          "readOnly": true
        },
        "CorporateNumber": {
          "type": "string",
          "readOnly": true
        },
        "TrustIncorporationDate": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "Address1": {
          "type": "string",
          "readOnly": true
        },
        "Address2": {
          "type": "string",
          "readOnly": true
        },
        "PostCode": {
          "type": "string",
          "readOnly": true
        },
        "City": {
          "type": "string",
          "readOnly": true
        },
        "County": {
          "type": "string",
          "readOnly": true
        },
        "Country": {
          "$ref": "#/definitions/Countries"
        },
        "CountryOfTaxOrigin": {
          "$ref": "#/definitions/Countries",
          "readOnly": true
        },
        "Email": {
          "type": "string",
          "readOnly": true
        },
        "PhoneNumber": {
          "type": "string",
          "readOnly": true
        },
        "Profile": {
          "$ref": "#/definitions/Profile",
          "readOnly": true
        }
      },
      "title": "RelatedProfile"
    },
    "PortfoliosInfos": {
      "required": [
        "EnterpriseName"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Volatility": {
          "format": "double",
          "type": "number"
        },
        "Number": {
          "format": "int32",
          "type": "integer"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "SimulationKey": {
          "type": "string"
        },
        "EnterpriseName": {
          "type": "string"
        }
      },
      "title": "PortfoliosInfos"
    },
    "CustomLifeStyleCategoryAmount": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Category": {
          "enum": [
            "BILLSUTILITIES",
            "CASH",
            "ENTERTAINMENT",
            "HEALTH",
            "HOUSEHOLD",
            "RENT",
            "GROCERIES",
            "SHOPPING",
            "TAXES",
            "TRAVEL",
            "INCOME",
            "OTHER",
            "CREDITCARDLOAN",
            "TRANSFER",
            "INSURANCE",
            "PERSONALCARE",
            "CONTRIBUTION",
            "INVESTMENT",
            "BENEFICIARY",
            "EDUCATION"
          ],
          "type": "string"
        },
        "Amount": {
          "$ref": "#/definitions/Money"
        },
        "Goal_Id": {
          "type": "string"
        }
      },
      "title": "CustomLifeStyleCategoryAmount"
    },
    "LifeStyle": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Country_Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "MonthlyTargetIncome": {
          "$ref": "#/definitions/Money"
        },
        "MinNetIncomeBracket": {
          "$ref": "#/definitions/Money"
        },
        "MaxNetIncomeBracket": {
          "$ref": "#/definitions/Money"
        },
        "PropensityToConsume": {
          "format": "double",
          "type": "number"
        },
        "PercentageByCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LifeStyleCategoryPercentage"
          }
        }
      },
      "title": "LifeStyle"
    },
    "LifeStyleCategoryPercentage": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Category": {
          "enum": [
            "BILLSUTILITIES",
            "CASH",
            "ENTERTAINMENT",
            "HEALTH",
            "HOUSEHOLD",
            "RENT",
            "GROCERIES",
            "SHOPPING",
            "TAXES",
            "TRAVEL",
            "INCOME",
            "OTHER",
            "CREDITCARDLOAN",
            "TRANSFER",
            "INSURANCE",
            "PERSONALCARE",
            "CONTRIBUTION",
            "INVESTMENT",
            "BENEFICIARY",
            "EDUCATION"
          ],
          "type": "string"
        },
        "Percentage": {
          "format": "double",
          "type": "number"
        },
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "LifeStyleCategoryPercentage"
    },
    "CustodianApplicationModel": {
      "type": "object",
      "properties": {
        "goalId": {
          "type": "string"
        },
        "bankAccountId": {
          "type": "string"
        },
        "contributionStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "applicationId": {
          "type": "string"
        }
      },
      "title": "CustodianApplicationModel"
    },
    "SaveBankAccountModel": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/BankAccount"
        },
        "applicationId": {
          "type": "string"
        }
      },
      "title": "SaveBankAccountModel"
    },
    "DocumentRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "FileName": {
          "type": "string"
        },
        "Type": {
          "enum": [
            "NONE",
            "TRANSFER_FORM",
            "SUITABILITY_REPORT",
            "PROOF_OF_IDENTITY",
            "ANNUITY_ATTACHMENT",
            "PENSION_TRACING_FORM",
            "DRAWDOWN_ATTACHMENT",
            "WITHDRAW_ATTACHMENT",
            "KEEPINVESTED_ATTACHMENT",
            "IFA_APPOINTMENT_REPORT",
            "COMPLETION_CERTIFICATE",
            "DRAWDOWN_APPLICATION_FORM",
            "FLAG_INTERNAL"
          ],
          "type": "string"
        },
        "LastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ProfileId": {
          "type": "string"
        }
      },
      "title": "DocumentRM"
    },
    "EmployerRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "UniqueName": {
          "type": "string"
        },
        "AlternativesNames": {
          "type": "string"
        }
      },
      "title": "EmployerRM"
    },
    "EnterpriseRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "UniqueName": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "ResellerName": {
          "type": "string"
        },
        "Country": {
          "$ref": "#/definitions/ShortCountryRM"
        }
      },
      "title": "EnterpriseRM"
    },
    "CurrentEmployerInfoModel": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "DCEmployerMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "DBRetirementIncome": {
          "$ref": "#/definitions/Money"
        },
        "DBRetirementAge": {
          "format": "double",
          "type": "number"
        }
      },
      "title": "CurrentEmployerInfoModel"
    },
    "EmployerViewModel": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "EmployerName": {
          "type": "string"
        },
        "UniqueName": {
          "type": "string"
        },
        "AlternativesNames": {
          "type": "string"
        },
        "Schemes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PensionSchemeViewModel"
          }
        }
      },
      "title": "EmployerViewModel"
    },
    "PensionSchemeViewModel": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "PreviousNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PreviousNamesJson": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "PensionProvider": {
          "$ref": "#/definitions/Provider"
        }
      },
      "title": "PensionSchemeViewModel"
    },
    "ContributionDetailsModel": {
      "type": "object",
      "properties": {
        "EmployeeMonthlyContributionAmount": {
          "$ref": "#/definitions/Money"
        },
        "EmployerMonthlyContributionAmount": {
          "$ref": "#/definitions/Money"
        },
        "EmployeeMonthlyContributionPercent": {
          "format": "double",
          "type": "number"
        },
        "EmployerMonthlyContributionPercent": {
          "format": "double",
          "type": "number"
        },
        "TaxReliefPercentage": {
          "format": "double",
          "type": "number"
        },
        "TaxReliefMonthly": {
          "$ref": "#/definitions/Money",
          "readOnly": true
        },
        "TotalContributionPercentage": {
          "format": "double",
          "type": "number",
          "readOnly": true
        },
        "EmployeeMonthlyContributionWithTaxRelief": {
          "$ref": "#/definitions/Money",
          "readOnly": true
        },
        "TotalMonthlyContribution": {
          "$ref": "#/definitions/Money",
          "readOnly": true
        },
        "TopUpPerUnitCurrency": {
          "$ref": "#/definitions/Money",
          "readOnly": true
        }
      },
      "title": "ContributionDetailsModel"
    },
    "CustomEmployerPensionSchemeData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "percentOptions": {
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "hasLengthOfServiceBonus": {
          "type": "boolean"
        },
        "matchingRule": {
          "type": "string"
        },
        "defaultEmployerContributionPercent": {
          "format": "double",
          "type": "number"
        },
        "defaultEmployeeContributionPercent": {
          "format": "double",
          "type": "number"
        }
      },
      "title": "CustomEmployerPensionSchemeData"
    },
    "EmploymentHistoryCreationRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AccountType": {
          "type": "string"
        },
        "Employers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TracingEmployerRM"
          }
        },
        "NINumber": {
          "type": "string"
        },
        "MaidenName": {
          "type": "string"
        },
        "IsMale": {
          "type": "boolean"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "DateOfBirth": {
          "format": "date-time",
          "type": "string"
        },
        "DateOfCreation": {
          "format": "date-time",
          "type": "string"
        },
        "SaveProfileInfo": {
          "type": "boolean"
        },
        "StartTracing": {
          "type": "boolean"
        },
        "RedirectUrlAfterSign": {
          "type": "string"
        },
        "PostCode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Address1": {
          "type": "string"
        },
        "Address2": {
          "type": "string"
        }
      },
      "title": "EmploymentHistoryCreationRM"
    },
    "TracingEmployerRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "User_Id": {
          "type": "string"
        },
        "TracingId": {
          "type": "string"
        },
        "AIPEmployerId": {
          "type": "string"
        },
        "UniqueName": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "CurrentEmployer": {
          "type": "boolean"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "AccountType": {
          "$ref": "#/definitions/AccountType"
        },
        "ProfileTransactionId": {
          "type": "string"
        },
        "HistoryProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TracingProviderRM"
          }
        }
      },
      "title": "TracingEmployerRM"
    },
    "TracingProviderRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "User_Id": {
          "type": "string"
        },
        "AIPProviderId": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "PolicyNumber": {
          "type": "string"
        },
        "Favicon": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "UNLINKED",
            "LINKED",
            "UNAVAILABLE"
          ],
          "type": "string"
        },
        "SignatureType": {
          "enum": [
            "WetInk",
            "Digital",
            "All"
          ],
          "type": "string"
        },
        "EmploymentHistory_Id": {
          "type": "string"
        },
        "ProfileTransactionId": {
          "type": "string"
        },
        "TracingId": {
          "type": "string"
        },
        "TracingStep": {
          "enum": [
            "NONE",
            "INITIATED",
            "WAITING_LOA",
            "PROCESSING_LOA",
            "TRACING",
            "CANCELLED",
            "TRACED",
            "ABANDONED"
          ],
          "type": "string"
        }
      },
      "title": "TracingProviderRM"
    },
    "DeleteEmploymentHistoryModel": {
      "type": "object",
      "properties": {
        "ProviderId": {
          "type": "string"
        },
        "HistoryId": {
          "type": "string"
        }
      },
      "title": "DeleteEmploymentHistoryModel"
    },
    "TracingItemRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "User_Id": {
          "type": "string"
        },
        "AIPProviderId": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "Favicon": {
          "type": "string"
        },
        "PolicyNumber": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "UNLINKED",
            "LINKED",
            "UNAVAILABLE"
          ],
          "type": "string"
        },
        "TracingStep": {
          "enum": [
            "NONE",
            "INITIATED",
            "WAITING_LOA",
            "PROCESSING_LOA",
            "TRACING",
            "CANCELLED",
            "TRACED",
            "ABANDONED"
          ],
          "type": "string"
        },
        "SignatureType": {
          "enum": [
            "WetInk",
            "Digital",
            "All"
          ],
          "type": "string"
        },
        "EmploymentHistory_Id": {
          "type": "string"
        },
        "ProfileTransactionId": {
          "type": "string"
        },
        "TracingId": {
          "type": "string"
        },
        "EmploymentHistory": {
          "$ref": "#/definitions/TracingParentRM"
        },
        "ProfileTransactionStatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        },
        "ModificationDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "TracingItemRM"
    },
    "TracingParentRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "User_Id": {
          "type": "string"
        },
        "TracingId": {
          "type": "string"
        },
        "AIPEmployerId": {
          "type": "string"
        },
        "UniqueName": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "CurrentEmployer": {
          "type": "boolean"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "AccountType": {
          "$ref": "#/definitions/AccountType"
        },
        "ProfileTransactionId": {
          "type": "string"
        }
      },
      "title": "TracingParentRM"
    },
    "UpdateEmploymentHistoryModel": {
      "type": "object",
      "properties": {
        "TracingStep": {
          "enum": [
            "NONE",
            "INITIATED",
            "WAITING_LOA",
            "PROCESSING_LOA",
            "TRACING",
            "CANCELLED",
            "TRACED",
            "ABANDONED"
          ],
          "type": "string"
        }
      },
      "title": "UpdateEmploymentHistoryModel"
    },
    "TracingDocumentsRM": {
      "type": "object",
      "properties": {
        "SignatureType": {
          "enum": [
            "WetInk",
            "Digital",
            "All"
          ],
          "type": "string"
        },
        "DocumentId": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        },
        "ProviderId": {
          "type": "string"
        },
        "ProviderDisplayName": {
          "type": "string"
        }
      },
      "title": "TracingDocumentsRM"
    },
    "EnterpriseResourceRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        },
        "Language": {
          "$ref": "#/definitions/Language"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            511,
            512,
            1024,
            2048
          ],
          "type": "integer"
        },
        "EnterpriseName": {
          "type": "string"
        }
      },
      "title": "EnterpriseResourceRM"
    },
    "EnterprisePolicyRM": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Style": {
          "type": "string"
        },
        "EnterpriseUniqueName": {
          "type": "string"
        },
        "CustomStyle": {
          "type": "string"
        },
        "DefaultLanguageCode": {
          "type": "string"
        },
        "DeepLink": {
          "$ref": "#/definitions/DeepLink"
        }
      },
      "title": "EnterprisePolicyRM"
    },
    "DeepLink": {
      "type": "object",
      "properties": {
        "FallbackUrl": {
          "type": "string"
        },
        "AndroidFallbackUrl": {
          "type": "string"
        },
        "IOSFallbackUrl": {
          "type": "string"
        }
      },
      "title": "DeepLink"
    },
    "FeatureBotIntentModel": {
      "type": "object",
      "properties": {
        "FeatureName": {
          "type": "string"
        },
        "Intents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "FeatureBotIntentModel"
    },
    "ProfileEnterpriseRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Enterprise": {
          "$ref": "#/definitions/EnterpriseRM"
        },
        "EmploymentStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EmploymentEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "Current": {
          "type": "boolean"
        },
        "GrossSalary": {
          "$ref": "#/definitions/Money"
        },
        "FullTime": {
          "type": "boolean"
        },
        "BasicPayFrequency": {
          "format": "int32",
          "type": "integer"
        },
        "Commissions": {
          "$ref": "#/definitions/Money"
        },
        "OvertimePay": {
          "$ref": "#/definitions/Money"
        },
        "OccupationId": {
          "type": "string"
        },
        "EmployeeId": {
          "type": "string"
        }
      },
      "title": "ProfileEnterpriseRM"
    },
    "TransactionEmail": {
      "type": "object",
      "properties": {
        "TemplateKey": {
          "type": "string"
        },
        "Subject": {
          "type": "string"
        },
        "Substitutions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "EmailTo": {
          "type": "string"
        },
        "defaultTemplateID": {
          "type": "string"
        },
        "EnterpriseUniqueName": {
          "type": "string"
        }
      },
      "title": "TransactionEmail"
    },
    "EnterpriseSelectorConfigurationRM": {
      "type": "object",
      "properties": {
        "AIPAutomationDisabled": {
          "type": "boolean"
        },
        "ManualEstimateRetirementIncome": {
          "type": "boolean"
        },
        "GoalTypesUnavailable": {
          "format": "int32",
          "type": "integer"
        },
        "MenuItemsUnavailable": {
          "format": "int32",
          "type": "integer"
        },
        "IsLGPSMember": {
          "type": "boolean"
        },
        "IsAVARegulatedAdviceProvided": {
          "type": "boolean"
        },
        "AvaRegulatedAdvicePricing": {
          "format": "int32",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "IFARegulatedAdviceType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "IFARegulatedAdvicePlan": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "IsIntelligentPredictEnabled": {
          "type": "boolean"
        },
        "AppointmentConfig": {
          "$ref": "#/definitions/AppointmentConfig"
        },
        "CustomStyle": {
          "type": "string"
        },
        "AdaptiveCardStyle": {
          "type": "object"
        },
        "DefaultAccountPortfolioNumber": {
          "format": "int32",
          "type": "integer"
        },
        "DefaultProviderIdentifier": {
          "$ref": "#/definitions/ProviderIdentifier"
        },
        "AboutDetails": {
          "$ref": "#/definitions/AboutDetails"
        },
        "Policy": {
          "$ref": "#/definitions/B2CPolicy"
        },
        "ExternalLinksCTA": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OneSignalAppId": {
          "type": "string"
        },
        "OneSignalAppSecret": {
          "type": "string"
        },
        "KcFixedButtons": {
          "type": "boolean"
        },
        "PublishCampaignsPipeline": {
          "type": "string"
        },
        "NudgeCallbackPipeline": {
          "type": "string"
        },
        "IsMenuGoalAvailable": {
          "type": "boolean"
        },
        "IsMenuFinancialProfileAvailable": {
          "type": "boolean"
        },
        "IsMenuFindTransferAvailable": {
          "type": "boolean"
        },
        "IsMenuKnowledgeAvailable": {
          "type": "boolean"
        },
        "IsMenuLinkAccountsAvailable": {
          "type": "boolean"
        },
        "IsMenuPersonalProfileAvailable": {
          "type": "boolean"
        },
        "IsMenuPaymentsAvailable": {
          "type": "boolean"
        },
        "IsBudgetGoalAvailable": {
          "type": "boolean"
        },
        "IsBuyGiftAvailable": {
          "type": "boolean"
        },
        "IsChildrenEducationAvailable": {
          "type": "boolean"
        },
        "IsEmergencyFundAvailable": {
          "type": "boolean"
        },
        "IsGeneralInvestingAvailable": {
          "type": "boolean"
        },
        "IsMortgageAvailable": {
          "type": "boolean"
        },
        "IsPayOffDebtAvailable": {
          "type": "boolean"
        },
        "IsPlanWeddingAvailable": {
          "type": "boolean"
        },
        "IsSaveFamilyEventAvailable": {
          "type": "boolean"
        },
        "IsSaveForCarAvailable": {
          "type": "boolean"
        },
        "IsSaveForChristmasAvailable": {
          "type": "boolean"
        },
        "IsSaveForHouseAvailable": {
          "type": "boolean"
        },
        "IsSaveHolidayAvailable": {
          "type": "boolean"
        },
        "IsSaveRetirementAvailable": {
          "type": "boolean"
        },
        "IsOptimiseRetirementIncomeAvailable": {
          "type": "boolean"
        }
      },
      "title": "EnterpriseSelectorConfigurationRM"
    },
    "AppointmentConfig": {
      "type": "object",
      "properties": {
        "AppointmentBookingServiceName": {
          "type": "string"
        },
        "CancellationNoticeDays": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "AppointmentConfig"
    },
    "ProviderIdentifier": {
      "type": "object",
      "properties": {
        "LinkServiceProviderId": {
          "type": "string"
        },
        "LinkServiceId": {
          "type": "string"
        }
      },
      "title": "ProviderIdentifier"
    },
    "AboutDetails": {
      "type": "object",
      "properties": {
        "ContactUs": {
          "type": "string"
        },
        "TermsConditions": {
          "type": "string"
        },
        "RiskWarning": {
          "type": "string"
        },
        "FAQ": {
          "type": "string"
        },
        "AssetsUnderManagement": {
          "$ref": "#/definitions/Money"
        },
        "NumberOfClients": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "AboutDetails"
    },
    "B2CPolicy": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Style": {
          "type": "string"
        },
        "EnterpriseUniqueName": {
          "type": "string"
        },
        "CustomStyle": {
          "type": "string"
        }
      },
      "title": "B2CPolicy"
    },
    "EnterpriseCredentialModel": {
      "type": "object",
      "properties": {
        "AppId": {
          "type": "string"
        },
        "AppSecret": {
          "type": "string"
        }
      },
      "title": "EnterpriseCredentialModel"
    },
    "OccupationRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Code": {
          "type": "string"
        },
        "JobTitle": {
          "type": "string"
        },
        "Sector": {
          "type": "string"
        },
        "Order": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "OccupationRM"
    },
    "EnterpriseCustomerViewModel": {
      "type": "object",
      "properties": {
        "Email": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "PinCode": {
          "type": "string"
        },
        "Nin": {
          "type": "string"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "Address": {
          "type": "string"
        },
        "Postcode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Gender": {
          "format": "int32",
          "type": "integer"
        },
        "BirthDate": {
          "format": "date-time",
          "type": "string"
        },
        "AlternativeIdentifier": {
          "type": "string"
        }
      },
      "title": "EnterpriseCustomerViewModel"
    },
    "PagingModel[EnterpriseCustomer]": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnterpriseCustomer"
          }
        },
        "totalResults": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "PagingModel[EnterpriseCustomer]"
    },
    "EnterpriseCustomer": {
      "type": "object",
      "properties": {
        "CustomerId": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "Address1": {
          "type": "string"
        },
        "Address2": {
          "type": "string"
        },
        "Postcode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Gender": {
          "format": "int32",
          "type": "integer"
        },
        "BirthDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "EnterpriseCustomer"
    },
    "DiagnosticsModel": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "MoneyNavigatorImage": {
          "type": "string"
        },
        "AssumptionInformation": {
          "$ref": "#/definitions/AssumptionInformation"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticResult"
          }
        },
        "Remarks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "DiagnosticsModel"
    },
    "AssumptionInformation": {
      "type": "object",
      "properties": {
        "InformationIconText": {
          "type": "string"
        },
        "InformationIconTextBold": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "GrossSalaryAmount": {
          "type": "string"
        },
        "GrossSalaryTitle": {
          "type": "string"
        },
        "MonthlyExpensesAmount": {
          "type": "string"
        },
        "MonthlyExpensesTitle": {
          "type": "string"
        },
        "MonthlyExpensesDescriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MonthlyExpensesButtonTitle": {
          "type": "string"
        },
        "MonthlyExpensesButtonUrl": {
          "type": "string"
        },
        "SavingsAmount": {
          "type": "string"
        },
        "SavingsTitle": {
          "type": "string"
        },
        "SavingsButtonTitle": {
          "type": "string"
        },
        "SavingsButtonUrl": {
          "type": "string"
        },
        "ActionPlanFormulationTitle": {
          "type": "string"
        },
        "ActionPlanFormulationDescriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SavingsDescription": {
          "type": "string"
        },
        "ChatTitle": {
          "type": "string"
        },
        "ChatDescriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "GrossSalaryDescriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "AssumptionInformation"
    },
    "DiagnosticResult": {
      "type": "object",
      "properties": {
        "Category": {
          "type": "string"
        },
        "Rank": {
          "format": "int32",
          "type": "integer"
        },
        "Level": {
          "enum": [
            "UNKNOWN",
            "INVALID",
            "GREEN",
            "AMBER",
            "RED"
          ],
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Reco": {
          "type": "string"
        },
        "Reco1": {
          "type": "string"
        },
        "Cta": {
          "type": "string"
        },
        "Active": {
          "type": "boolean"
        },
        "TileColor": {
          "type": "string"
        },
        "BtnTitle": {
          "type": "string"
        },
        "TileImage": {
          "type": "string"
        },
        "TileImageDataType": {
          "type": "string"
        }
      },
      "title": "DiagnosticResult"
    },
    "RiskProfileFormElement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "order": {
          "type": "string"
        },
        "sectionId": {
          "type": "string"
        },
        "questionId": {
          "type": "string"
        },
        "rpPoints": {
          "format": "int32",
          "type": "integer"
        },
        "gbiPoints": {
          "format": "int32",
          "type": "integer"
        },
        "selected": {
          "type": "boolean"
        }
      },
      "title": "RiskProfileFormElement"
    },
    "RiskProfilingResponseRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "RiskProfilingForm": {
          "$ref": "#/definitions/RiskProfilingForm"
        },
        "Content": {
          "type": "string"
        },
        "RpScore": {
          "format": "int32",
          "type": "integer"
        },
        "GbiScore": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "RiskProfilingResponseRM"
    },
    "RiskProfilingForm": {
      "required": [
        "EnterpriseName"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Content": {
          "type": "string"
        },
        "Published": {
          "type": "boolean"
        },
        "EnterpriseName": {
          "type": "string"
        },
        "Enterprise": {
          "$ref": "#/definitions/Enterprise"
        },
        "MinutesValidity": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "RiskProfilingForm"
    },
    "RiskGrade": {
      "type": "object",
      "properties": {
        "Value": {
          "format": "int32",
          "type": "integer"
        },
        "Label": {
          "type": "string"
        }
      },
      "title": "RiskGrade"
    },
    "EstimatedRemainingAnnualAllowanceModel": {
      "type": "object",
      "properties": {
        "TotalPaidIn": {
          "$ref": "#/definitions/Money"
        },
        "RemainingAnnualAllowance": {
          "$ref": "#/definitions/Money"
        },
        "IdealEmployeeContribution": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "EstimatedRemainingAnnualAllowanceModel"
    },
    "EstimatedTotalPaidInModel": {
      "type": "object",
      "properties": {
        "AccountId": {
          "type": "string"
        },
        "EmployerContribution": {
          "$ref": "#/definitions/Money"
        },
        "EmployeeContribution": {
          "$ref": "#/definitions/Money"
        },
        "TopUp": {
          "$ref": "#/definitions/Money"
        },
        "Balance": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "EstimatedTotalPaidInModel"
    },
    "EstimateRetirementIncomeForPensionModel": {
      "type": "object",
      "properties": {
        "TotalAccumulatedCapital": {
          "$ref": "#/definitions/Money"
        },
        "RetirementIncome": {
          "$ref": "#/definitions/Money"
        },
        "CashValue": {
          "$ref": "#/definitions/Money"
        },
        "Datas": {
          "type": "string"
        },
        "LumpSumValue": {
          "$ref": "#/definitions/Money"
        },
        "LumpSumRate": {
          "$ref": "#/definitions/Money"
        },
        "EmployeeMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "EmployerMonthlyContribution": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "EstimateRetirementIncomeForPensionModel"
    },
    "FinancialAccount": {
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Balance": {
          "$ref": "#/definitions/Money"
        },
        "Name": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR"
          ],
          "type": "string"
        },
        "ProviderAccount": {
          "$ref": "#/definitions/ProviderAccount"
        },
        "LinkServiceAccountId": {
          "type": "string"
        },
        "AccountNumber": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "AccountType_Id": {
          "type": "string"
        },
        "AccountType": {
          "$ref": "#/definitions/AccountType"
        },
        "Transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountTransaction"
          }
        },
        "AssetLines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetLine"
          }
        },
        "GlobalAssetAllocation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetAllocationItem"
          }
        },
        "IsActive": {
          "type": "boolean"
        },
        "EmployeeMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "EmployerMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "TotalContributionsToDate": {
          "$ref": "#/definitions/Money"
        },
        "LastContribution": {
          "format": "date-time",
          "type": "string"
        },
        "InvestmentReturn": {
          "format": "double",
          "type": "number"
        },
        "ForecastedAnnualRetirementIncome": {
          "$ref": "#/definitions/Money"
        },
        "PlatformFee": {
          "format": "double",
          "type": "number"
        },
        "EmployerId": {
          "type": "string"
        },
        "EmployerName": {
          "type": "string"
        },
        "SchemeId": {
          "type": "string"
        },
        "SchemeName": {
          "type": "string"
        },
        "RiskGrade": {
          "format": "int32",
          "maximum": 10,
          "minimum": 0,
          "type": "integer"
        },
        "TaxFreeCashLumpSum": {
          "$ref": "#/definitions/Money"
        },
        "EmploymentStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EmploymentEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "FinalPensionableSalary": {
          "$ref": "#/definitions/Money"
        },
        "BenefitType": {
          "type": "string"
        },
        "SchemeJoinedDate": {
          "format": "date-time",
          "type": "string"
        },
        "SchemeLeftDate": {
          "format": "date-time",
          "type": "string"
        },
        "CustomData": {
          "type": "string"
        },
        "Cash": {
          "$ref": "#/definitions/Money"
        },
        "AssociatedAccount_Id": {
          "type": "string"
        },
        "AvailableBalance": {
          "$ref": "#/definitions/Money"
        },
        "Overdraft": {
          "$ref": "#/definitions/Money"
        },
        "IsDeleted": {
          "type": "boolean"
        }
      },
      "title": "FinancialAccount"
    },
    "AssetLine": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AssetID": {
          "type": "string"
        },
        "AssetName": {
          "type": "string"
        },
        "UnitHeld": {
          "format": "double",
          "type": "number"
        },
        "UnitPrice": {
          "$ref": "#/definitions/Money"
        },
        "OverallValue": {
          "$ref": "#/definitions/Money"
        },
        "LastRefreshed": {
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "AssetLine"
    },
    "Tuple[Double,String]": {
      "type": "object",
      "properties": {
        "Item1": {
          "format": "double",
          "type": "number",
          "readOnly": true
        },
        "Item2": {
          "type": "string",
          "readOnly": true
        }
      },
      "title": "Tuple[Double,String]"
    },
    "WeeklyStatePensionModel": {
      "type": "object",
      "properties": {
        "howManyYearsWorked": {
          "format": "double",
          "type": "number"
        },
        "retirementAge": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "WeeklyStatePensionModel"
    },
    "MonthlyTopUpPensionContributionsModel": {
      "type": "object",
      "properties": {
        "linkServiceProviderId": {
          "type": "string"
        },
        "employerUniqueName": {
          "type": "string"
        },
        "employeeMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "linkServiceId": {
          "type": "string"
        }
      },
      "title": "MonthlyTopUpPensionContributionsModel"
    },
    "GetAccumulatedCapitalModel": {
      "type": "object",
      "properties": {
        "LumpSum": {
          "$ref": "#/definitions/Money"
        },
        "MonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "PortfolioNumber": {
          "format": "int32",
          "type": "integer"
        },
        "DurationYear": {
          "format": "double",
          "type": "number"
        },
        "NoMonthEnd": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "GetAccumulatedCapitalModel"
    },
    "MonthlyIncomeFromAge": {
      "type": "object",
      "properties": {
        "FromAge": {
          "format": "int32",
          "type": "integer"
        },
        "MonthlyIncome": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "MonthlyIncomeFromAge"
    },
    "Tuple[Int32,Money]": {
      "type": "object",
      "properties": {
        "Item1": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Item2": {
          "$ref": "#/definitions/Money",
          "readOnly": true
        }
      },
      "title": "Tuple[Int32,Money]"
    },
    "CalculatedCashVsInvestmentModel": {
      "type": "object",
      "properties": {
        "TotalAccumulatedCapital": {
          "$ref": "#/definitions/Money"
        },
        "TotalAccumulatedCapitalToCompare": {
          "$ref": "#/definitions/Money"
        },
        "CashValue": {
          "$ref": "#/definitions/Money"
        },
        "Datas": {
          "type": "string"
        },
        "DatasMaximum": {
          "type": "string"
        },
        "DatasMinimum": {
          "type": "string"
        },
        "DatasToCompare": {
          "type": "string"
        },
        "DatasToCompareMaximum": {
          "type": "string"
        },
        "DatasToCompareMinimum": {
          "type": "string"
        },
        "Portfolios": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "AssetAllocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tuple[Double,String]"
          }
        },
        "NextUrl": {
          "type": "string"
        },
        "DefaultTotalBalance": {
          "format": "double",
          "type": "number"
        },
        "ISIN": {
          "type": "string"
        }
      },
      "title": "CalculatedCashVsInvestmentModel"
    },
    "GoalRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192,
            16384,
            32768,
            65536,
            131072,
            -1
          ],
          "type": "integer"
        },
        "GoalType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            -1
          ],
          "type": "integer"
        },
        "Priority": {
          "format": "int32",
          "type": "integer"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR"
          ],
          "type": "string"
        },
        "Portfolio": {
          "$ref": "#/definitions/PortfolioInfosRM"
        },
        "GlobalAssetAllocation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetAllocationItem"
          }
        },
        "EmployeeMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "EmployerMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "MonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "ExpectedValue": {
          "$ref": "#/definitions/Money"
        },
        "HowManyYearWorked": {
          "format": "double",
          "type": "number"
        },
        "FirstMonthlyStatePension": {
          "$ref": "#/definitions/Money"
        },
        "RetirementIncomeYear": {
          "format": "double",
          "type": "number"
        },
        "CustomLifeStylesCategoryAmounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomLifeStylesCategoryAmountRM"
          }
        },
        "LifeStyle": {
          "$ref": "#/definitions/LifeStyleRM"
        },
        "Cost": {
          "$ref": "#/definitions/Money"
        },
        "DurationYear": {
          "format": "double",
          "type": "number"
        },
        "TotalAccumulatedCapital": {
          "$ref": "#/definitions/Money"
        },
        "LumpSum": {
          "$ref": "#/definitions/Money"
        },
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "Income": {
          "$ref": "#/definitions/Money"
        },
        "Expenses": {
          "$ref": "#/definitions/Money"
        },
        "HowManyYearStart": {
          "format": "int32",
          "type": "integer"
        },
        "UserOptions": {
          "type": "string"
        },
        "UseDefaultPortfolio": {
          "type": "boolean"
        },
        "GoalStatus": {
          "enum": [
            "OffTrack",
            "MovingAtPace",
            "Exceeding",
            "Completed",
            "Pending"
          ],
          "type": "string"
        },
        "IdealAccumulatedCapital": {
          "$ref": "#/definitions/Money"
        },
        "TaxRebate": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "GoalRM"
    },
    "PortfolioInfosRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Volatility": {
          "format": "double",
          "type": "number"
        },
        "Number": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "PortfolioInfosRM"
    },
    "CustomLifeStylesCategoryAmountRM": {
      "type": "object",
      "properties": {
        "Category": {
          "enum": [
            "BILLSUTILITIES",
            "CASH",
            "ENTERTAINMENT",
            "HEALTH",
            "HOUSEHOLD",
            "RENT",
            "GROCERIES",
            "SHOPPING",
            "TAXES",
            "TRAVEL",
            "INCOME",
            "OTHER",
            "CREDITCARDLOAN",
            "TRANSFER",
            "INSURANCE",
            "PERSONALCARE",
            "CONTRIBUTION",
            "INVESTMENT",
            "BENEFICIARY",
            "EDUCATION"
          ],
          "type": "string"
        },
        "Amount": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "CustomLifeStylesCategoryAmountRM"
    },
    "BudgetGoalRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Category": {
          "$ref": "#/definitions/TransactionCategoryRM"
        },
        "GoalAmount": {
          "$ref": "#/definitions/Money"
        },
        "PeopleLikeYouExpense": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "BudgetGoalRM"
    },
    "TransactionCategoryRM": {
      "type": "object",
      "properties": {
        "AIPCategoryId": {
          "type": "string"
        },
        "CategoryName": {
          "type": "string"
        }
      },
      "title": "TransactionCategoryRM"
    },
    "SaveBudgetGoalModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "catName": {
          "type": "string"
        }
      },
      "title": "SaveBudgetGoalModel"
    },
    "ThumbnailBotModel": {
      "type": "object",
      "properties": {
        "Title": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Value": {
          "format": "double",
          "type": "number"
        },
        "IconClass": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "type": "integer"
        },
        "Intent": {
          "type": "string"
        }
      },
      "title": "ThumbnailBotModel"
    },
    "SpendingCategoryModel": {
      "type": "object",
      "properties": {
        "CategoryValue": {
          "$ref": "#/definitions/Money"
        },
        "CategoryName": {
          "type": "string"
        },
        "SpendingValueForPeriod": {
          "$ref": "#/definitions/Money"
        },
        "EstimateValueSpending": {
          "$ref": "#/definitions/Money"
        },
        "AIPCategoryId": {
          "type": "string"
        }
      },
      "title": "SpendingCategoryModel"
    },
    "ExpensesIncome": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AIPCategoryId": {
          "type": "string"
        },
        "Value": {
          "$ref": "#/definitions/Money"
        },
        "WeekGrossIncome": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "ExpensesIncome"
    },
    "ReducedFeesInfo": {
      "type": "object",
      "properties": {
        "HasAccountsWithFees": {
          "type": "boolean"
        },
        "YearlyActualFeesAmount": {
          "$ref": "#/definitions/Money"
        },
        "YearlyAverageBasePointFees": {
          "format": "double",
          "type": "number"
        },
        "YearlyPotentialFeesGain": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "ReducedFeesInfo"
    },
    "GoalAchievementInfoModel": {
      "type": "object",
      "properties": {
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "LumpSumRate": {
          "format": "double",
          "type": "number"
        },
        "LumpSum": {
          "$ref": "#/definitions/Money"
        },
        "EmployeeMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "AccountId": {
          "type": "string"
        },
        "RetirementIncome": {
          "$ref": "#/definitions/Money"
        },
        "HowManyYearWorked": {
          "format": "double",
          "type": "number"
        },
        "FirstMonthlyStatePension": {
          "$ref": "#/definitions/Money"
        },
        "PorfolioNumber": {
          "format": "int32",
          "type": "integer"
        },
        "TopUp": {
          "$ref": "#/definitions/Money"
        },
        "AskToSaveGoal": {
          "type": "boolean"
        },
        "RiskScore": {
          "format": "int32",
          "type": "integer"
        },
        "Cost": {
          "$ref": "#/definitions/Money"
        },
        "DurationYear": {
          "format": "double",
          "type": "number"
        },
        "GoalId": {
          "type": "string"
        }
      },
      "title": "GoalAchievementInfoModel"
    },
    "GoalAchievementInfoRM": {
      "type": "object",
      "properties": {
        "InitialGoal": {
          "$ref": "#/definitions/GoalRM"
        },
        "EstimatedGoal": {
          "$ref": "#/definitions/GoalRM"
        },
        "GoalTrackInitialPercentage": {
          "format": "double",
          "type": "number",
          "readOnly": true
        },
        "GoalTrackPercentage": {
          "format": "double",
          "type": "number",
          "readOnly": true
        }
      },
      "title": "GoalAchievementInfoRM"
    },
    "GraphicGoalRM": {
      "type": "object",
      "properties": {
        "InitialSavings": {
          "$ref": "#/definitions/Money"
        },
        "VV": {
          "$ref": "#/definitions/Money"
        },
        "YY": {
          "format": "double",
          "type": "number"
        },
        "WW": {
          "$ref": "#/definitions/Money"
        },
        "TrackedAmount": {
          "$ref": "#/definitions/Money"
        },
        "EndValue": {
          "$ref": "#/definitions/Money"
        },
        "PctGoal": {
          "format": "double",
          "type": "number"
        },
        "PctExpected": {
          "format": "double",
          "type": "number"
        },
        "Pct": {
          "format": "double",
          "type": "number"
        },
        "RetirementCapitalValue": {
          "format": "double",
          "type": "number"
        },
        "IsMonthlyDeposit": {
          "type": "boolean"
        },
        "TargetDate": {
          "format": "date-time",
          "type": "string"
        },
        "DurationTrackedVsExpected": {
          "format": "double",
          "type": "number"
        },
        "RemainingDuration": {
          "format": "double",
          "type": "number"
        },
        "InitialDuration": {
          "format": "double",
          "type": "number"
        },
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192,
            16384,
            32768,
            65536,
            131072,
            -1
          ],
          "type": "integer"
        },
        "GoalType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            -1
          ],
          "type": "integer"
        },
        "Priority": {
          "format": "int32",
          "type": "integer"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR"
          ],
          "type": "string"
        },
        "Portfolio": {
          "$ref": "#/definitions/PortfolioInfosRM"
        },
        "GlobalAssetAllocation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetAllocationItem"
          }
        },
        "EmployeeMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "EmployerMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "MonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "ExpectedValue": {
          "$ref": "#/definitions/Money"
        },
        "HowManyYearWorked": {
          "format": "double",
          "type": "number"
        },
        "FirstMonthlyStatePension": {
          "$ref": "#/definitions/Money"
        },
        "RetirementIncomeYear": {
          "format": "double",
          "type": "number"
        },
        "CustomLifeStylesCategoryAmounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomLifeStylesCategoryAmountRM"
          }
        },
        "LifeStyle": {
          "$ref": "#/definitions/LifeStyleRM"
        },
        "Cost": {
          "$ref": "#/definitions/Money"
        },
        "DurationYear": {
          "format": "double",
          "type": "number"
        },
        "TotalAccumulatedCapital": {
          "$ref": "#/definitions/Money"
        },
        "LumpSum": {
          "$ref": "#/definitions/Money"
        },
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "Income": {
          "$ref": "#/definitions/Money"
        },
        "Expenses": {
          "$ref": "#/definitions/Money"
        },
        "HowManyYearStart": {
          "format": "int32",
          "type": "integer"
        },
        "UserOptions": {
          "type": "string"
        },
        "UseDefaultPortfolio": {
          "type": "boolean"
        },
        "GoalStatus": {
          "enum": [
            "OffTrack",
            "MovingAtPace",
            "Exceeding",
            "Completed",
            "Pending"
          ],
          "type": "string"
        },
        "IdealAccumulatedCapital": {
          "$ref": "#/definitions/Money"
        },
        "TaxRebate": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "GraphicGoalRM"
    },
    "SaveGoalModel": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192,
            16384,
            32768,
            65536,
            131072,
            -1
          ],
          "type": "integer"
        },
        "Priority": {
          "format": "int32",
          "type": "integer"
        },
        "GoalType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            -1
          ],
          "type": "integer"
        },
        "MonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "EmployerMonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "VV": {
          "$ref": "#/definitions/Money"
        },
        "YY": {
          "format": "int32",
          "type": "integer"
        },
        "WW": {
          "$ref": "#/definitions/Money"
        },
        "HowManyYearWorked": {
          "format": "int32",
          "type": "integer"
        },
        "RetirementIncomeYear": {
          "format": "double",
          "type": "number"
        },
        "FirstMonthlyStatePensionAmount": {
          "$ref": "#/definitions/Money"
        },
        "Cost": {
          "$ref": "#/definitions/Money"
        },
        "DurationYear": {
          "format": "double",
          "type": "number"
        },
        "HowManyYearStart": {
          "format": "int32",
          "type": "integer"
        },
        "Duration": {
          "format": "double",
          "type": "number"
        },
        "CustomLifeStylesCategoryAmounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomLifeStylesCategoryAmountRM"
          }
        },
        "LifeStyle": {
          "$ref": "#/definitions/LifeStyleRM"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "Income": {
          "$ref": "#/definitions/Money"
        },
        "UseDefaultPortfolio": {
          "type": "boolean"
        }
      },
      "title": "SaveGoalModel"
    },
    "TopGoalsModel": {
      "type": "object",
      "properties": {
        "TopSavingsGoals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphicGoalRM"
          }
        },
        "TopSpendingGoal": {
          "$ref": "#/definitions/BudgetGoalRM"
        },
        "TopSpendingGoalSpendRate": {
          "format": "double",
          "type": "number"
        },
        "TopSpendingGoalSpentThisMonth": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "TopGoalsModel"
    },
    "Tuple[BudgetGoalRM,Double,Double]": {
      "type": "object",
      "properties": {
        "Item1": {
          "$ref": "#/definitions/BudgetGoalRM",
          "readOnly": true
        },
        "Item2": {
          "format": "double",
          "type": "number",
          "readOnly": true
        },
        "Item3": {
          "format": "double",
          "type": "number",
          "readOnly": true
        }
      },
      "title": "Tuple[BudgetGoalRM,Double,Double]"
    },
    "AccountGoalMappingModel": {
      "type": "object",
      "properties": {
        "GoalId": {
          "type": "string"
        },
        "AccountId": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "Value": {
          "format": "double",
          "type": "number"
        },
        "CronSchedule": {
          "type": "string"
        }
      },
      "title": "AccountGoalMappingModel"
    },
    "GoalTypesRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            -1
          ],
          "type": "integer"
        },
        "Category": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192,
            16384,
            32768,
            65536,
            131072,
            -1
          ],
          "type": "integer"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "Intent": {
          "type": "string"
        },
        "Order": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "GoalTypesRM"
    },
    "AssetAllocationRM": {
      "type": "object",
      "properties": {
        "ShareAllocation": {
          "format": "double",
          "type": "number"
        },
        "AssetAllocationInfos": {
          "$ref": "#/definitions/AssetAllocationInfosRM"
        }
      },
      "title": "AssetAllocationRM"
    },
    "AssetAllocationInfosRM": {
      "type": "object",
      "properties": {
        "Label": {
          "type": "string"
        },
        "ETFName": {
          "type": "string"
        },
        "ISIN": {
          "type": "string"
        }
      },
      "title": "AssetAllocationInfosRM"
    },
    "SuggestedGoalModel": {
      "type": "object",
      "properties": {
        "Age": {
          "format": "int32",
          "type": "integer"
        },
        "Salary": {
          "$ref": "#/definitions/Money"
        },
        "IgnoreBudgetGoal": {
          "type": "boolean"
        }
      },
      "title": "SuggestedGoalModel"
    },
    "GoalAccountRM": {
      "type": "object",
      "properties": {
        "Account": {
          "$ref": "#/definitions/FinancialAccountRM"
        },
        "GoalTransactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GoalTransactionRM"
          }
        },
        "GoalBalance": {
          "$ref": "#/definitions/GoalBalanceRM"
        },
        "ExpectedContribution": {
          "format": "double",
          "type": "number"
        },
        "CronSchedule": {
          "type": "string"
        },
        "IsMappedWithTransactions": {
          "type": "boolean"
        }
      },
      "title": "GoalAccountRM"
    },
    "GoalTransactionRM": {
      "type": "object",
      "properties": {
        "GoalId": {
          "type": "string"
        },
        "Goal": {
          "$ref": "#/definitions/ShortGoalRM"
        },
        "Amount": {
          "$ref": "#/definitions/Money"
        },
        "Date": {
          "format": "date-time",
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IsCredit": {
          "type": "boolean"
        }
      },
      "title": "GoalTransactionRM"
    },
    "GoalBalanceRM": {
      "type": "object",
      "properties": {
        "Goal": {
          "$ref": "#/definitions/ShortGoalRM"
        },
        "Amount": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "GoalBalanceRM"
    },
    "ShortGoalRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192,
            16384,
            32768,
            65536,
            131072,
            -1
          ],
          "type": "integer"
        }
      },
      "title": "ShortGoalRM"
    },
    "FinancialAccountWithGoalsRM": {
      "type": "object",
      "properties": {
        "Account": {
          "$ref": "#/definitions/FinancialAccountRM"
        },
        "NbMappedGoals": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "FinancialAccountWithGoalsRM"
    },
    "SavingPlanModel": {
      "required": [
        "Cost",
        "LumpSum"
      ],
      "type": "object",
      "properties": {
        "Cost": {
          "$ref": "#/definitions/Money"
        },
        "Category": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192,
            16384,
            32768,
            65536,
            131072,
            -1
          ],
          "type": "integer"
        },
        "GoalId": {
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "LumpSum": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "SavingPlanModel"
    },
    "SavingPlan": {
      "type": "object",
      "properties": {
        "Label": {
          "type": "string"
        },
        "MonthlyContribution": {
          "$ref": "#/definitions/Money"
        },
        "DurationYear": {
          "format": "double",
          "type": "number"
        },
        "Categories": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192,
            16384,
            32768,
            65536,
            131072,
            -1
          ],
          "type": "integer"
        },
        "Cost": {
          "$ref": "#/definitions/Money"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "LumpSum": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "SavingPlan"
    },
    "EnterpriseResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            256,
            511,
            512,
            1024,
            2048
          ],
          "type": "integer"
        },
        "EnterpriseName": {
          "type": "string"
        }
      },
      "title": "EnterpriseResource"
    },
    "KcPostsPublisherRM": {
      "type": "object",
      "properties": {
        "Publisher": {
          "$ref": "#/definitions/ContentPublisher"
        },
        "Posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KcPostRM"
          }
        },
        "TotalPosts": {
          "format": "int32",
          "type": "integer"
        },
        "TotalPages": {
          "format": "int32",
          "type": "integer"
        },
        "Categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KcCategory"
          }
        }
      },
      "title": "KcPostsPublisherRM"
    },
    "ContentPublisher": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "KcSiteName": {
          "type": "string"
        },
        "CultureCode": {
          "type": "string"
        }
      },
      "title": "ContentPublisher"
    },
    "KcPostRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsTopStory": {
          "type": "boolean"
        },
        "PostTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KcTag"
          }
        },
        "PostCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KcCategory"
          }
        },
        "Date": {
          "format": "date-time",
          "type": "string"
        },
        "Excerpt": {
          "$ref": "#/definitions/KcContent"
        },
        "ContentPublisher": {
          "type": "string"
        },
        "Title": {
          "$ref": "#/definitions/KcTitle"
        },
        "ImageUrl": {
          "type": "string"
        },
        "VideoUrl": {
          "type": "string"
        },
        "LinkUrl": {
          "type": "string"
        }
      },
      "title": "KcPostRM"
    },
    "KcCategory": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      },
      "title": "KcCategory"
    },
    "KcTag": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      },
      "title": "KcTag"
    },
    "KcContent": {
      "type": "object",
      "properties": {
        "Rendered": {
          "type": "string"
        }
      },
      "title": "KcContent"
    },
    "KcTitle": {
      "type": "object",
      "properties": {
        "Rendered": {
          "type": "string"
        }
      },
      "title": "KcTitle"
    },
    "NbaModel": {
      "type": "object",
      "properties": {
        "numberOfResult": {
          "format": "int32",
          "type": "integer"
        },
        "Profile": {
          "$ref": "#/definitions/NbaProfile"
        },
        "PurchaseHistory": {
          "$ref": "#/definitions/NbaPurchaseHistory"
        }
      },
      "title": "NbaModel"
    },
    "NbaProfile": {
      "type": "object",
      "properties": {
        "CustomerId": {
          "type": "string"
        },
        "Salary": {
          "format": "int32",
          "type": "integer"
        },
        "Occupation": {
          "type": "string"
        },
        "BirthDate": {
          "format": "date-time",
          "type": "string"
        },
        "Gender": {
          "enum": [
            "None",
            "Male",
            "Female"
          ],
          "type": "string"
        },
        "MarriageIndicator": {
          "enum": [
            "Unknown",
            "Married",
            "CivilPartnership",
            "Divorced",
            "Separated",
            "Widowed",
            "Single"
          ],
          "type": "string"
        },
        "PostalSector": {
          "type": "string"
        }
      },
      "title": "NbaProfile"
    },
    "NbaPurchaseHistory": {
      "type": "object",
      "properties": {
        "ProductCode": {
          "type": "string"
        },
        "PurchaseDate": {
          "format": "date-time",
          "type": "string"
        },
        "PurchaseAmount": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "NbaPurchaseHistory"
    },
    "PolicyProductCategoryRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Code": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "object"
        },
        "IsInterested": {
          "type": "boolean"
        },
        "IsCallMeBack": {
          "type": "boolean"
        },
        "KnowledgeCenterArticleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PolicyProductCategoryType": {
          "$ref": "#/definitions/PolicyProductCategoryType"
        }
      },
      "title": "PolicyProductCategoryRM"
    },
    "PolicyProductCategoryType": {
      "required": [
        "Code",
        "NameResourceKey",
        "EnterpriseName",
        "IsInvestment"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Code": {
          "type": "string"
        },
        "ProductCategoryArea": {
          "enum": [
            "Other",
            "Wealth",
            "Health",
            "Protection"
          ],
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IsInvestment": {
          "type": "boolean"
        }
      },
      "title": "PolicyProductCategoryType"
    },
    "NudgeRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ShortName": {
          "type": "string"
        },
        "JsonJobParameters": {
          "type": "string"
        },
        "CronSchedule": {
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "Priority": {
          "format": "int32",
          "type": "integer"
        },
        "ExpiresAfter": {
          "format": "int32",
          "type": "integer"
        },
        "JobId": {
          "type": "string"
        },
        "Variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationDefinitionRM"
          }
        },
        "ExtractResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NudgeExtractResultRM"
          }
        },
        "IsActive": {
          "type": "boolean"
        }
      },
      "title": "NudgeRM"
    },
    "NotificationDefinitionRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "JsonContentTemplate": {
          "type": "string"
        },
        "Channels": {
          "enum": [
            "NONE",
            "SMS",
            "APP_INSTANT",
            "APP_BATCH",
            "EMAIL",
            "WEB_PUSH",
            "PUSH",
            "WEB_PUSH_AND_APP",
            "SMS_AND_APP",
            "SMS_AND_INSTANT",
            "EMAIL_AND_APP",
            "EMAIL_AND_INSTANT",
            "EMAIL_AND_SMS_AND_INSTANT",
            "ALL",
            "IN_APP"
          ],
          "type": "string"
        },
        "Time": {
          "format": "date-time",
          "type": "string"
        },
        "Split": {
          "format": "double",
          "type": "number"
        },
        "Index": {
          "format": "int32",
          "type": "integer"
        },
        "NudgeId": {
          "type": "string"
        },
        "EmailNotificationTemplateId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      },
      "title": "NotificationDefinitionRM"
    },
    "NudgeExtractResultRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "FilePath": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "ALL"
          ],
          "type": "string"
        },
        "Type": {
          "enum": [
            "NONE",
            "MANUAL",
            "AUTO"
          ],
          "type": "string"
        },
        "JsonSegmentationParameters": {
          "type": "string"
        },
        "NudgeId": {
          "type": "string"
        }
      },
      "title": "NudgeExtractResultRM"
    },
    "NudgeListRM": {
      "type": "object",
      "properties": {
        "NudgeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EmailAddress": {
          "type": "string"
        }
      },
      "title": "NudgeListRM"
    },
    "NotificationRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Content": {
          "$ref": "#/definitions/NotificationTemplateRM"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ArchivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ClickedDate": {
          "format": "date-time",
          "type": "string"
        },
        "DismissedDate": {
          "format": "date-time",
          "type": "string"
        },
        "SeenDate": {
          "format": "date-time",
          "type": "string"
        },
        "ScheduledDate": {
          "format": "date-time",
          "type": "string"
        },
        "SentDate": {
          "format": "date-time",
          "type": "string"
        },
        "Channel": {
          "enum": [
            "NONE",
            "SMS",
            "APP_INSTANT",
            "APP_BATCH",
            "EMAIL",
            "WEB_PUSH",
            "PUSH",
            "WEB_PUSH_AND_APP",
            "SMS_AND_APP",
            "SMS_AND_INSTANT",
            "EMAIL_AND_APP",
            "EMAIL_AND_INSTANT",
            "EMAIL_AND_SMS_AND_INSTANT",
            "ALL",
            "IN_APP"
          ],
          "type": "string"
        },
        "ShortUrl": {
          "type": "string"
        }
      },
      "title": "NotificationRM"
    },
    "NotificationTemplateRM": {
      "type": "object",
      "properties": {
        "NudgeCardName": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "WelcomeMessage": {
          "type": "string"
        },
        "Body": {
          "type": "string"
        },
        "Image": {
          "type": "string"
        },
        "CallToActionLabel": {
          "type": "string"
        },
        "Type": {
          "enum": [
            "LINK",
            "URGENT",
            "ADVICE",
            "INFO",
            "IMPROVE"
          ],
          "type": "string"
        }
      },
      "title": "NotificationTemplateRM"
    },
    "Notification": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ContentParameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ArchivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ClickedDate": {
          "format": "date-time",
          "type": "string"
        },
        "DismissedDate": {
          "format": "date-time",
          "type": "string"
        },
        "SeenDate": {
          "format": "date-time",
          "type": "string"
        },
        "ScheduledDate": {
          "format": "date-time",
          "type": "string"
        },
        "SentDate": {
          "format": "date-time",
          "type": "string"
        },
        "UserID": {
          "type": "string"
        },
        "NotificationDefinition": {
          "$ref": "#/definitions/NotificationDefinition"
        },
        "Channel": {
          "enum": [
            "NONE",
            "SMS",
            "APP_INSTANT",
            "APP_BATCH",
            "EMAIL",
            "WEB_PUSH",
            "PUSH",
            "WEB_PUSH_AND_APP",
            "SMS_AND_APP",
            "SMS_AND_INSTANT",
            "EMAIL_AND_APP",
            "EMAIL_AND_INSTANT",
            "EMAIL_AND_SMS_AND_INSTANT",
            "ALL",
            "IN_APP"
          ],
          "type": "string"
        },
        "ShortUrl": {
          "type": "string"
        }
      },
      "title": "Notification"
    },
    "NotificationDefinition": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ContentTemplate": {
          "$ref": "#/definitions/NotificationTemplate"
        },
        "Channels": {
          "enum": [
            "NONE",
            "SMS",
            "APP_INSTANT",
            "APP_BATCH",
            "EMAIL",
            "WEB_PUSH",
            "PUSH",
            "WEB_PUSH_AND_APP",
            "SMS_AND_APP",
            "SMS_AND_INSTANT",
            "EMAIL_AND_APP",
            "EMAIL_AND_INSTANT",
            "EMAIL_AND_SMS_AND_INSTANT",
            "ALL",
            "IN_APP"
          ],
          "type": "string"
        },
        "Split": {
          "format": "double",
          "type": "number"
        },
        "Time": {
          "format": "date-time",
          "type": "string"
        },
        "Index": {
          "format": "int32",
          "type": "integer"
        },
        "NudgeId": {
          "type": "string"
        },
        "EmailNotificationTemplateId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      },
      "title": "NotificationDefinition"
    },
    "NotificationTemplate": {
      "type": "object",
      "properties": {
        "NudgeCardName": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "WelcomeMessage": {
          "type": "string"
        },
        "Body": {
          "type": "string"
        },
        "Image": {
          "type": "string"
        },
        "CallToActionLabel": {
          "type": "string"
        },
        "Type": {
          "enum": [
            "LINK",
            "URGENT",
            "ADVICE",
            "INFO",
            "IMPROVE"
          ],
          "type": "string"
        },
        "Actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationAction"
          }
        }
      },
      "title": "NotificationTemplate"
    },
    "NotificationAction": {
      "type": "object",
      "properties": {
        "Type": {
          "enum": [
            "NONE",
            "INTENT",
            "AUTO",
            "NAVIGATE"
          ],
          "type": "string"
        },
        "Intent": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        }
      },
      "title": "NotificationAction"
    },
    "PayInput": {
      "type": "object",
      "properties": {
        "FromPlanId": {
          "type": "string"
        },
        "ProductId": {
          "type": "string"
        },
        "PlanId": {
          "type": "string"
        },
        "Token": {
          "type": "string"
        }
      },
      "title": "PayInput"
    },
    "OrderRM": {
      "type": "object",
      "properties": {
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ExpirationDate": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "enum": [
            "NONE",
            "ACTIVE",
            "PAST_DUE"
          ],
          "type": "string"
        },
        "PlanId": {
          "type": "string"
        },
        "Product": {
          "$ref": "#/definitions/ProductRM"
        },
        "Plan": {
          "$ref": "#/definitions/PlanRM"
        }
      },
      "title": "OrderRM"
    },
    "ProductRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "UpgradeOrder": {
          "format": "int32",
          "type": "integer"
        },
        "Description": {
          "type": "string"
        }
      },
      "title": "ProductRM"
    },
    "PlanRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Price": {
          "$ref": "#/definitions/Money"
        },
        "RecurrenceType": {
          "enum": [
            "NONE",
            "ONE_OFF_CHARGE",
            "RECURRING_MONTHLY",
            "RECURRING_YEARLY"
          ],
          "type": "string"
        }
      },
      "title": "PlanRM"
    },
    "ProductFeatureAvailabilityRM": {
      "type": "object",
      "properties": {
        "ProductFeatureType": {
          "type": "string"
        },
        "IsAvailable": {
          "type": "boolean"
        },
        "IsOwned": {
          "type": "boolean"
        },
        "RecurrenceType": {
          "enum": [
            "NONE",
            "ONE_OFF_CHARGE",
            "RECURRING_MONTHLY",
            "RECURRING_YEARLY"
          ],
          "type": "string"
        },
        "ProductFeature": {
          "$ref": "#/definitions/ProductFeatureRM"
        }
      },
      "title": "ProductFeatureAvailabilityRM"
    },
    "ProductFeatureRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        }
      },
      "title": "ProductFeatureRM"
    },
    "PolicyOverviewRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PolicyNumber": {
          "type": "string"
        },
        "PolicyProduct": {
          "$ref": "#/definitions/PolicyProductRM"
        },
        "ProfileId": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "NotDefined",
            "Active",
            "Pending",
            "InActive"
          ],
          "type": "string"
        },
        "ContractIssuedDate": {
          "format": "date-time",
          "type": "string"
        },
        "TotalPremium": {
          "$ref": "#/definitions/Money"
        },
        "BillingFrequency": {
          "enum": [
            "NotDefined",
            "Monthly",
            "Quarterly",
            "HalfAnnual",
            "Annual",
            "SinglePayment"
          ],
          "type": "string"
        },
        "BillingFrequencyName": {
          "type": "string"
        },
        "BillingChannel": {
          "enum": [
            "NotDefined",
            "DirectDebit",
            "CashCheck",
            "CreditCard",
            "MandatoryRetirement",
            "SupplementaryRetirement",
            "GroupBilling",
            "ElectronicFundTransfer",
            "MedicalSavingsAccount"
          ],
          "type": "string"
        },
        "BillingChannelName": {
          "type": "string"
        },
        "CustomerId": {
          "type": "string"
        },
        "NextDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "TotalCoverage": {
          "$ref": "#/definitions/Money"
        },
        "SavingsBalance": {
          "$ref": "#/definitions/Money"
        },
        "BeneficiariesCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "PolicyOverviewRM"
    },
    "PolicyProductRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Code": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "PolicyProductCategory": {
          "$ref": "#/definitions/PolicyProductCategory"
        },
        "Status": {
          "enum": [
            "NotDefined",
            "Pending",
            "Active",
            "Withdrawn"
          ],
          "type": "string"
        }
      },
      "title": "PolicyProductRM"
    },
    "PolicyProductCategory": {
      "required": [
        "Code",
        "NameResourceKey",
        "EnterpriseName",
        "PolicyProductCategoryTypeId",
        "PolicyProductCatalogId"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Code": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "object"
        },
        "PolicyProductCategoryType": {
          "$ref": "#/definitions/PolicyProductCategoryType"
        }
      },
      "title": "PolicyProductCategory"
    },
    "PolicyRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PolicyNumber": {
          "type": "string"
        },
        "PolicyProduct": {
          "$ref": "#/definitions/PolicyProductRM"
        },
        "ProfileId": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "NotDefined",
            "Active",
            "Pending",
            "InActive"
          ],
          "type": "string"
        },
        "ContractIssuedDate": {
          "format": "date-time",
          "type": "string"
        },
        "TotalPremium": {
          "$ref": "#/definitions/Money"
        },
        "BillingFrequency": {
          "enum": [
            "NotDefined",
            "Monthly",
            "Quarterly",
            "HalfAnnual",
            "Annual",
            "SinglePayment"
          ],
          "type": "string"
        },
        "BillingFrequencyName": {
          "type": "string"
        },
        "BillingChannel": {
          "enum": [
            "NotDefined",
            "DirectDebit",
            "CashCheck",
            "CreditCard",
            "MandatoryRetirement",
            "SupplementaryRetirement",
            "GroupBilling",
            "ElectronicFundTransfer",
            "MedicalSavingsAccount"
          ],
          "type": "string"
        },
        "BillingChannelName": {
          "type": "string"
        },
        "CustomerId": {
          "type": "string"
        },
        "NextDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "FinancialAccount": {
          "$ref": "#/definitions/ShortFinancialAccountRM"
        },
        "PolicyCoverages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyCoverageRM"
          }
        }
      },
      "title": "PolicyRM"
    },
    "ShortFinancialAccountRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AccountNumber": {
          "type": "string"
        },
        "Balance": {
          "$ref": "#/definitions/Money"
        },
        "EmployerId": {
          "type": "string"
        }
      },
      "title": "ShortFinancialAccountRM"
    },
    "PolicyCoverageRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PolicyCoverageCategory": {
          "$ref": "#/definitions/PolicyCoverageCategory"
        },
        "Status": {
          "enum": [
            "NotDefined",
            "Active",
            "Pending",
            "InActive"
          ],
          "type": "string"
        },
        "Order": {
          "type": "string"
        },
        "Optional": {
          "type": "boolean"
        },
        "ContractIssuedDate": {
          "format": "date-time",
          "type": "string"
        },
        "Coverage": {
          "$ref": "#/definitions/Money"
        },
        "PremiumAmount": {
          "$ref": "#/definitions/Money"
        },
        "AgeAtCommencementDate": {
          "format": "int32",
          "type": "integer"
        },
        "Beneficiary": {
          "$ref": "#/definitions/BeneficiaryRM"
        }
      },
      "title": "PolicyCoverageRM"
    },
    "PolicyCoverageCategory": {
      "required": [
        "Code",
        "NameResourceKey",
        "EnterpriseName"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Code": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      },
      "title": "PolicyCoverageCategory"
    },
    "BeneficiaryRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "DateOfBirth": {
          "format": "date-time",
          "type": "string"
        },
        "Gender": {
          "enum": [
            "None",
            "Male",
            "Female"
          ],
          "type": "string"
        },
        "IsBeneficiaryAdult": {
          "type": "boolean"
        }
      },
      "title": "BeneficiaryRM"
    },
    "PagingModel[PolicyProductRM]": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyProductRM"
          }
        },
        "totalResults": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "PagingModel[PolicyProductRM]"
    },
    "EmbedConfig": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "EmbedUrl": {
          "type": "string"
        },
        "EmbedToken": {
          "$ref": "#/definitions/EmbedToken"
        }
      },
      "title": "EmbedConfig"
    },
    "EmbedToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "tokenId": {
          "type": "string"
        },
        "expiration": {
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "EmbedToken"
    },
    "EmploymentPeriodRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "EmployerName": {
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "StartSalary": {
          "$ref": "#/definitions/Money"
        },
        "EndSalary": {
          "$ref": "#/definitions/Money"
        },
        "Points": {
          "format": "double",
          "type": "number"
        },
        "Details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmploymentPeriodDetailsRM"
          }
        }
      },
      "title": "EmploymentPeriodRM"
    },
    "EmploymentPeriodDetailsRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "Salary": {
          "$ref": "#/definitions/Money"
        },
        "Points": {
          "format": "double",
          "type": "number"
        }
      },
      "title": "EmploymentPeriodDetailsRM"
    },
    "RetirementOptionsInput": {
      "type": "object",
      "properties": {
        "Gender": {
          "format": "int32",
          "type": "integer"
        },
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "LumpSum": {
          "$ref": "#/definitions/Money"
        },
        "TargetIncome": {
          "$ref": "#/definitions/Money"
        },
        "ChooseNoInflationAdjustment": {
          "type": "boolean"
        },
        "NotAdvisedOnRetirementOptions": {
          "type": "boolean"
        },
        "AccountTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "FirstMonthlyStatePension": {
          "$ref": "#/definitions/Money"
        },
        "TotalPensionBalance": {
          "$ref": "#/definitions/Money"
        },
        "HowManyYearsWorked": {
          "format": "double",
          "type": "number"
        },
        "ChooseRiskProfilePortfolio": {
          "type": "boolean"
        },
        "PortfolioNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ExcludedAccounts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "RetirementOptionsInput"
    },
    "DrawdownInfos": {
      "type": "object",
      "properties": {
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "MonthlyVariableIncome": {
          "$ref": "#/definitions/Money"
        },
        "TermLength": {
          "type": "string"
        },
        "AmountInvested": {
          "$ref": "#/definitions/Money"
        },
        "TaxFreeWithdrawal": {
          "$ref": "#/definitions/Money"
        },
        "DesiredYearlyIncome": {
          "$ref": "#/definitions/Money"
        },
        "AverageRunOutAge": {
          "format": "int32",
          "type": "integer"
        },
        "FiveYearsForecast": {
          "$ref": "#/definitions/Money"
        },
        "TenYearsForecast": {
          "$ref": "#/definitions/Money"
        },
        "FeesPercentage": {
          "format": "double",
          "type": "number"
        },
        "FeesForComparison": {
          "$ref": "#/definitions/Money"
        },
        "Reseller": {
          "type": "string"
        },
        "DrawdownAgePortfolioInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DrawdownAgePortfolioInfos"
          }
        }
      },
      "title": "DrawdownInfos"
    },
    "DrawdownAgePortfolioInfos": {
      "type": "object",
      "properties": {
        "DrawdownAge": {
          "format": "double",
          "type": "number"
        },
        "PortfoliosInfos": {
          "$ref": "#/definitions/PortfoliosInfos"
        },
        "IsPreferred": {
          "type": "boolean"
        },
        "GraphicDatas": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        }
      },
      "title": "DrawdownAgePortfolioInfos"
    },
    "TargetRetirementIncomeFromExpensesModel": {
      "type": "object",
      "properties": {
        "RetirementIncome": {
          "$ref": "#/definitions/Money"
        },
        "PersonalExpenses": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "TargetRetirementIncomeFromExpensesModel"
    },
    "AnnuityInfos": {
      "type": "object",
      "properties": {
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "MonthlyGuaranteedIncomes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonthlyIncomeFromAge"
          }
        },
        "LifeExpectancy": {
          "format": "double",
          "type": "number"
        }
      },
      "title": "AnnuityInfos"
    },
    "DrawdownConfirmation": {
      "type": "object",
      "properties": {
        "optionsInput": {
          "$ref": "#/definitions/RetirementOptionsInput"
        },
        "drawdownInfos": {
          "$ref": "#/definitions/DrawdownInfos"
        },
        "redirectURL": {
          "type": "string"
        }
      },
      "title": "DrawdownConfirmation"
    },
    "AnnuityQuotesFormRequest": {
      "type": "object",
      "properties": {
        "jsonData": {
          "type": "string"
        }
      },
      "title": "AnnuityQuotesFormRequest"
    },
    "AnnuityQuoteConfirmation": {
      "type": "object",
      "properties": {
        "quoteReference": {
          "type": "string"
        },
        "optionsInput": {
          "$ref": "#/definitions/RetirementOptionsInput"
        },
        "annuityCaseId": {
          "type": "string"
        },
        "redirectUrlAfterSign": {
          "type": "string"
        }
      },
      "title": "AnnuityQuoteConfirmation"
    },
    "AnnuityQuoteConfirmationResult": {
      "type": "object",
      "properties": {
        "annuityCaseId": {
          "type": "string"
        },
        "transactionId": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string"
        }
      },
      "title": "AnnuityQuoteConfirmationResult"
    },
    "AnnuityBlock": {
      "type": "object",
      "properties": {
        "BlockId": {
          "format": "int32",
          "enum": [
            "1.1",
            "1.2",
            "1.3",
            "1.10",
            "1.11",
            "1.12",
            "1.13",
            "1.14",
            "1.15",
            "1.16",
            "1.17",
            "1.18",
            "1.19",
            "2.1",
            "2.2",
            "2.3",
            "2.10",
            "2.11",
            "2.12",
            "2.13",
            "2.14",
            "2.15",
            "2.16",
            "2.17",
            "2.18",
            "2.19",
            "3.1"
          ],
          "type": "integer"
        },
        "BlockPayload": {
          "type": "object"
        },
        "AnnuityCaseId": {
          "type": "string"
        },
        "AnnuityBlocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlockStatus"
          }
        },
        "AnnuityCaseStatus": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer"
        }
      },
      "title": "AnnuityBlock"
    },
    "BlockStatus": {
      "type": "object",
      "properties": {
        "blockId": {
          "format": "int32",
          "enum": [
            "1.1",
            "1.2",
            "1.3",
            "1.10",
            "1.11",
            "1.12",
            "1.13",
            "1.14",
            "1.15",
            "1.16",
            "1.17",
            "1.18",
            "1.19",
            "2.1",
            "2.2",
            "2.3",
            "2.10",
            "2.11",
            "2.12",
            "2.13",
            "2.14",
            "2.15",
            "2.16",
            "2.17",
            "2.18",
            "2.19",
            "3.1"
          ],
          "type": "integer"
        },
        "Status": {
          "enum": [
            "NotStarted",
            "filled",
            "invalid"
          ],
          "type": "string"
        },
        "ValidationErrors": {
          "type": "string"
        }
      },
      "title": "BlockStatus"
    },
    "AnnuityBlockCommon": {
      "type": "object",
      "properties": {
        "AnnuityCaseId": {
          "type": "string"
        },
        "AnnuityBlocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlockStatus"
          }
        },
        "AnnuityCaseStatus": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer"
        }
      },
      "title": "AnnuityBlockCommon"
    },
    "AnnuityCaseReferencesData": {
      "type": "object",
      "properties": {
        "References": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AQReferenceItem"
          }
        }
      },
      "title": "AnnuityCaseReferencesData"
    },
    "AQReferenceItem": {
      "type": "object",
      "properties": {
        "Reference": {
          "type": "string"
        },
        "ErrorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "AQReferenceItem"
    },
    "AnnuityQuotesModel": {
      "type": "object",
      "properties": {
        "OperationErrorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Quotes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnuityQuoteModel"
          }
        },
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "AnnuityQuotesModel"
    },
    "AnnuityQuoteModel": {
      "type": "object",
      "properties": {
        "HasMedicalConditions": {
          "type": "boolean"
        },
        "Conditions": {
          "type": "string"
        },
        "Information": {
          "type": "string"
        },
        "IsMock": {
          "type": "boolean"
        },
        "ProviderName": {
          "type": "string"
        },
        "QuoteType": {
          "type": "string"
        },
        "QuoteReference": {
          "type": "string"
        },
        "ProviderQuoteId": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "Success",
            "Warning",
            "Error"
          ],
          "type": "string"
        },
        "MonthlyGuaranteedIncome": {
          "$ref": "#/definitions/Money"
        },
        "FromAge": {
          "type": "string"
        },
        "HasAnnualIncrease": {
          "type": "boolean"
        },
        "IncreaseRatio": {
          "type": "string"
        },
        "PaymentMode": {
          "type": "string"
        },
        "HasGuarantee": {
          "type": "boolean"
        },
        "GuaranteeDecsription": {
          "type": "string"
        },
        "AmountInvested": {
          "$ref": "#/definitions/Money"
        },
        "TaxFreeCash": {
          "$ref": "#/definitions/Money"
        },
        "Commission": {
          "$ref": "#/definitions/Money"
        },
        "KeyFacts": {
          "type": "string"
        },
        "HealthAssessment": {
          "type": "string"
        },
        "Logo": {
          "type": "string"
        }
      },
      "title": "AnnuityQuoteModel"
    },
    "AnnuityQuoteConfirmed": {
      "type": "object",
      "properties": {
        "AnnuityCaseData": {
          "$ref": "#/definitions/AnnuityCaseInputData"
        },
        "QuoteDocuments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProviderDocuments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AnnuityTransaction": {
          "$ref": "#/definitions/ProfileTransactionModel"
        }
      },
      "title": "AnnuityQuoteConfirmed"
    },
    "AnnuityCaseInputData": {
      "type": "object",
      "properties": {
        "Client": {
          "$ref": "#/definitions/AQClientInfo"
        },
        "ClientLifeStyle": {
          "$ref": "#/definitions/AQLifeStyle"
        },
        "ClientConditions": {
          "$ref": "#/definitions/AQConditions"
        },
        "ClientDailyLiving": {
          "$ref": "#/definitions/AQDailyLiving"
        },
        "Dependant": {
          "$ref": "#/definitions/AQDependantInfo"
        },
        "DependantLifeStyle": {
          "$ref": "#/definitions/AQLifeStyle"
        },
        "DependantConditions": {
          "$ref": "#/definitions/AQConditions"
        },
        "DependantDailyLiving": {
          "$ref": "#/definitions/AQDailyLiving"
        },
        "Quote": {
          "$ref": "#/definitions/AQQuotesDetails"
        }
      },
      "title": "AnnuityCaseInputData"
    },
    "ProfileTransactionModel": {
      "type": "object",
      "properties": {
        "TransactionPayload": {
          "$ref": "#/definitions/BaseTransaction",
          "readOnly": true
        },
        "Id": {
          "type": "string"
        },
        "ReferenceNumber": {
          "type": "string"
        },
        "ProfileId": {
          "type": "string"
        },
        "UserProfile": {
          "$ref": "#/definitions/Profile"
        },
        "TypeOfTransaction": {
          "enum": [
            "None",
            "PensionTransfer",
            "ChangeRetirementGoalLumpSum",
            "IncreasePensionContribution",
            "ChangePensionInvestments",
            "PurchaseOrder",
            "OpenSavingsAccount",
            "BookingOrder",
            "EquityReleaseLead",
            "DrawdownPurchase",
            "AnnuityQuote",
            "PensionCashWithdrawal",
            "PensionTracing",
            "PensionKeepInvested",
            "Beneficiaries",
            "SavingMonthlyContribution",
            "SavingSingleContribution",
            "CallMeBack",
            "WealthLead",
            "FundsOrders"
          ],
          "type": "string"
        },
        "StatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        },
        "EnterpriseUniqueName": {
          "type": "string"
        },
        "Enterprise": {
          "$ref": "#/definitions/Enterprise"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ProcessedDate": {
          "format": "date-time",
          "type": "string"
        },
        "TransactionDetails": {
          "$ref": "#/definitions/BaseTransaction"
        },
        "StatusCodeChangeReason": {
          "type": "string"
        }
      },
      "title": "ProfileTransactionModel"
    },
    "AQClientInfo": {
      "type": "object",
      "properties": {
        "MaritalStatus": {
          "enum": [
            "Unknown",
            "Married",
            "CivilPartnership",
            "Divorced",
            "Separated",
            "Widowed",
            "Single"
          ],
          "type": "string"
        },
        "PostCode": {
          "type": "string"
        },
        "Occupation": {
          "type": "string"
        },
        "PensionFund": {
          "format": "double",
          "type": "number"
        }
      },
      "title": "AQClientInfo"
    },
    "AQLifeStyle": {
      "type": "object",
      "properties": {
        "HeightFt": {
          "format": "int32",
          "type": "integer"
        },
        "HeightIns": {
          "format": "int32",
          "type": "integer"
        },
        "WeightSt": {
          "format": "int32",
          "type": "integer"
        },
        "WeightLbs": {
          "format": "int32",
          "type": "integer"
        },
        "WaistIns": {
          "format": "int32",
          "type": "integer"
        },
        "AlcoholUnitsWeekly": {
          "format": "int32",
          "type": "integer"
        },
        "SmokerQuestion": {
          "type": "string"
        },
        "CurrentSmokerStr": {
          "type": "string"
        },
        "PreviousSmokerStr": {
          "type": "string"
        },
        "SmokerForLast10YearsStr": {
          "type": "string"
        },
        "StartedSmokingDate": {
          "type": "string"
        },
        "StoppedSmokingDate": {
          "type": "string"
        },
        "AmountSmokedCigarettes": {
          "format": "int32",
          "type": "integer"
        },
        "AmountSmokedCigars": {
          "format": "int32",
          "type": "integer"
        },
        "AmountSmokedRollingTobacco": {
          "format": "int32",
          "type": "integer"
        },
        "AmountSmokedPipeTobacco": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "AQLifeStyle"
    },
    "AQConditions": {
      "type": "object",
      "properties": {
        "Cancer": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CancerCondition"
          }
        },
        "Cholesterol": {
          "$ref": "#/definitions/CholesterolCondition"
        },
        "Diabetes": {
          "$ref": "#/definitions/DiabetesCondition"
        },
        "Heart": {
          "$ref": "#/definitions/HeartCondition"
        },
        "Hypertension": {
          "$ref": "#/definitions/HypertensionCondition"
        },
        "Neurological": {
          "$ref": "#/definitions/NeurologicalCondition"
        },
        "Other": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OtherCondition"
          }
        },
        "Respiratory": {
          "$ref": "#/definitions/RespiratoryCondition"
        },
        "Sclerosis": {
          "$ref": "#/definitions/SclerosisCondition"
        },
        "Stroke": {
          "$ref": "#/definitions/StrokeCondition"
        }
      },
      "title": "AQConditions"
    },
    "AQDailyLiving": {
      "type": "object",
      "properties": {
        "Dressing": {
          "enum": [
            "Dependent",
            "NeedsHelp",
            "Independent"
          ],
          "type": "string"
        },
        "Mobility": {
          "enum": [
            "Bedridden",
            "DailyNursingCare",
            "WheelchairPermanent",
            "WheelchairNonPermanent",
            "WalksWithAssistance",
            "Independent"
          ],
          "type": "string"
        },
        "Transferring": {
          "enum": [
            "Unable",
            "MajorHelp",
            "MinorHelp",
            "Independent"
          ],
          "type": "string"
        },
        "ContinenceBladder": {
          "enum": [
            "Incontinent",
            "OccasionalAccident",
            "Continent"
          ],
          "type": "string"
        },
        "ContinenceBowels": {
          "enum": [
            "Incontinent",
            "OccasionalAccident",
            "Continent"
          ],
          "type": "string"
        },
        "Bathing": {
          "enum": [
            "Dependent",
            "NeedsSomeAssistance",
            "Independent"
          ],
          "type": "string"
        },
        "Feeding": {
          "enum": [
            "Unable",
            "NeedsHelp",
            "Independent"
          ],
          "type": "string"
        },
        "Progression": {
          "enum": [
            "Stable",
            "Deteriorating",
            "RapidDeterioration"
          ],
          "type": "string"
        }
      },
      "title": "AQDailyLiving"
    },
    "AQDependantInfo": {
      "type": "object",
      "properties": {
        "Title": {
          "type": "string"
        },
        "Forenames": {
          "type": "string"
        },
        "Surname": {
          "type": "string"
        },
        "MaritalStatus": {
          "enum": [
            "Unknown",
            "Married",
            "CivilPartnership",
            "Divorced",
            "Separated",
            "Widowed",
            "Single"
          ],
          "type": "string"
        },
        "Gender": {
          "enum": [
            "None",
            "Male",
            "Female"
          ],
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "PostCode": {
          "type": "string"
        },
        "Occupation": {
          "type": "string"
        }
      },
      "title": "AQDependantInfo"
    },
    "AQQuotesDetails": {
      "type": "object",
      "properties": {
        "PaymentFrequency": {
          "enum": [
            "Monthly",
            "Quarterly",
            "HalfYearly",
            "Yearly"
          ],
          "type": "string"
        },
        "PaymentTiming": {
          "enum": [
            "InAdvance",
            "InArrears"
          ],
          "type": "string"
        },
        "TaxFreeCashPercent": {
          "format": "double",
          "type": "number"
        },
        "GuaranteeType": {
          "enum": [
            "None",
            "GuaranteePeriod",
            "ValueProtection"
          ],
          "type": "string"
        },
        "GuaranteePeriod": {
          "type": "string"
        },
        "Overlap": {
          "type": "boolean"
        },
        "ValueProtection": {
          "format": "int32",
          "type": "integer"
        },
        "JointValueProtectionType": {
          "enum": [
            "Client",
            "Dependant"
          ],
          "type": "string"
        },
        "Escalation": {
          "enum": [
            "Fixed",
            "RPI",
            "LPI"
          ],
          "type": "string"
        },
        "EscalationValue": {
          "format": "int32",
          "type": "integer"
        },
        "JointLife": {
          "type": "boolean"
        },
        "DependantIncome": {
          "format": "double",
          "type": "number"
        },
        "ProportionalPayment": {
          "type": "boolean"
        },
        "AnySpouse": {
          "type": "boolean"
        },
        "Advised": {
          "type": "boolean"
        }
      },
      "title": "AQQuotesDetails"
    },
    "BaseTransaction": {
      "type": "object",
      "properties": {
        "TransactionId": {
          "type": "string",
          "readOnly": true
        },
        "StatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        },
        "ProductFeatureId": {
          "type": "string"
        },
        "TransactionType": {
          "enum": [
            "None",
            "PensionTransfer",
            "ChangeRetirementGoalLumpSum",
            "IncreasePensionContribution",
            "ChangePensionInvestments",
            "PurchaseOrder",
            "OpenSavingsAccount",
            "BookingOrder",
            "EquityReleaseLead",
            "DrawdownPurchase",
            "AnnuityQuote",
            "PensionCashWithdrawal",
            "PensionTracing",
            "PensionKeepInvested",
            "Beneficiaries",
            "SavingMonthlyContribution",
            "SavingSingleContribution",
            "CallMeBack",
            "WealthLead",
            "FundsOrders"
          ],
          "type": "string",
          "readOnly": true
        }
      },
      "title": "BaseTransaction"
    },
    "CancerCondition": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "DiagnosedDate": {
          "type": "string"
        },
        "TumourType": {
          "enum": [
            "Benign",
            "PreCancerous",
            "Malignant"
          ],
          "type": "string"
        },
        "TumourNature": {
          "enum": [
            "TinyGrowth",
            "LocalGrowth",
            "AdjacentLymphNodes",
            "DistantLymphNodes",
            "DistantOrgans"
          ],
          "type": "string"
        },
        "Recurrence": {
          "type": "boolean"
        },
        "LastAppointmentDate": {
          "type": "string"
        },
        "NowDischarged": {
          "type": "boolean"
        },
        "TumourStagingType": {
          "enum": [
            "Unknown",
            "general_staging_classification",
            "dukes_classification",
            "tnm_classification",
            "mac_classification",
            "figo_classification",
            "clark_level",
            "breslow_thickness",
            "ann_arbor_classification"
          ],
          "type": "string"
        },
        "StageGeneralStage": {
          "enum": [
            "Stage0",
            "Stage1",
            "Stage2",
            "Stage3",
            "Stage4"
          ],
          "type": "string"
        },
        "StageGeneralSubStage": {
          "enum": [
            "A",
            "B",
            "C"
          ],
          "type": "string"
        },
        "StageDukes": {
          "enum": [
            "A",
            "B",
            "C",
            "D"
          ],
          "type": "string"
        },
        "StageTNMTType": {
          "enum": [
            "Ta",
            "Tis",
            "T0",
            "T1",
            "T2",
            "T3",
            "T4",
            "TX"
          ],
          "type": "string"
        },
        "StageTNMTSubType": {
          "enum": [
            "a",
            "b",
            "c"
          ],
          "type": "string"
        },
        "StageTNMNType": {
          "enum": [
            "N0",
            "N1",
            "N2",
            "N3",
            "NX"
          ],
          "type": "string"
        },
        "StageTNMNSubType": {
          "enum": [
            "a",
            "b",
            "c"
          ],
          "type": "string"
        },
        "StageTNMMType": {
          "enum": [
            "M0",
            "M1",
            "MX"
          ],
          "type": "string"
        },
        "StageMAC": {
          "enum": [
            "A1",
            "A2",
            "A3",
            "B1",
            "B2",
            "B3",
            "C1",
            "C2",
            "C3"
          ],
          "type": "string"
        },
        "StageFIGO": {
          "format": "int32",
          "type": "integer"
        },
        "StageClark": {
          "format": "int32",
          "type": "integer"
        },
        "StageBreslow": {
          "format": "int32",
          "type": "integer"
        },
        "StageAnnArbor": {
          "format": "int32",
          "type": "integer"
        },
        "TumourGrade": {
          "enum": [
            "Unknown",
            "Grade1LowGrade",
            "Grade2IntermediateGrade",
            "Grade3HighGrade"
          ],
          "type": "string"
        },
        "Surgery": {
          "type": "boolean"
        },
        "SurgeryType": {
          "type": "string"
        },
        "SurgeryDate": {
          "type": "string"
        },
        "Chemotherapy": {
          "type": "boolean"
        },
        "ChemotherapyStartDate": {
          "type": "string"
        },
        "ChemotherapyEndDate": {
          "type": "string"
        },
        "Radiotherapy": {
          "type": "boolean"
        },
        "RadiotherapyStartDate": {
          "type": "string"
        },
        "RadiotherapyEndDate": {
          "type": "string"
        },
        "BoneMarrow": {
          "type": "boolean"
        },
        "BoneMarrowStartDate": {
          "type": "string"
        },
        "BoneMarrowEndDate": {
          "type": "string"
        },
        "HormoneTherapy": {
          "type": "boolean"
        },
        "HormoneTherapyStartDate": {
          "type": "string"
        },
        "HormoneTherapyEndDate": {
          "type": "string"
        },
        "OtherTreatment": {
          "type": "boolean"
        },
        "OtherTreatmentStartDate": {
          "type": "string"
        },
        "OtherTreatmentEndDate": {
          "type": "string"
        },
        "ProstateCurrentPSA": {
          "format": "int32",
          "type": "integer"
        },
        "ProstateCurrentPSADate": {
          "type": "string"
        },
        "ProstatePreTreatmentPSA": {
          "format": "int32",
          "type": "integer"
        },
        "ProstatePreTreatmentPSADate": {
          "type": "string"
        },
        "ProstateGleasonScore": {
          "format": "int32",
          "type": "integer"
        },
        "ProstateGleasonScoreDate": {
          "type": "string"
        },
        "Medications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Medication"
          }
        }
      },
      "title": "CancerCondition"
    },
    "CholesterolCondition": {
      "type": "object",
      "properties": {
        "DiagnosedDate": {
          "type": "string"
        },
        "LatestReadingSystolic": {
          "format": "double",
          "type": "number"
        },
        "LatestReadingDiastolic": {
          "format": "double",
          "type": "number"
        },
        "LatestReadingDate": {
          "type": "string"
        },
        "PreviousReadingSystolic": {
          "format": "double",
          "type": "number"
        },
        "PreviousReadingDiastolic": {
          "format": "double",
          "type": "number"
        },
        "PreviousReadingDate": {
          "type": "string"
        },
        "Medications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Medication"
          }
        }
      },
      "title": "CholesterolCondition"
    },
    "DiabetesCondition": {
      "type": "object",
      "properties": {
        "DiagnosedDate": {
          "type": "string"
        },
        "DiabetesType": {
          "enum": [
            "Type1",
            "Type2"
          ],
          "type": "string"
        },
        "ControlMethod": {
          "enum": [
            "Diet",
            "NonInsulin",
            "Insulin"
          ],
          "type": "string"
        },
        "MonitorFrequency": {
          "format": "int32",
          "type": "integer"
        },
        "MonitorFrequencyTimePeriod": {
          "enum": [
            "Day",
            "Week",
            "Fortnight",
            "FourWeeks",
            "Month",
            "Quarter",
            "HalfYear",
            "Year"
          ],
          "type": "string"
        },
        "LastHospitalisedDate": {
          "type": "string"
        },
        "HbA1cReading1": {
          "format": "double",
          "type": "number"
        },
        "HbA1cReading1Units": {
          "enum": [
            "DCCT",
            "IFFCmmolmol"
          ],
          "type": "string"
        },
        "HbA1cReading1Date": {
          "type": "string"
        },
        "HbA1cReading2": {
          "format": "double",
          "type": "number"
        },
        "HbA1cReading2Units": {
          "enum": [
            "DCCT",
            "IFFCmmolmol"
          ],
          "type": "string"
        },
        "HbA1cReading2Date": {
          "type": "string"
        },
        "HeartDisease": {
          "type": "boolean"
        },
        "Retinopathy": {
          "type": "boolean"
        },
        "Neuropathy": {
          "type": "boolean"
        },
        "KidneyDisease": {
          "type": "boolean"
        },
        "PeripheralVascularDisease": {
          "type": "boolean"
        },
        "Amputation": {
          "type": "boolean"
        },
        "Medications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Medication"
          }
        }
      },
      "title": "DiabetesCondition"
    },
    "HeartCondition": {
      "type": "object",
      "properties": {
        "Diagnoses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeartDiagnosis"
          }
        },
        "Surgeries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeartSurgery"
          }
        },
        "CardiologistUnderCare": {
          "type": "boolean"
        },
        "CardiologistLastConsultationDate": {
          "type": "string"
        },
        "NumberOfHospitalAdmissions": {
          "format": "int32",
          "type": "integer"
        },
        "LastHospitalAdmissionDate": {
          "type": "string"
        },
        "FutureTreatmentPlanned": {
          "type": "boolean"
        },
        "StressTestDate": {
          "type": "string"
        },
        "SymptomsAtRest": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "BreathlessnessWalking": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "BreathlessnessClimbing": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "ChestPainsMinor": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "ChestPainsSevere": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "SwollenAnkles": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "Dizziness": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "Blackouts": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "Medications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Medication"
          }
        }
      },
      "title": "HeartCondition"
    },
    "HypertensionCondition": {
      "type": "object",
      "properties": {
        "DiagnosedDate": {
          "type": "string"
        },
        "LatestReadingSystolic": {
          "format": "int32",
          "type": "integer"
        },
        "LatestReadingDiastolic": {
          "format": "int32",
          "type": "integer"
        },
        "LatestReadingDate": {
          "type": "string"
        },
        "PreviousReadingSystolic": {
          "format": "int32",
          "type": "integer"
        },
        "PreviousReadingDiastolic": {
          "format": "int32",
          "type": "integer"
        },
        "PreviousReadingDate": {
          "type": "string"
        },
        "Medications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Medication"
          }
        }
      },
      "title": "HypertensionCondition"
    },
    "NeurologicalCondition": {
      "type": "object",
      "properties": {
        "Diagnoses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NeurologicalDiagnosis"
          }
        },
        "NumberOfHospitalAdmissions": {
          "format": "int32",
          "type": "integer"
        },
        "LastHospitalAdmissionDate": {
          "type": "string"
        },
        "MMSEScore": {
          "format": "int32",
          "type": "integer"
        },
        "PressureSores": {
          "type": "boolean"
        },
        "Falls": {
          "type": "boolean"
        },
        "Tremors": {
          "type": "boolean"
        },
        "Seizures": {
          "type": "boolean"
        },
        "Medications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Medication"
          }
        }
      },
      "title": "NeurologicalCondition"
    },
    "OtherCondition": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "DiagnosedDate": {
          "type": "string"
        },
        "LastSufferedSymptomsDate": {
          "type": "string"
        },
        "LastReceivedTreatmentDate": {
          "type": "string"
        },
        "NumberOfHospitalAdmissions": {
          "format": "int32",
          "type": "integer"
        },
        "TreatmentReceivedLast5Years": {
          "type": "boolean"
        },
        "TreatmentRenalDialysis": {
          "type": "boolean"
        },
        "TreatmentSurgery": {
          "type": "boolean"
        },
        "Medications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Medication"
          }
        }
      },
      "title": "OtherCondition"
    },
    "RespiratoryCondition": {
      "type": "object",
      "properties": {
        "Diagnoses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RespiratoryDiagnosis"
          }
        },
        "NumberOfHospitalAdmissions": {
          "format": "int32",
          "type": "integer"
        },
        "LastHospitalAdmissionDate": {
          "type": "string"
        },
        "LungFunctionImpairment": {
          "enum": [
            "Unaffected",
            "Minimal",
            "Moderate",
            "Severe"
          ],
          "type": "string"
        },
        "RecurrentChestInfections": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "NeedForHomeOxygen": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "NeedForCPAPBreathingMachine": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "SignsOfCorPulmonale": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "BreathlessnessWalkingFromRoomToRoom": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "BreathlessnessClimbingStairs": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "BreathlessnessWhenLyingFlat": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "OralSteroids": {
          "enum": [
            "Never",
            "SomeOfTheTime",
            "MostOfTheTime",
            "Always"
          ],
          "type": "string"
        },
        "Medications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Medication"
          }
        }
      },
      "title": "RespiratoryCondition"
    },
    "SclerosisCondition": {
      "type": "object",
      "properties": {
        "SubType": {
          "enum": [
            "RelapsingRemitting",
            "SecondaryProgressive",
            "PrimaryProgressive",
            "ProgressiveRelapsing"
          ],
          "type": "string"
        },
        "DiagnosedDate": {
          "type": "string"
        },
        "NumberOfAttacksInLast5Years": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfHospitalAdmissions": {
          "format": "int32",
          "type": "integer"
        },
        "LastHospitalAdmissionDate": {
          "type": "string"
        },
        "BladderIncontinence": {
          "type": "boolean"
        },
        "SecondaryInfection": {
          "type": "boolean"
        },
        "ProgressiveMentalDeterioration": {
          "type": "boolean"
        },
        "ImpairmentOfVision": {
          "type": "boolean"
        },
        "ImpairmentOfSpeech": {
          "type": "boolean"
        },
        "ParalysisOfLimb": {
          "type": "boolean"
        },
        "UseOfSteroids": {
          "type": "boolean"
        },
        "Medications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Medication"
          }
        }
      },
      "title": "SclerosisCondition"
    },
    "StrokeCondition": {
      "type": "object",
      "properties": {
        "Strokes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stroke"
          }
        },
        "SpeechDifficulties": {
          "type": "boolean"
        },
        "VisualImpairment": {
          "type": "boolean"
        },
        "ArmParalysis": {
          "type": "boolean"
        },
        "LegParalysis": {
          "type": "boolean"
        },
        "ShortTermMemoryLoss": {
          "type": "boolean"
        },
        "UnderFollowUp": {
          "type": "boolean"
        },
        "Medications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Medication"
          }
        }
      },
      "title": "StrokeCondition"
    },
    "Medication": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "HeartDiagnosisType": {
          "enum": [
            "HeartAttack",
            "Angina",
            "HeartFailure",
            "AorticAneurysm",
            "Cardiomyopathy",
            "HeartValveDisorders",
            "AtrialFibrillation",
            "OtherIrregularHeartRhythm",
            "Other"
          ],
          "type": "string"
        },
        "Dosage": {
          "format": "double",
          "type": "number"
        },
        "DosageUnit": {
          "enum": [
            "Milligram",
            "Microgram",
            "Gram",
            "Millilitre"
          ],
          "type": "string"
        },
        "TakenAsRequired": {
          "type": "boolean"
        },
        "DosageFrequency": {
          "format": "int32",
          "type": "integer"
        },
        "DosageFrequencyTimePeriod": {
          "enum": [
            "Day",
            "Week",
            "Fortnight",
            "FourWeeks",
            "Month",
            "Quarter",
            "HalfYear",
            "Year"
          ],
          "type": "string"
        },
        "StartDate": {
          "type": "string"
        },
        "EndDate": {
          "type": "string"
        }
      },
      "title": "Medication"
    },
    "HeartDiagnosis": {
      "type": "object",
      "properties": {
        "Type": {
          "enum": [
            "HeartAttack",
            "Angina",
            "HeartFailure",
            "AorticAneurysm",
            "Cardiomyopathy",
            "HeartValveDisorders",
            "AtrialFibrillation",
            "OtherIrregularHeartRhythm",
            "Other"
          ],
          "type": "string"
        },
        "OtherDescription": {
          "type": "string"
        },
        "Date": {
          "type": "string"
        },
        "NumberOfOccurrences": {
          "format": "int32",
          "type": "integer"
        },
        "Ongoing": {
          "type": "boolean"
        }
      },
      "title": "HeartDiagnosis"
    },
    "HeartSurgery": {
      "type": "object",
      "properties": {
        "Type": {
          "enum": [
            "Angioplasty",
            "CABG",
            "AorticAneurysmRepair",
            "AorticValveReplacement",
            "Cardioversion",
            "MitralValveReplacement",
            "Pacemaker",
            "TricuspidValveReplacement"
          ],
          "type": "string"
        },
        "Date": {
          "type": "string"
        },
        "NumberOfArteries": {
          "format": "int32",
          "type": "integer"
        },
        "Successful": {
          "type": "boolean"
        }
      },
      "title": "HeartSurgery"
    },
    "NeurologicalDiagnosis": {
      "type": "object",
      "properties": {
        "Type": {
          "enum": [
            "SenileDementia",
            "VascularDementia",
            "AlzheimersDisease",
            "ParkinsonsDisease",
            "MotorNeuroneDisease",
            "Other"
          ],
          "type": "string"
        },
        "OtherDescription": {
          "type": "string"
        },
        "Date": {
          "type": "string"
        }
      },
      "title": "NeurologicalDiagnosis"
    },
    "RespiratoryDiagnosis": {
      "type": "object",
      "properties": {
        "Type": {
          "enum": [
            "COADorCOPD",
            "Emphysema",
            "Bronchiectasis",
            "Pneumoconiosis",
            "Asbestosis",
            "Asthma",
            "PleuralPlaques",
            "SleepApnoea",
            "Other"
          ],
          "type": "string"
        },
        "OtherDescription": {
          "type": "string"
        },
        "Date": {
          "type": "string"
        }
      },
      "title": "RespiratoryDiagnosis"
    },
    "Stroke": {
      "type": "object",
      "properties": {
        "Type": {
          "enum": [
            "CerebralHaemorrhageBleed",
            "CVACerebrovascularAccidentMajorStroke",
            "SubarachnoidHaemorrhageSAH",
            "TIATransientIschaemicAttackMiniStroke"
          ],
          "type": "string"
        },
        "Date": {
          "type": "string"
        },
        "InitialSymptomsDurationDays": {
          "format": "int32",
          "type": "integer"
        },
        "DurationUntilFullRecovery": {
          "type": "string"
        }
      },
      "title": "Stroke"
    },
    "AnnuityQuoteSignature": {
      "type": "object",
      "properties": {
        "annuityCaseId": {
          "type": "string"
        },
        "redirectUrlAfterSign": {
          "type": "string"
        }
      },
      "title": "AnnuityQuoteSignature"
    },
    "KeepInvestedInfos": {
      "type": "object",
      "properties": {
        "AccountsInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountInvestedInfos"
          }
        }
      },
      "title": "KeepInvestedInfos"
    },
    "AccountInvestedInfos": {
      "type": "object",
      "properties": {
        "AccountId": {
          "type": "string"
        },
        "PolicyNumber": {
          "type": "string"
        },
        "InitialBalance": {
          "$ref": "#/definitions/Money"
        },
        "MonthlyContributions": {
          "$ref": "#/definitions/Money"
        },
        "projectedValue5Years": {
          "$ref": "#/definitions/Money"
        },
        "GraphicDatas": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        }
      },
      "title": "AccountInvestedInfos"
    },
    "KeepPensionInvestmentConfirmation": {
      "type": "object",
      "properties": {
        "optionsInput": {
          "$ref": "#/definitions/RetirementOptionsInput"
        },
        "keepInvestedInfos": {
          "$ref": "#/definitions/KeepInvestedInfos"
        }
      },
      "title": "KeepPensionInvestmentConfirmation"
    },
    "WithdrawContext": {
      "type": "object",
      "properties": {
        "ContextStatus": {
          "type": "string"
        },
        "InitialBalance": {
          "$ref": "#/definitions/Money"
        },
        "TaxFreeAllowed": {
          "$ref": "#/definitions/Money"
        },
        "TotalWithDrawn": {
          "$ref": "#/definitions/Money"
        },
        "AccountsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountWithdrawContext"
          }
        }
      },
      "title": "WithdrawContext"
    },
    "AccountWithdrawContext": {
      "type": "object",
      "properties": {
        "AccountId": {
          "type": "string"
        },
        "CanWithdraw": {
          "type": "boolean"
        },
        "WithdrawInProgress": {
          "type": "boolean"
        },
        "TotalWithdraw": {
          "$ref": "#/definitions/Money",
          "readOnly": true
        },
        "TaxedWithdrawal": {
          "$ref": "#/definitions/Money"
        },
        "TaxFreeWithdrawal": {
          "$ref": "#/definitions/Money"
        },
        "InitialBalance": {
          "$ref": "#/definitions/Money"
        },
        "TaxFreeAllowed": {
          "$ref": "#/definitions/Money"
        },
        "FiscalTaxedWithdrawal": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "AccountWithdrawContext"
    },
    "WithdrawCashDataInput": {
      "type": "object",
      "properties": {
        "optionsInput": {
          "$ref": "#/definitions/RetirementOptionsInput"
        },
        "withdrawInput": {
          "$ref": "#/definitions/WithdrawalInput"
        }
      },
      "title": "WithdrawCashDataInput"
    },
    "WithdrawalInput": {
      "type": "object",
      "properties": {
        "TotalSum": {
          "$ref": "#/definitions/Money"
        },
        "TaxFreeLumpSum": {
          "$ref": "#/definitions/Money"
        },
        "PayeeName": {
          "type": "string"
        },
        "AccountHolder": {
          "type": "string"
        },
        "SortCode": {
          "type": "string"
        },
        "AccountNumber": {
          "type": "string"
        }
      },
      "title": "WithdrawalInput"
    },
    "WithdrawCashInfos": {
      "type": "object",
      "properties": {
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "MinDrawdownAge": {
          "format": "int32",
          "type": "integer"
        },
        "MaxDrawdownAge": {
          "format": "int32",
          "type": "integer"
        },
        "AccountsInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountWithdrawCashInfos"
          }
        }
      },
      "title": "WithdrawCashInfos"
    },
    "AccountWithdrawCashInfos": {
      "type": "object",
      "properties": {
        "AccountId": {
          "type": "string"
        },
        "PolicyNumber": {
          "type": "string"
        },
        "AccountName": {
          "type": "string"
        },
        "ProviderName": {
          "type": "string"
        },
        "InitialCapital": {
          "$ref": "#/definitions/Money"
        },
        "AccumulatedCapital": {
          "$ref": "#/definitions/Money"
        },
        "TaxFreeWithdrawal": {
          "$ref": "#/definitions/Money"
        },
        "TaxedWithdrawal": {
          "$ref": "#/definitions/Money"
        },
        "TotalTax": {
          "$ref": "#/definitions/Money"
        },
        "WithdrawalFee": {
          "$ref": "#/definitions/Money"
        },
        "NetCashBalanceWithdraw": {
          "$ref": "#/definitions/Money"
        },
        "RemainingBalance": {
          "$ref": "#/definitions/Money"
        },
        "DrawdownAge": {
          "format": "int32",
          "type": "integer"
        },
        "GraphicDatas": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        }
      },
      "title": "AccountWithdrawCashInfos"
    },
    "PensionWithdrawConfirmation": {
      "type": "object",
      "properties": {
        "optionsInput": {
          "$ref": "#/definitions/RetirementOptionsInput"
        },
        "withdrawInput": {
          "$ref": "#/definitions/WithdrawalInput"
        }
      },
      "title": "PensionWithdrawConfirmation"
    },
    "ProfileTransactionRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ReferenceNumber": {
          "type": "string"
        },
        "ProfileId": {
          "type": "string"
        },
        "TypeOfTransaction": {
          "enum": [
            "None",
            "PensionTransfer",
            "ChangeRetirementGoalLumpSum",
            "IncreasePensionContribution",
            "ChangePensionInvestments",
            "PurchaseOrder",
            "OpenSavingsAccount",
            "BookingOrder",
            "EquityReleaseLead",
            "DrawdownPurchase",
            "AnnuityQuote",
            "PensionCashWithdrawal",
            "PensionTracing",
            "PensionKeepInvested",
            "Beneficiaries",
            "SavingMonthlyContribution",
            "SavingSingleContribution",
            "CallMeBack",
            "WealthLead",
            "FundsOrders"
          ],
          "type": "string"
        },
        "StatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        },
        "EnterpriseUniqueName": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ProcessedDate": {
          "format": "date-time",
          "type": "string"
        },
        "StatusCodeChangeReason": {
          "type": "string"
        },
        "TransactionPayload": {
          "$ref": "#/definitions/BaseTransaction"
        }
      },
      "title": "ProfileTransactionRM"
    },
    "IncreasePensionContributionTransaction": {
      "type": "object",
      "properties": {
        "PensionProviderId": {
          "type": "string"
        },
        "Employer": {
          "type": "string"
        },
        "PensionContributionPercentage": {
          "format": "double",
          "type": "number"
        },
        "PensionContributionChange": {
          "$ref": "#/definitions/Money"
        },
        "PensionTopUpChange": {
          "$ref": "#/definitions/Money"
        },
        "CurrentEmployerContribution": {
          "$ref": "#/definitions/Money"
        },
        "CurrentEmployeeContribution": {
          "$ref": "#/definitions/Money"
        },
        "PensionProviderName": {
          "type": "string"
        },
        "EstimatedEmployerContribution": {
          "$ref": "#/definitions/Money"
        },
        "EstimatedEmployerPercentageContribution": {
          "format": "double",
          "type": "number"
        },
        "TransactionType": {
          "enum": [
            "None",
            "PensionTransfer",
            "ChangeRetirementGoalLumpSum",
            "IncreasePensionContribution",
            "ChangePensionInvestments",
            "PurchaseOrder",
            "OpenSavingsAccount",
            "BookingOrder",
            "EquityReleaseLead",
            "DrawdownPurchase",
            "AnnuityQuote",
            "PensionCashWithdrawal",
            "PensionTracing",
            "PensionKeepInvested",
            "Beneficiaries",
            "SavingMonthlyContribution",
            "SavingSingleContribution",
            "CallMeBack",
            "WealthLead",
            "FundsOrders"
          ],
          "type": "string",
          "readOnly": true
        },
        "AccountsInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountInfos"
          }
        },
        "TransactionId": {
          "type": "string",
          "readOnly": true
        },
        "StatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        },
        "ProductFeatureId": {
          "type": "string"
        }
      },
      "title": "IncreasePensionContributionTransaction"
    },
    "AccountInfos": {
      "type": "object",
      "properties": {
        "AccountId": {
          "type": "string"
        },
        "PolicyNumber": {
          "type": "string"
        },
        "AmountToConsider": {
          "$ref": "#/definitions/Money"
        }
      },
      "title": "AccountInfos"
    },
    "ChangePensionInvestmentsTransaction": {
      "type": "object",
      "properties": {
        "Funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fund"
          }
        },
        "TransactionType": {
          "enum": [
            "None",
            "PensionTransfer",
            "ChangeRetirementGoalLumpSum",
            "IncreasePensionContribution",
            "ChangePensionInvestments",
            "PurchaseOrder",
            "OpenSavingsAccount",
            "BookingOrder",
            "EquityReleaseLead",
            "DrawdownPurchase",
            "AnnuityQuote",
            "PensionCashWithdrawal",
            "PensionTracing",
            "PensionKeepInvested",
            "Beneficiaries",
            "SavingMonthlyContribution",
            "SavingSingleContribution",
            "CallMeBack",
            "WealthLead",
            "FundsOrders"
          ],
          "type": "string",
          "readOnly": true
        },
        "AccountsInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountInfos"
          }
        },
        "TransactionId": {
          "type": "string",
          "readOnly": true
        },
        "StatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        },
        "ProductFeatureId": {
          "type": "string"
        }
      },
      "title": "ChangePensionInvestmentsTransaction"
    },
    "Fund": {
      "type": "object",
      "properties": {
        "Isin": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Percentage": {
          "format": "double",
          "type": "number"
        }
      },
      "title": "Fund"
    },
    "SavingMonthlyContributionTransaction": {
      "type": "object",
      "properties": {
        "TransactionType": {
          "enum": [
            "None",
            "PensionTransfer",
            "ChangeRetirementGoalLumpSum",
            "IncreasePensionContribution",
            "ChangePensionInvestments",
            "PurchaseOrder",
            "OpenSavingsAccount",
            "BookingOrder",
            "EquityReleaseLead",
            "DrawdownPurchase",
            "AnnuityQuote",
            "PensionCashWithdrawal",
            "PensionTracing",
            "PensionKeepInvested",
            "Beneficiaries",
            "SavingMonthlyContribution",
            "SavingSingleContribution",
            "CallMeBack",
            "WealthLead",
            "FundsOrders"
          ],
          "type": "string",
          "readOnly": true
        },
        "GoalId": {
          "type": "string"
        },
        "SavingAccountId": {
          "type": "string"
        },
        "BankAccountId": {
          "type": "string"
        },
        "IsAccountHolder": {
          "type": "boolean"
        },
        "IsAuthorizedDebits": {
          "type": "boolean"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "Contribution": {
          "$ref": "#/definitions/Money"
        },
        "TransactionId": {
          "type": "string",
          "readOnly": true
        },
        "StatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        },
        "ProductFeatureId": {
          "type": "string"
        }
      },
      "title": "SavingMonthlyContributionTransaction"
    },
    "SavingSingleContributionTransaction": {
      "type": "object",
      "properties": {
        "TransactionType": {
          "enum": [
            "None",
            "PensionTransfer",
            "ChangeRetirementGoalLumpSum",
            "IncreasePensionContribution",
            "ChangePensionInvestments",
            "PurchaseOrder",
            "OpenSavingsAccount",
            "BookingOrder",
            "EquityReleaseLead",
            "DrawdownPurchase",
            "AnnuityQuote",
            "PensionCashWithdrawal",
            "PensionTracing",
            "PensionKeepInvested",
            "Beneficiaries",
            "SavingMonthlyContribution",
            "SavingSingleContribution",
            "CallMeBack",
            "WealthLead",
            "FundsOrders"
          ],
          "type": "string",
          "readOnly": true
        },
        "GoalId": {
          "type": "string"
        },
        "SavingAccountId": {
          "type": "string"
        },
        "BankAccountId": {
          "type": "string"
        },
        "IsAccountHolder": {
          "type": "boolean"
        },
        "IsAuthorizedDebits": {
          "type": "boolean"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "Contribution": {
          "$ref": "#/definitions/Money"
        },
        "TransactionId": {
          "type": "string",
          "readOnly": true
        },
        "StatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        },
        "ProductFeatureId": {
          "type": "string"
        }
      },
      "title": "SavingSingleContributionTransaction"
    },
    "CallMeBackTransactionRM": {
      "type": "object",
      "properties": {
        "StatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "Purpose": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        },
        "AlreadyClient": {
          "type": "boolean"
        },
        "RelatedItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallMeBackTransactionRelatedItemRM"
          }
        }
      },
      "title": "CallMeBackTransactionRM"
    },
    "CallMeBackTransactionRelatedItemRM": {
      "type": "object",
      "properties": {
        "Type": {
          "format": "int32",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "Values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CallMeBackTransactionRelatedItemRM"
    },
    "PensionTransferTransaction": {
      "type": "object",
      "properties": {
        "ProviderName": {
          "type": "string"
        },
        "SchemeName": {
          "type": "string"
        },
        "ApproximateTransferValue": {
          "$ref": "#/definitions/Money"
        },
        "TypeOfScheme": {
          "type": "string"
        },
        "InvestmentPlan": {
          "type": "string"
        },
        "TransferFormSigned": {
          "type": "boolean"
        },
        "SignatureEnvelopeId": {
          "type": "string"
        },
        "TransactionType": {
          "enum": [
            "None",
            "PensionTransfer",
            "ChangeRetirementGoalLumpSum",
            "IncreasePensionContribution",
            "ChangePensionInvestments",
            "PurchaseOrder",
            "OpenSavingsAccount",
            "BookingOrder",
            "EquityReleaseLead",
            "DrawdownPurchase",
            "AnnuityQuote",
            "PensionCashWithdrawal",
            "PensionTracing",
            "PensionKeepInvested",
            "Beneficiaries",
            "SavingMonthlyContribution",
            "SavingSingleContribution",
            "CallMeBack",
            "WealthLead",
            "FundsOrders"
          ],
          "type": "string",
          "readOnly": true
        },
        "ReferenceNumber": {
          "type": "string"
        },
        "AccountsInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountInfos"
          }
        },
        "TransactionId": {
          "type": "string",
          "readOnly": true
        },
        "StatusCode": {
          "enum": [
            "NONE",
            "INPROGRESS",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "CANCELLED_BY_IFA",
            "PENDING",
            "UPDATED",
            "ALL"
          ],
          "type": "string"
        },
        "ProductFeatureId": {
          "type": "string"
        }
      },
      "title": "PensionTransferTransaction"
    },
    "TransferPensionConfirmation": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "redirectURL": {
          "type": "string"
        }
      },
      "title": "TransferPensionConfirmation"
    },
    "LinkTransferInfoModel": {
      "type": "object",
      "properties": {
        "Balance": {
          "$ref": "#/definitions/Money"
        },
        "ExtraRetirementIncome": {
          "$ref": "#/definitions/Money"
        },
        "Name": {
          "type": "string"
        },
        "AccountType": {
          "type": "string"
        },
        "RetirementAge": {
          "format": "int32",
          "type": "integer"
        },
        "CashTransferValue": {
          "$ref": "#/definitions/Money"
        },
        "IsOverLimit": {
          "type": "boolean"
        }
      },
      "title": "LinkTransferInfoModel"
    },
    "ProfileRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ObjectId": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "MaidenName": {
          "type": "string"
        },
        "MiddleName": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "PhoneNumberType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "AlternatePhoneNumber": {
          "type": "string"
        },
        "AlternatePhoneNumberType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "AlreadyConnect": {
          "type": "boolean"
        },
        "AvaIntroduced": {
          "type": "boolean"
        },
        "Gender": {
          "format": "int32",
          "type": "integer"
        },
        "CountryOfBirth": {
          "type": "string"
        },
        "Nationality": {
          "type": "string"
        },
        "MaritalStatus": {
          "enum": [
            "Unknown",
            "Married",
            "CivilPartnership",
            "Divorced",
            "Separated",
            "Widowed",
            "Single"
          ],
          "type": "string"
        },
        "BirthDate": {
          "format": "date-time",
          "type": "string"
        },
        "Age": {
          "format": "int32",
          "type": "integer"
        },
        "Address1": {
          "type": "string"
        },
        "Address2": {
          "type": "string"
        },
        "PostCode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "ResidenceCity": {
          "type": "string"
        },
        "ResidenceCounty": {
          "type": "string"
        },
        "County": {
          "type": "string"
        },
        "PreferredLanguage": {
          "$ref": "#/definitions/Language"
        },
        "Country": {
          "$ref": "#/definitions/Countries"
        },
        "TaxBracket": {
          "$ref": "#/definitions/Money"
        },
        "BudgetGoalScore": {
          "format": "double",
          "type": "number"
        },
        "AlternativeIdentifier": {
          "type": "string"
        },
        "IsRetired": {
          "type": "boolean"
        },
        "ProfileEnterprises": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileEnterpriseRM"
          }
        },
        "ProfileIncome": {
          "$ref": "#/definitions/ProfileIncome"
        },
        "LastLoginDate": {
          "format": "date-time",
          "type": "string"
        },
        "LastTimezoneOffset": {
          "format": "double",
          "type": "number"
        },
        "HasSMSSubscribed": {
          "type": "boolean"
        },
        "HasKnowledgeCenterAccess": {
          "type": "boolean"
        },
        "HasAIPAccess": {
          "type": "boolean"
        },
        "HasEmailNudgesSubscribed": {
          "type": "boolean"
        },
        "Role": {
          "enum": [
            "User",
            "Admin",
            "Support",
            "IFA",
            "AbakaAdmin",
            "AbakaSupportAgent",
            "Analyst",
            "AbakaAnalyst",
            "AbakaLinker",
            "AbakaRefresher",
            "AbakaAutoscaler",
            "AbakaBot",
            "Developer",
            "DataScientist",
            "AbakaFunction",
            "Enterprise",
            "IFAManager",
            "Test",
            "AbakaNode",
            "BO"
          ],
          "type": "string"
        },
        "Configuration": {
          "$ref": "#/definitions/EnterpriseSelectorConfigurationRM"
        },
        "EnterpriseUri": {
          "type": "string"
        },
        "ProfileExtended": {
          "type": "object"
        },
        "PersonaeList": {
          "type": "string"
        }
      },
      "title": "ProfileRM"
    },
    "MinimumProfile": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ObjectId": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "Login": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "BirthDate": {
          "format": "date-time",
          "type": "string"
        },
        "Age": {
          "format": "int32",
          "type": "integer"
        },
        "AipLogin": {
          "type": "string"
        },
        "HasAlreadyConnected": {
          "type": "boolean"
        },
        "IsRetired": {
          "type": "boolean"
        },
        "AvaIntroduced": {
          "type": "boolean"
        },
        "ProfileEnterprises": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileEnterprise"
          }
        },
        "ProfileIncome": {
          "$ref": "#/definitions/ProfileIncome"
        },
        "City": {
          "type": "string"
        },
        "Country": {
          "$ref": "#/definitions/Countries"
        },
        "Configuration": {
          "$ref": "#/definitions/EnterpriseSelectorConfiguration"
        },
        "PreferredLanguage": {
          "$ref": "#/definitions/Language"
        }
      },
      "title": "MinimumProfile"
    },
    "EnterpriseSelectorConfiguration": {
      "type": "object",
      "properties": {
        "CustodianName": {
          "type": "string"
        },
        "IdentityServiceName": {
          "type": "string"
        },
        "FinancialEngineName": {
          "type": "string"
        },
        "EnterpriseFees": {
          "format": "double",
          "type": "number"
        },
        "WithdrawalFees": {
          "format": "double",
          "type": "number"
        },
        "AIPAppId": {
          "type": "string"
        },
        "AIPAppSecret": {
          "type": "string"
        },
        "AIPDefaultInstitutions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Provider"
            }
          }
        },
        "TransferProviderName": {
          "type": "string"
        },
        "DefaultEnterpriseName": {
          "type": "string"
        },
        "PaymentServiceName": {
          "type": "string"
        },
        "SupportOrganizationName": {
          "type": "string"
        },
        "TermLength": {
          "type": "string"
        },
        "AppointmentConfig": {
          "$ref": "#/definitions/AppointmentConfig"
        },
        "ContentPublishers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentPublisher"
          }
        },
        "CustomStyle": {
          "type": "string"
        },
        "AdaptiveCardStyle": {
          "type": "object"
        },
        "DefaultAccountPortfolioNumber": {
          "format": "int32",
          "type": "integer"
        },
        "DefaultProviderIdentifier": {
          "$ref": "#/definitions/ProviderIdentifier"
        },
        "AboutDetails": {
          "$ref": "#/definitions/AboutDetails"
        },
        "EmailTemplates": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Policy": {
          "$ref": "#/definitions/B2CPolicy"
        },
        "TransactionSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionConfig"
          }
        },
        "EquityReleaseCallCenterEmail": {
          "type": "string"
        },
        "DisableEquityReleaseUserEmail": {
          "type": "boolean"
        },
        "LockedOutAlerts": {
          "type": "boolean"
        },
        "NotificationBusinessRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationBusinessRule"
          }
        },
        "Contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "DeepLink": {
          "$ref": "#/definitions/DeepLink"
        },
        "DisableRecommendationEngine": {
          "type": "boolean"
        },
        "ExternalLinksCTA": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OneSignalAppId": {
          "type": "string"
        },
        "OneSignalAppSecret": {
          "type": "string"
        },
        "KcFixedButtons": {
          "type": "boolean"
        },
        "PublishCampaignsPipeline": {
          "type": "string"
        },
        "NudgeCallbackPipeline": {
          "type": "string"
        },
        "IsMenuGoalAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsMenuFinancialProfileAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsMenuFindTransferAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsMenuKnowledgeAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsMenuLinkAccountsAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsMenuPersonalProfileAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsMenuPaymentsAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsBudgetGoalAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsBuyGiftAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsChildrenEducationAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsEmergencyFundAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsGeneralInvestingAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsMortgageAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsPayOffDebtAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsPlanWeddingAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsSaveFamilyEventAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsSaveForCarAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsSaveForChristmasAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsSaveForHouseAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsSaveHolidayAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsSaveRetirementAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "IsOptimiseRetirementIncomeAvailable": {
          "type": "boolean",
          "readOnly": true
        },
        "Id": {
          "type": "string"
        },
        "Enterprise": {
          "$ref": "#/definitions/Enterprise"
        },
        "Configuration": {
          "type": "string"
        },
        "AIPAutomationDisabled": {
          "type": "boolean"
        },
        "ManualEstimateRetirementIncome": {
          "type": "boolean"
        },
        "GoalTypesUnavailable": {
          "format": "int32",
          "type": "integer"
        },
        "MenuItemsUnavailable": {
          "format": "int32",
          "type": "integer"
        },
        "IsLGPSMember": {
          "type": "boolean"
        },
        "CreateDBPensionsAtOnboarding": {
          "type": "boolean"
        },
        "DisablePinCodeCheck": {
          "type": "boolean"
        },
        "IsAVARegulatedAdviceProvided": {
          "type": "boolean"
        },
        "AvaRegulatedAdvicePricing": {
          "format": "int32",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "IFARegulatedAdviceType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "IFARegulatedAdvicePlan": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "IsIntelligentPredictEnabled": {
          "type": "boolean"
        },
        "UniqueBotPublicKey": {
          "type": "string"
        },
        "UniqueAbakaConnectPublicKey": {
          "type": "string"
        }
      },
      "title": "EnterpriseSelectorConfiguration"
    },
    "TransactionConfig": {
      "type": "object",
      "properties": {
        "TypeName": {
          "enum": [
            "None",
            "PensionTransfer",
            "ChangeRetirementGoalLumpSum",
            "IncreasePensionContribution",
            "ChangePensionInvestments",
            "PurchaseOrder",
            "OpenSavingsAccount",
            "BookingOrder",
            "EquityReleaseLead",
            "DrawdownPurchase",
            "AnnuityQuote",
            "PensionCashWithdrawal",
            "PensionTracing",
            "PensionKeepInvested",
            "Beneficiaries",
            "SavingMonthlyContribution",
            "SavingSingleContribution",
            "CallMeBack",
            "WealthLead",
            "FundsOrders"
          ],
          "type": "string"
        },
        "EmailActivated": {
          "type": "boolean"
        },
        "Email": {
          "type": "string"
        },
        "TicketActivated": {
          "type": "boolean"
        },
        "IntegrationActivated": {
          "type": "boolean"
        },
        "AutomaticCompletion": {
          "type": "boolean"
        }
      },
      "title": "TransactionConfig"
    },
    "NotificationBusinessRule": {
      "type": "object",
      "properties": {
        "Types": {
          "type": "array",
          "items": {
            "enum": [
              "NONE",
              "SMS",
              "APP_INSTANT",
              "APP_BATCH",
              "EMAIL",
              "WEB_PUSH",
              "PUSH",
              "WEB_PUSH_AND_APP",
              "SMS_AND_APP",
              "SMS_AND_INSTANT",
              "EMAIL_AND_APP",
              "EMAIL_AND_INSTANT",
              "EMAIL_AND_SMS_AND_INSTANT",
              "ALL",
              "IN_APP"
            ],
            "type": "string"
          }
        },
        "MaxPerWeek": {
          "format": "int32",
          "type": "integer"
        },
        "MaxPerDay": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "NotificationBusinessRule"
    },
    "UserSensitiveInfo": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "NationalInsuranceNumber": {
          "type": "string"
        }
      },
      "title": "UserSensitiveInfo"
    },
    "ResponseRequestComments": {
      "type": "object",
      "properties": {
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZendeskUser"
          }
        }
      },
      "title": "ResponseRequestComments"
    },
    "Comment": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "author_id": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "html_body": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachments"
          }
        }
      },
      "title": "Comment"
    },
    "ZendeskUser": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ZendeskUser"
    },
    "Attachments": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "content_url": {
          "type": "string"
        },
        "content_type": {
          "type": "string"
        }
      },
      "title": "Attachments"
    },
    "Ticket": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "subject": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "result_type": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldOption"
          }
        }
      },
      "title": "Ticket"
    },
    "FieldOption": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "FieldOption"
    },
    "SupportRequest": {
      "type": "object",
      "properties": {
        "Subject": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        },
        "CustomFieldsValue": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "SupportRequest"
    },
    "ImportDataCheckUserExist": {
      "type": "object",
      "properties": {
        "MatchFound": {
          "enum": [
            "None",
            "Single",
            "Multiple"
          ],
          "type": "string"
        },
        "PhoneNumber": {
          "type": "string"
        }
      },
      "title": "ImportDataCheckUserExist"
    },
    "UserPreferenceRM": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "Profile_Id": {
          "type": "string"
        },
        "EntityType": {
          "enum": [
            "POLICY_CATEGORY",
            "POLICY_PRODUCT",
            "KNOWLEDGE_ARTICLE"
          ],
          "type": "string"
        },
        "EntityId": {
          "type": "string"
        },
        "Type": {
          "enum": [
            "INTERESTED",
            "VIEWED",
            "NOT_INTERESTED",
            "ALREADY_OWNED",
            "DONT_NEED",
            "DONT_UNDERSTAND"
          ],
          "type": "string"
        },
        "CreationDate": {
          "format": "date-time",
          "type": "string"
        },
        "Entity": {
          "type": "object"
        }
      },
      "title": "UserPreferenceRM"
    }
  }
}